// Code generated by go-swagger; DO NOT EDIT.

package k8s_dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "sherlock-terraform-provider-nutanixkps/generated/kps_cloud_api_swagger/models"
)

// NewK8sDashboardAddViewonlyUsersParams creates a new K8sDashboardAddViewonlyUsersParams object
// with the default values initialized.
func NewK8sDashboardAddViewonlyUsersParams() *K8sDashboardAddViewonlyUsersParams {
	var ()
	return &K8sDashboardAddViewonlyUsersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewK8sDashboardAddViewonlyUsersParamsWithTimeout creates a new K8sDashboardAddViewonlyUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewK8sDashboardAddViewonlyUsersParamsWithTimeout(timeout time.Duration) *K8sDashboardAddViewonlyUsersParams {
	var ()
	return &K8sDashboardAddViewonlyUsersParams{

		timeout: timeout,
	}
}

// NewK8sDashboardAddViewonlyUsersParamsWithContext creates a new K8sDashboardAddViewonlyUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewK8sDashboardAddViewonlyUsersParamsWithContext(ctx context.Context) *K8sDashboardAddViewonlyUsersParams {
	var ()
	return &K8sDashboardAddViewonlyUsersParams{

		Context: ctx,
	}
}

// NewK8sDashboardAddViewonlyUsersParamsWithHTTPClient creates a new K8sDashboardAddViewonlyUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewK8sDashboardAddViewonlyUsersParamsWithHTTPClient(client *http.Client) *K8sDashboardAddViewonlyUsersParams {
	var ()
	return &K8sDashboardAddViewonlyUsersParams{
		HTTPClient: client,
	}
}

/*K8sDashboardAddViewonlyUsersParams contains all the parameters to send to the API endpoint
for the k8s dashboard add viewonly users operation typically these are written to a http.Request
*/
type K8sDashboardAddViewonlyUsersParams struct {

	/*Authorization
	  Format: Bearer <token>, with <token> from login API response.

	*/
	Authorization string
	/*Payload*/
	Payload *models.K8sDashboardViewonlyUserParams
	/*SvcDomainID
	  ID for the service domain

	*/
	SvcDomainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) WithTimeout(timeout time.Duration) *K8sDashboardAddViewonlyUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) WithContext(ctx context.Context) *K8sDashboardAddViewonlyUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) WithHTTPClient(client *http.Client) *K8sDashboardAddViewonlyUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) WithAuthorization(authorization string) *K8sDashboardAddViewonlyUsersParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithPayload adds the payload to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) WithPayload(payload *models.K8sDashboardViewonlyUserParams) *K8sDashboardAddViewonlyUsersParams {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) SetPayload(payload *models.K8sDashboardViewonlyUserParams) {
	o.Payload = payload
}

// WithSvcDomainID adds the svcDomainID to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) WithSvcDomainID(svcDomainID string) *K8sDashboardAddViewonlyUsersParams {
	o.SetSvcDomainID(svcDomainID)
	return o
}

// SetSvcDomainID adds the svcDomainId to the k8s dashboard add viewonly users params
func (o *K8sDashboardAddViewonlyUsersParams) SetSvcDomainID(svcDomainID string) {
	o.SvcDomainID = svcDomainID
}

// WriteToRequest writes these params to a swagger request
func (o *K8sDashboardAddViewonlyUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Payload != nil {
		if err := r.SetBodyParam(o.Payload); err != nil {
			return err
		}
	}

	// path param svcDomainId
	if err := r.SetPathParam("svcDomainId", o.SvcDomainID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
