// Code generated by go-swagger; DO NOT EDIT.

package m_l_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new m l model API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for m l model API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MLModelCreate creates a machine learning model

Creates a machine learning model.
*/
func (a *Client) MLModelCreate(params *MLModelCreateParams, authInfo runtime.ClientAuthInfoWriter) (*MLModelCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMLModelCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MLModelCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/mlmodels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MLModelCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MLModelCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MLModelCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MLModelDelete deletes a machine learning model by its ID

Deletes a machine learning model by its given ID.
*/
func (a *Client) MLModelDelete(params *MLModelDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*MLModelDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMLModelDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MLModelDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/mlmodels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MLModelDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MLModelDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MLModelDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MLModelGet gets machine learning model by its ID

Retrieves a machine learning model by its given ID.
*/
func (a *Client) MLModelGet(params *MLModelGetParams, authInfo runtime.ClientAuthInfoWriter) (*MLModelGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMLModelGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MLModelGet",
		Method:             "GET",
		PathPattern:        "/v1.0/mlmodels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MLModelGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MLModelGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MLModelGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MLModelList lists machine learning models

Retrieve all machine learning models.
*/
func (a *Client) MLModelList(params *MLModelListParams, authInfo runtime.ClientAuthInfoWriter) (*MLModelListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMLModelListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MLModelList",
		Method:             "GET",
		PathPattern:        "/v1.0/mlmodels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MLModelListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MLModelListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MLModelListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MLModelUpdate updates a machine learning model by its ID

Updates a machine learning model by its given ID.
*/
func (a *Client) MLModelUpdate(params *MLModelUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*MLModelUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMLModelUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MLModelUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/mlmodels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MLModelUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MLModelUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MLModelUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MLModelVersionCreate creates a new version of the machine learning model by its ID

Create a new version of the machine learning model by its given ID.
*/
func (a *Client) MLModelVersionCreate(params *MLModelVersionCreateParams, authInfo runtime.ClientAuthInfoWriter) (*MLModelVersionCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMLModelVersionCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MLModelVersionCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/mlmodels/{id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MLModelVersionCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MLModelVersionCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MLModelVersionCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MLModelVersionDelete deletes the version of the machine learning model by its ID

Deletes the version of the machine learning model by machine learning model ID.
*/
func (a *Client) MLModelVersionDelete(params *MLModelVersionDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*MLModelVersionDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMLModelVersionDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MLModelVersionDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/mlmodels/{id}/versions/{model_version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MLModelVersionDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MLModelVersionDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MLModelVersionDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MLModelVersionURLGet gets a pre signed URL for the machine learning model according to its ID and version

Retrieves a pre-signed URL for the machine learning model according to its ID and version.
*/
func (a *Client) MLModelVersionURLGet(params *MLModelVersionURLGetParams, authInfo runtime.ClientAuthInfoWriter) (*MLModelVersionURLGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMLModelVersionURLGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MLModelVersionURLGet",
		Method:             "GET",
		PathPattern:        "/v1.0/mlmodels/{id}/versions/{model_version}/url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MLModelVersionURLGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MLModelVersionURLGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MLModelVersionURLGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MLModelVersionUpdate updates the version of the machine learning model by its ID

Updates the version of the machine learning model by machine learning model ID.
*/
func (a *Client) MLModelVersionUpdate(params *MLModelVersionUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*MLModelVersionUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMLModelVersionUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MLModelVersionUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/mlmodels/{id}/versions/{model_version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MLModelVersionUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MLModelVersionUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MLModelVersionUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetMLModels lists project machine learning models by project ID

Retrieves all machine learning models for a project by its given ID.
*/
func (a *Client) ProjectGetMLModels(params *ProjectGetMLModelsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetMLModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetMLModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetMLModels",
		Method:             "GET",
		PathPattern:        "/v1.0/projects/{projectId}/mlmodels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetMLModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetMLModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetMLModelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
