// Code generated by go-swagger; DO NOT EDIT.

package m_l_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewMLModelVersionURLGetParams creates a new MLModelVersionURLGetParams object
// with the default values initialized.
func NewMLModelVersionURLGetParams() *MLModelVersionURLGetParams {
	var ()
	return &MLModelVersionURLGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMLModelVersionURLGetParamsWithTimeout creates a new MLModelVersionURLGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMLModelVersionURLGetParamsWithTimeout(timeout time.Duration) *MLModelVersionURLGetParams {
	var ()
	return &MLModelVersionURLGetParams{

		timeout: timeout,
	}
}

// NewMLModelVersionURLGetParamsWithContext creates a new MLModelVersionURLGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewMLModelVersionURLGetParamsWithContext(ctx context.Context) *MLModelVersionURLGetParams {
	var ()
	return &MLModelVersionURLGetParams{

		Context: ctx,
	}
}

// NewMLModelVersionURLGetParamsWithHTTPClient creates a new MLModelVersionURLGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMLModelVersionURLGetParamsWithHTTPClient(client *http.Client) *MLModelVersionURLGetParams {
	var ()
	return &MLModelVersionURLGetParams{
		HTTPClient: client,
	}
}

/*MLModelVersionURLGetParams contains all the parameters to send to the API endpoint
for the m l model version URL get operation typically these are written to a http.Request
*/
type MLModelVersionURLGetParams struct {

	/*Authorization
	  Format: Bearer <token>, with <token> from the login API response.

	*/
	Authorization string
	/*ExpirationDuration
	  Model URL expiration duration in minutes.

	*/
	ExpirationDuration *int64
	/*ID
	  ID of the entity

	*/
	ID string
	/*ModelVersion
	  Model version, a positive integer.

	*/
	ModelVersion int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the m l model version URL get params
func (o *MLModelVersionURLGetParams) WithTimeout(timeout time.Duration) *MLModelVersionURLGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the m l model version URL get params
func (o *MLModelVersionURLGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the m l model version URL get params
func (o *MLModelVersionURLGetParams) WithContext(ctx context.Context) *MLModelVersionURLGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the m l model version URL get params
func (o *MLModelVersionURLGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the m l model version URL get params
func (o *MLModelVersionURLGetParams) WithHTTPClient(client *http.Client) *MLModelVersionURLGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the m l model version URL get params
func (o *MLModelVersionURLGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the m l model version URL get params
func (o *MLModelVersionURLGetParams) WithAuthorization(authorization string) *MLModelVersionURLGetParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the m l model version URL get params
func (o *MLModelVersionURLGetParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithExpirationDuration adds the expirationDuration to the m l model version URL get params
func (o *MLModelVersionURLGetParams) WithExpirationDuration(expirationDuration *int64) *MLModelVersionURLGetParams {
	o.SetExpirationDuration(expirationDuration)
	return o
}

// SetExpirationDuration adds the expirationDuration to the m l model version URL get params
func (o *MLModelVersionURLGetParams) SetExpirationDuration(expirationDuration *int64) {
	o.ExpirationDuration = expirationDuration
}

// WithID adds the id to the m l model version URL get params
func (o *MLModelVersionURLGetParams) WithID(id string) *MLModelVersionURLGetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the m l model version URL get params
func (o *MLModelVersionURLGetParams) SetID(id string) {
	o.ID = id
}

// WithModelVersion adds the modelVersion to the m l model version URL get params
func (o *MLModelVersionURLGetParams) WithModelVersion(modelVersion int64) *MLModelVersionURLGetParams {
	o.SetModelVersion(modelVersion)
	return o
}

// SetModelVersion adds the modelVersion to the m l model version URL get params
func (o *MLModelVersionURLGetParams) SetModelVersion(modelVersion int64) {
	o.ModelVersion = modelVersion
}

// WriteToRequest writes these params to a swagger request
func (o *MLModelVersionURLGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.ExpirationDuration != nil {

		// query param expiration_duration
		var qrExpirationDuration int64
		if o.ExpirationDuration != nil {
			qrExpirationDuration = *o.ExpirationDuration
		}
		qExpirationDuration := swag.FormatInt64(qrExpirationDuration)
		if qExpirationDuration != "" {
			if err := r.SetQueryParam("expiration_duration", qExpirationDuration); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param model_version
	if err := r.SetPathParam("model_version", swag.FormatInt64(o.ModelVersion)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
