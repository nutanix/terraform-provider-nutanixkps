// Code generated by go-swagger; DO NOT EDIT.

package helm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new helm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for helm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
HelmApplicationCreate creates helm application

Create a Helm Chart based Application.
*/
func (a *Client) HelmApplicationCreate(params *HelmApplicationCreateParams, authInfo runtime.ClientAuthInfoWriter) (*HelmApplicationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmApplicationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HelmApplicationCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/helm/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HelmApplicationCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmApplicationCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HelmApplicationCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HelmApplicationUpdate updates helm application

Update a Helm Chart based Application.
*/
func (a *Client) HelmApplicationUpdate(params *HelmApplicationUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*HelmApplicationUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmApplicationUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HelmApplicationUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/helm/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HelmApplicationUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmApplicationUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HelmApplicationUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HelmTemplate runs helm template

Run Helm Template to render Helm Chart.
*/
func (a *Client) HelmTemplate(params *HelmTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*HelmTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HelmTemplate",
		Method:             "POST",
		PathPattern:        "/v1.0/helm/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HelmTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HelmTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
