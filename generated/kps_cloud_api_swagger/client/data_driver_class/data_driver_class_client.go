// Code generated by go-swagger; DO NOT EDIT.

package data_driver_class

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new data driver class API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data driver class API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DataDriverClassCreate creates a data driver class ntnx ignore

Create a data driver class.
*/
func (a *Client) DataDriverClassCreate(params *DataDriverClassCreateParams, authInfo runtime.ClientAuthInfoWriter) (*DataDriverClassCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataDriverClassCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataDriverClassCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/datadriverclasses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataDriverClassCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataDriverClassCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataDriverClassCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataDriverClassDelete deletes a specific data driver class ntnx ignore

Delete a data driver with a given ID {id}.
*/
func (a *Client) DataDriverClassDelete(params *DataDriverClassDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*DataDriverClassDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataDriverClassDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataDriverClassDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/datadriverclasses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataDriverClassDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataDriverClassDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataDriverClassDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataDriverClassGet gets a data driver class by ID ntnx ignore

Get a data driver class according to its given ID {id}.
*/
func (a *Client) DataDriverClassGet(params *DataDriverClassGetParams, authInfo runtime.ClientAuthInfoWriter) (*DataDriverClassGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataDriverClassGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataDriverClassGet",
		Method:             "GET",
		PathPattern:        "/v1.0/datadriverclasses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataDriverClassGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataDriverClassGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataDriverClassGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataDriverClassList gets all data driver class ntnx ignore

Retrieves a list of all data driver classes.
*/
func (a *Client) DataDriverClassList(params *DataDriverClassListParams, authInfo runtime.ClientAuthInfoWriter) (*DataDriverClassListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataDriverClassListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataDriverClassList",
		Method:             "GET",
		PathPattern:        "/v1.0/datadriverclasses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataDriverClassListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataDriverClassListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataDriverClassListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataDriverClassUpdate updates a data driver class ntnx ignore

Update a data driver class.
*/
func (a *Client) DataDriverClassUpdate(params *DataDriverClassUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*DataDriverClassUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataDriverClassUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataDriverClassUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/datadriverclasses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataDriverClassUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataDriverClassUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataDriverClassUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
