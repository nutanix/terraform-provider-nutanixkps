// Code generated by go-swagger; DO NOT EDIT.

package application_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new application status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ApplicationStatusCreateV2 creates application status ntnx ignore

Creates an application status.
*/
func (a *Client) ApplicationStatusCreateV2(params *ApplicationStatusCreateV2Params, authInfo runtime.ClientAuthInfoWriter) (*ApplicationStatusCreateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationStatusCreateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationStatusCreateV2",
		Method:             "POST",
		PathPattern:        "/v1.0/applicationstatuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationStatusCreateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationStatusCreateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationStatusCreateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationStatusDeleteV2 deletes an application by application ID ntnx ignore

Deletes the application with the given ID {id}.
*/
func (a *Client) ApplicationStatusDeleteV2(params *ApplicationStatusDeleteV2Params, authInfo runtime.ClientAuthInfoWriter) (*ApplicationStatusDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationStatusDeleteV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationStatusDeleteV2",
		Method:             "DELETE",
		PathPattern:        "/v1.0/applicationstatuses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationStatusDeleteV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationStatusDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationStatusDeleteV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationStatusGetV2 gets application status by application ID

Retrieve status for an application with the given ID {id}.
*/
func (a *Client) ApplicationStatusGetV2(params *ApplicationStatusGetV2Params, authInfo runtime.ClientAuthInfoWriter) (*ApplicationStatusGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationStatusGetV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationStatusGetV2",
		Method:             "GET",
		PathPattern:        "/v1.0/applicationstatuses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationStatusGetV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationStatusGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationStatusGetV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationStatusListV2 gets status for all applications

Retrieves status for all applications.
*/
func (a *Client) ApplicationStatusListV2(params *ApplicationStatusListV2Params, authInfo runtime.ClientAuthInfoWriter) (*ApplicationStatusListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationStatusListV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationStatusListV2",
		Method:             "GET",
		PathPattern:        "/v1.0/applicationstatuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationStatusListV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationStatusListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationStatusListV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
