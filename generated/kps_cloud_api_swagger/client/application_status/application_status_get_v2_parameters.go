// Code generated by go-swagger; DO NOT EDIT.

package application_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewApplicationStatusGetV2Params creates a new ApplicationStatusGetV2Params object
// with the default values initialized.
func NewApplicationStatusGetV2Params() *ApplicationStatusGetV2Params {
	var ()
	return &ApplicationStatusGetV2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewApplicationStatusGetV2ParamsWithTimeout creates a new ApplicationStatusGetV2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewApplicationStatusGetV2ParamsWithTimeout(timeout time.Duration) *ApplicationStatusGetV2Params {
	var ()
	return &ApplicationStatusGetV2Params{

		timeout: timeout,
	}
}

// NewApplicationStatusGetV2ParamsWithContext creates a new ApplicationStatusGetV2Params object
// with the default values initialized, and the ability to set a context for a request
func NewApplicationStatusGetV2ParamsWithContext(ctx context.Context) *ApplicationStatusGetV2Params {
	var ()
	return &ApplicationStatusGetV2Params{

		Context: ctx,
	}
}

// NewApplicationStatusGetV2ParamsWithHTTPClient creates a new ApplicationStatusGetV2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewApplicationStatusGetV2ParamsWithHTTPClient(client *http.Client) *ApplicationStatusGetV2Params {
	var ()
	return &ApplicationStatusGetV2Params{
		HTTPClient: client,
	}
}

/*ApplicationStatusGetV2Params contains all the parameters to send to the API endpoint
for the application status get v2 operation typically these are written to a http.Request
*/
type ApplicationStatusGetV2Params struct {

	/*Authorization
	  Format: Bearer <token>, with <token> from login API response.

	*/
	Authorization string
	/*ID
	  ID of the entity

	*/
	ID string
	/*PageIndex
	  0-based index of the page to fetch results.

	*/
	PageIndex *int64
	/*PageSize
	  Item count of each page.

	*/
	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the application status get v2 params
func (o *ApplicationStatusGetV2Params) WithTimeout(timeout time.Duration) *ApplicationStatusGetV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the application status get v2 params
func (o *ApplicationStatusGetV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the application status get v2 params
func (o *ApplicationStatusGetV2Params) WithContext(ctx context.Context) *ApplicationStatusGetV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the application status get v2 params
func (o *ApplicationStatusGetV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the application status get v2 params
func (o *ApplicationStatusGetV2Params) WithHTTPClient(client *http.Client) *ApplicationStatusGetV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the application status get v2 params
func (o *ApplicationStatusGetV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the application status get v2 params
func (o *ApplicationStatusGetV2Params) WithAuthorization(authorization string) *ApplicationStatusGetV2Params {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the application status get v2 params
func (o *ApplicationStatusGetV2Params) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithID adds the id to the application status get v2 params
func (o *ApplicationStatusGetV2Params) WithID(id string) *ApplicationStatusGetV2Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the application status get v2 params
func (o *ApplicationStatusGetV2Params) SetID(id string) {
	o.ID = id
}

// WithPageIndex adds the pageIndex to the application status get v2 params
func (o *ApplicationStatusGetV2Params) WithPageIndex(pageIndex *int64) *ApplicationStatusGetV2Params {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the application status get v2 params
func (o *ApplicationStatusGetV2Params) SetPageIndex(pageIndex *int64) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the application status get v2 params
func (o *ApplicationStatusGetV2Params) WithPageSize(pageSize *int64) *ApplicationStatusGetV2Params {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the application status get v2 params
func (o *ApplicationStatusGetV2Params) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *ApplicationStatusGetV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.PageIndex != nil {

		// query param pageIndex
		var qrPageIndex int64
		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatInt64(qrPageIndex)
		if qPageIndex != "" {
			if err := r.SetQueryParam("pageIndex", qPageIndex); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
