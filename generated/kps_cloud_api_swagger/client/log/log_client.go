// Code generated by go-swagger; DO NOT EDIT.

package log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new log API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for log API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ApplicationLogEntriesGetV2 lists applications log entries specific to an application

Retrieve application log entries specific to an application.
Use filter on edge ID and batch ID to get the application log specific to an edge and a batch.
*/
func (a *Client) ApplicationLogEntriesGetV2(params *ApplicationLogEntriesGetV2Params, authInfo runtime.ClientAuthInfoWriter) (*ApplicationLogEntriesGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationLogEntriesGetV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationLogEntriesGetV2",
		Method:             "GET",
		PathPattern:        "/v1.0/logs/applications/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationLogEntriesGetV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationLogEntriesGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationLogEntriesGetV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationLogEntriesListV2 lists application log entries

Retrieve all the application log entries.
Use filter on edge ID and batch ID to get the application log specific to an edge and a batch.
*/
func (a *Client) ApplicationLogEntriesListV2(params *ApplicationLogEntriesListV2Params, authInfo runtime.ClientAuthInfoWriter) (*ApplicationLogEntriesListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationLogEntriesListV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationLogEntriesListV2",
		Method:             "GET",
		PathPattern:        "/v1.0/logs/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationLogEntriesListV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationLogEntriesListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationLogEntriesListV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeLogEntriesGetV2 lists infrastructure log entries for an edge

Retrieve infrastructure log entries specific to an edge.
Use filter on batch ID to get logs entries specific to a batch.
*/
func (a *Client) EdgeLogEntriesGetV2(params *EdgeLogEntriesGetV2Params, authInfo runtime.ClientAuthInfoWriter) (*EdgeLogEntriesGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeLogEntriesGetV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeLogEntriesGetV2",
		Method:             "GET",
		PathPattern:        "/v1.0/logs/edges/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeLogEntriesGetV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeLogEntriesGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeLogEntriesGetV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeLogEntriesListV2 lists infrastructure log entries for edges

Retrieve all infrastructure log entries.
*/
func (a *Client) EdgeLogEntriesListV2(params *EdgeLogEntriesListV2Params, authInfo runtime.ClientAuthInfoWriter) (*EdgeLogEntriesListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeLogEntriesListV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeLogEntriesListV2",
		Method:             "GET",
		PathPattern:        "/v1.0/logs/edges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeLogEntriesListV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeLogEntriesListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeLogEntriesListV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogEntriesListV2 lists log entries

Retrieve all log entries.
*/
func (a *Client) LogEntriesListV2(params *LogEntriesListV2Params, authInfo runtime.ClientAuthInfoWriter) (*LogEntriesListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogEntriesListV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogEntriesListV2",
		Method:             "GET",
		PathPattern:        "/v1.0/logs/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogEntriesListV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogEntriesListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogEntriesListV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogEntryDeleteV2 deletes log entry by ID

Deletes the log entry with the given id.
*/
func (a *Client) LogEntryDeleteV2(params *LogEntryDeleteV2Params, authInfo runtime.ClientAuthInfoWriter) (*LogEntryDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogEntryDeleteV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogEntryDeleteV2",
		Method:             "DELETE",
		PathPattern:        "/v1.0/logs/entries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogEntryDeleteV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogEntryDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogEntryDeleteV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogRequestDownloadV2 requests log download

Generates the log download URL.
*/
func (a *Client) LogRequestDownloadV2(params *LogRequestDownloadV2Params, authInfo runtime.ClientAuthInfoWriter) (*LogRequestDownloadV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogRequestDownloadV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogRequestDownloadV2",
		Method:             "POST",
		PathPattern:        "/v1.0/logs/requestdownload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogRequestDownloadV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogRequestDownloadV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogRequestDownloadV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogRequestUploadV2 requests log upload

Request edges to upload logs to cloud storage.
*/
func (a *Client) LogRequestUploadV2(params *LogRequestUploadV2Params, authInfo runtime.ClientAuthInfoWriter) (*LogRequestUploadV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogRequestUploadV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogRequestUploadV2",
		Method:             "POST",
		PathPattern:        "/v1.0/logs/requestupload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogRequestUploadV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogRequestUploadV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogRequestUploadV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogStreamEndpoints gets the endpoints to stream logs for a given container from an edge

Get the endpoints to stream logs for a given container from an edge.
*/
func (a *Client) LogStreamEndpoints(params *LogStreamEndpointsParams, authInfo runtime.ClientAuthInfoWriter) (*LogStreamEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogStreamEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogStreamEndpoints",
		Method:             "POST",
		PathPattern:        "/v1.0/logs/stream/endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogStreamEndpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogStreamEndpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogStreamEndpointsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogUploadCompleteV2 reports log upload complete ntnx ignore

Log upload complete as reported by an edge.
*/
func (a *Client) LogUploadCompleteV2(params *LogUploadCompleteV2Params, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogUploadCompleteV2Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogUploadCompleteV2",
		Method:             "POST",
		PathPattern:        "/v1.0/logs/uploadcomplete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogUploadCompleteV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
