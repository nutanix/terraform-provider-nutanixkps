// Code generated by go-swagger; DO NOT EDIT.

package kiali

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "sherlock-terraform-provider-nutanixkps/generated/kps_cloud_api_swagger/models"
)

// DeleteThreeScaleServiceReader is a Reader for the DeleteThreeScaleService structure.
type DeleteThreeScaleServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteThreeScaleServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteThreeScaleServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteThreeScaleServiceBadRequest creates a DeleteThreeScaleServiceBadRequest with default headers values
func NewDeleteThreeScaleServiceBadRequest() *DeleteThreeScaleServiceBadRequest {
	return &DeleteThreeScaleServiceBadRequest{}
}

/*DeleteThreeScaleServiceBadRequest handles this case with default header values.

generic API error response
*/
type DeleteThreeScaleServiceBadRequest struct {
	Payload *models.APIErrorPayload
}

func (o *DeleteThreeScaleServiceBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1.0/kiali/threescale/namespaces/{namespace}/services/{service}][%d] deleteThreeScaleServiceBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteThreeScaleServiceBadRequest) GetPayload() *models.APIErrorPayload {
	return o.Payload
}

func (o *DeleteThreeScaleServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
