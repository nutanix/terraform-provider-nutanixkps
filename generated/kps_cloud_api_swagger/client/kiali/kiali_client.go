// Code generated by go-swagger; DO NOT EDIT.

package kiali

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new kiali API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for kiali API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AppDashboard Endpoint to fetch dashboard to be displayed, related to a single app
*/
func (a *Client) AppDashboard(params *AppDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*AppDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "appDashboard",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/apps/{app}/dashboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppDetails Endpoint to get the app details
*/
func (a *Client) AppDetails(params *AppDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*AppDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "appDetails",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/apps/{app}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppHealth Get health associated to the given app
*/
func (a *Client) AppHealth(params *AppHealthParams, authInfo runtime.ClientAuthInfoWriter) (*AppHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "appHealth",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/apps/{app}/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppHealthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppList Endpoint to get the list of apps for a namespace
*/
func (a *Client) AppList(params *AppListParams, authInfo runtime.ClientAuthInfoWriter) (*AppListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "appList",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppMetrics Endpoint to fetch metrics to be displayed, related to a single app
*/
func (a *Client) AppMetrics(params *AppMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*AppMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "appMetrics",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/apps/{app}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppMetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppOverview ntnxes ignore

Endpoint to get the overview info of a given application
*/
func (a *Client) AppOverview(params *AppOverviewParams, authInfo runtime.ClientAuthInfoWriter) (*AppOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppOverviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "appOverview",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/apps/{app}/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppOverviewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomDashboard ntnxes ignore

Endpoint to fetch a custom dashboard
*/
func (a *Client) CustomDashboard(params *CustomDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*CustomDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customDashboard",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/customdashboard/{dashboard}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CustomDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteIter8Experiments ntnxes ignore

Endpoint to delete   iter8 experiments
*/
func (a *Client) DeleteIter8Experiments(params *DeleteIter8ExperimentsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIter8ExperimentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIter8ExperimentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIter8Experiments",
		Method:             "DELETE",
		PathPattern:        "/v1.0/kiali/iter8/experiments/namespaces/{namespace}/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIter8ExperimentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIter8ExperimentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIter8ExperimentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteThreeScaleHandler ntnxes ignore

Endpoint to delete an existing threescale handler+instance generated by Kiali
*/
func (a *Client) DeleteThreeScaleHandler(params *DeleteThreeScaleHandlerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteThreeScaleHandlerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteThreeScaleHandlerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteThreeScaleHandler",
		Method:             "DELETE",
		PathPattern:        "/v1.0/kiali/threescale/handlers/{threescaleHandlerName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteThreeScaleHandlerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteThreeScaleHandlerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteThreeScaleHandlerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteThreeScaleService ntnxes ignore

Endpoint to delete an existing threescale rule for a given service
*/
func (a *Client) DeleteThreeScaleService(params *DeleteThreeScaleServiceParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteThreeScaleServiceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteThreeScaleService",
		Method:             "DELETE",
		PathPattern:        "/v1.0/kiali/threescale/namespaces/{namespace}/services/{service}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteThreeScaleServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
ErrorTraces Endpoint to get the number of traces in error for a given service
*/
func (a *Client) ErrorTraces(params *ErrorTracesParams, authInfo runtime.ClientAuthInfoWriter) (*ErrorTracesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorTracesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "errorTraces",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/services/{service}/errortraces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ErrorTracesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ErrorTracesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ErrorTracesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetConfig Endpoint to get the config of Kiali
*/
func (a *Client) GetConfig(params *GetConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfig",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIter8 ntnxes ignore

Endpoint to check if threescale adapter is present in the cluster and if user can write adapter config
*/
func (a *Client) GetIter8(params *GetIter8Params, authInfo runtime.ClientAuthInfoWriter) (*GetIter8OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIter8Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIter8",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/iter8",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIter8Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIter8OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIter8Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIter8Experiments ntnxes ignore

Endpoint to fetch iter8 experiments by namespace and name.
*/
func (a *Client) GetIter8Experiments(params *GetIter8ExperimentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIter8ExperimentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIter8ExperimentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIter8Experiments",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/iter8/namespaces/{namespace}/experiments/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIter8ExperimentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIter8ExperimentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIter8ExperimentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIter8Metrics ntnxes ignore

Endpoint to get the analytics metrics
*/
func (a *Client) GetIter8Metrics(params *GetIter8MetricsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIter8MetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIter8MetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIter8Metrics",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/iter8/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIter8MetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIter8MetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIter8MetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPermissions ntnxes ignore

Endpoint to get the caller permissions on new Istio Config objects
*/
func (a *Client) GetPermissions(params *GetPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissions",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/istio/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPermissionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStatus Endpoint to get the status of Kiali
*/
func (a *Client) GetStatus(params *GetStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStatus",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetThreeScaleHandlers ntnxes ignore

Endpoint to fetch threescale handlers generated from Kiali
*/
func (a *Client) GetThreeScaleHandlers(params *GetThreeScaleHandlersParams, authInfo runtime.ClientAuthInfoWriter) (*GetThreeScaleHandlersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThreeScaleHandlersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getThreeScaleHandlers",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/threescale/handlers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetThreeScaleHandlersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetThreeScaleHandlersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetThreeScaleHandlersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetThreeScaleInfo ntnxes ignore

Endpoint to check if threescale adapter is present in the cluster and if user can write adapter config
*/
func (a *Client) GetThreeScaleInfo(params *GetThreeScaleInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetThreeScaleInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThreeScaleInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getThreeScaleInfo",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/threescale",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetThreeScaleInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetThreeScaleInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetThreeScaleInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetThreeScaleService ntnxes ignore

Endpoint to get an existing threescale rule for a given service
*/
func (a *Client) GetThreeScaleService(params *GetThreeScaleServiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetThreeScaleServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThreeScaleServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getThreeScaleService",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/threescale/namespaces/{namespace}/services/{service}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetThreeScaleServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetThreeScaleServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetThreeScaleServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GrafanaInfo ntnxes ignore

Get the grafana URL and other descriptors
*/
func (a *Client) GrafanaInfo(params *GrafanaInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GrafanaInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGrafanaInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "grafanaInfo",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/grafana",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GrafanaInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GrafanaInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GrafanaInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GraphApp The backing JSON for an app node detail graph. (supported graphTypes: app | versionedApp)
*/
func (a *Client) GraphApp(params *GraphAppParams, authInfo runtime.ClientAuthInfoWriter) (*GraphAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGraphAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "graphApp",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/applications/{app}/graph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GraphAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GraphAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GraphAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GraphAppVersion The backing JSON for a versioned app node detail graph. (supported graphTypes: app | versionedApp)
*/
func (a *Client) GraphAppVersion(params *GraphAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GraphAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGraphAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "graphAppVersion",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/applications/{app}/versions/{version}/graph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GraphAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GraphAppVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GraphAppVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GraphNamespaces thes backing JSON for a namespaces graph
*/
func (a *Client) GraphNamespaces(params *GraphNamespacesParams, authInfo runtime.ClientAuthInfoWriter) (*GraphNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGraphNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "graphNamespaces",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/graph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GraphNamespacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GraphNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GraphNamespacesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GraphService thes backing JSON for a service node detail graph
*/
func (a *Client) GraphService(params *GraphServiceParams, authInfo runtime.ClientAuthInfoWriter) (*GraphServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGraphServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "graphService",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/services/{service}/graph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GraphServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GraphServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GraphServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GraphWorkload thes backing JSON for a workload node detail graph
*/
func (a *Client) GraphWorkload(params *GraphWorkloadParams, authInfo runtime.ClientAuthInfoWriter) (*GraphWorkloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGraphWorkloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "graphWorkload",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}/graph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GraphWorkloadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GraphWorkloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GraphWorkloadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IstioConfigCreate ntnxes ignore

Endpoint to create an Istio object by using an Istio Config item
*/
func (a *Client) IstioConfigCreate(params *IstioConfigCreateParams, authInfo runtime.ClientAuthInfoWriter) (*IstioConfigCreateOK, *IstioConfigCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIstioConfigCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "istioConfigCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/istio/{object_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IstioConfigCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *IstioConfigCreateOK:
		return value, nil, nil
	case *IstioConfigCreateCreated:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IstioConfigCreateDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IstioConfigDelete ntnxes ignore

Endpoint to delete the Istio Config of an (arbitrary) Istio object
*/
func (a *Client) IstioConfigDelete(params *IstioConfigDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIstioConfigDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "istioConfigDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/istio/{object_type}/{object}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IstioConfigDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
IstioConfigDetails ntnxes ignore

Endpoint to get the Istio Config of an Istio object
*/
func (a *Client) IstioConfigDetails(params *IstioConfigDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*IstioConfigDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIstioConfigDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "istioConfigDetails",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/istio/{object_type}/{object}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IstioConfigDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IstioConfigDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IstioConfigDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IstioConfigList Endpoint to get the list of Istio Config of a namespace
*/
func (a *Client) IstioConfigList(params *IstioConfigListParams, authInfo runtime.ClientAuthInfoWriter) (*IstioConfigListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIstioConfigListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "istioConfigList",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/istio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IstioConfigListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IstioConfigListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IstioConfigListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IstioConfigUpdate ntnxes ignore

Endpoint to update the Istio Config of an Istio object used for templates and adapters using Json Merge Patch strategy
*/
func (a *Client) IstioConfigUpdate(params *IstioConfigUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*IstioConfigUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIstioConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "istioConfigUpdate",
		Method:             "PATCH",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/istio/{object_type}/{object}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IstioConfigUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IstioConfigUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IstioConfigUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IstioStatus Get the status of each components needed in the control plane
*/
func (a *Client) IstioStatus(params *IstioStatusParams, authInfo runtime.ClientAuthInfoWriter) (*IstioStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIstioStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "istioStatus",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/istio/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IstioStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IstioStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IstioStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Iter8Experiments ntnxes ignore

Endpoint to fetch iter8 experiments for all namespaces user have access.
User can define a comman separated list of namespaces.
*/
func (a *Client) Iter8Experiments(params *Iter8ExperimentsParams, authInfo runtime.ClientAuthInfoWriter) (*Iter8ExperimentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIter8ExperimentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "iter8Experiments",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/iter8/experiments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Iter8ExperimentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Iter8ExperimentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*Iter8ExperimentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
JaegerInfo ntnxes ignore

Get the jaeger URL and other descriptors
*/
func (a *Client) JaegerInfo(params *JaegerInfoParams, authInfo runtime.ClientAuthInfoWriter) (*JaegerInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJaegerInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jaegerInfo",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/jaeger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JaegerInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JaegerInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*JaegerInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MeshTLS ntnxes ignore

Get TLS status for the whole mesh
*/
func (a *Client) MeshTLS(params *MeshTLSParams, authInfo runtime.ClientAuthInfoWriter) (*MeshTLSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMeshTLSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "meshTls",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/mesh/tls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &MeshTLSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MeshTLSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MeshTLSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceHealth Get health for all objects in the given namespace
*/
func (a *Client) NamespaceHealth(params *NamespaceHealthParams, authInfo runtime.ClientAuthInfoWriter) (*NamespaceHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "namespaceHealth",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceHealthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceList Endpoint to get the list of the available namespaces
*/
func (a *Client) NamespaceList(params *NamespaceListParams, authInfo runtime.ClientAuthInfoWriter) (*NamespaceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "namespaceList",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceMetrics Endpoint to fetch metrics to be displayed, related to a namespace
*/
func (a *Client) NamespaceMetrics(params *NamespaceMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*NamespaceMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "namespaceMetrics",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceMetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceOverview ntnxes ignore

Endpoint to get the overview info of a given namespace
*/
func (a *Client) NamespaceOverview(params *NamespaceOverviewParams, authInfo runtime.ClientAuthInfoWriter) (*NamespaceOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceOverviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "namespaceOverview",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceOverviewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceTLS Get TLS status for the given namespace
*/
func (a *Client) NamespaceTLS(params *NamespaceTLSParams, authInfo runtime.ClientAuthInfoWriter) (*NamespaceTLSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceTLSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "namespaceTls",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/tls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceTLSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceTLSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceTLSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceValidations Get validation summary for all objects in the given namespace
*/
func (a *Client) NamespaceValidations(params *NamespaceValidationsParams, authInfo runtime.ClientAuthInfoWriter) (*NamespaceValidationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceValidationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "namespaceValidations",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceValidationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceValidationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceValidationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchIter8Experiments ntnxes ignore

Endpoint to update new iter8 experiment (for abort purpose)
*/
func (a *Client) PatchIter8Experiments(params *PatchIter8ExperimentsParams, authInfo runtime.ClientAuthInfoWriter) (*PatchIter8ExperimentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchIter8ExperimentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchIter8Experiments",
		Method:             "PATCH",
		PathPattern:        "/v1.0/kiali/iter8/experiments/{namespace}/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchIter8ExperimentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchIter8ExperimentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchIter8ExperimentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchThreeScaleHandler ntnxes ignore

Endpoint to update an existing threescale handler generated by Kiali
*/
func (a *Client) PatchThreeScaleHandler(params *PatchThreeScaleHandlerParams, authInfo runtime.ClientAuthInfoWriter) (*PatchThreeScaleHandlerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchThreeScaleHandlerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchThreeScaleHandler",
		Method:             "PATCH",
		PathPattern:        "/v1.0/kiali/threescale/handlers/{threescaleHandlerName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchThreeScaleHandlerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchThreeScaleHandlerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchThreeScaleHandlerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchThreeScaleService ntnxes ignore

Endpoint to update an existing threescale rule for a given service
*/
func (a *Client) PatchThreeScaleService(params *PatchThreeScaleServiceParams, authInfo runtime.ClientAuthInfoWriter) (*PatchThreeScaleServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchThreeScaleServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchThreeScaleService",
		Method:             "PATCH",
		PathPattern:        "/v1.0/kiali/threescale/namespaces/{namespace}/services/{service}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchThreeScaleServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchThreeScaleServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchThreeScaleServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PodDetails Endpoint to get pod details
*/
func (a *Client) PodDetails(params *PodDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*PodDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "podDetails",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/pods/{pod}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PodDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PodLogs Endpoint to get pod logs
*/
func (a *Client) PodLogs(params *PodLogsParams, authInfo runtime.ClientAuthInfoWriter) (*PodLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "podLogs",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/pods/{pod}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PodLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostIter8Experiments ntnxes ignore

Endpoint to create new iter8 experiments for a given namespace.
*/
func (a *Client) PostIter8Experiments(params *PostIter8ExperimentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostIter8ExperimentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIter8ExperimentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIter8Experiments",
		Method:             "POST",
		PathPattern:        "/v1.0/kiali/iter8/namespaces/{namespace}/experiments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIter8ExperimentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIter8ExperimentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIter8ExperimentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostThreeScaleHandlers ntnxes ignore

Endpoint to create a new threescale handler+instance generated by Kiali
*/
func (a *Client) PostThreeScaleHandlers(params *PostThreeScaleHandlersParams, authInfo runtime.ClientAuthInfoWriter) (*PostThreeScaleHandlersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostThreeScaleHandlersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postThreeScaleHandlers",
		Method:             "POST",
		PathPattern:        "/v1.0/kiali/threescale/handlers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostThreeScaleHandlersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostThreeScaleHandlersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostThreeScaleHandlersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostThreeScaleService ntnxes ignore

Endpoint to create a new threescale rule for a given service
*/
func (a *Client) PostThreeScaleService(params *PostThreeScaleServiceParams, authInfo runtime.ClientAuthInfoWriter) (*PostThreeScaleServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostThreeScaleServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postThreeScaleService",
		Method:             "POST",
		PathPattern:        "/v1.0/kiali/threescale/namespaces/{namespace}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostThreeScaleServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostThreeScaleServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostThreeScaleServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Root Endpoint to get the status of Kiali
*/
func (a *Client) Root(params *RootParams, authInfo runtime.ClientAuthInfoWriter) (*RootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "root",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RootDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDashboard Endpoint to fetch dashboard to be displayed, related to a single service
*/
func (a *Client) ServiceDashboard(params *ServiceDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serviceDashboard",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/services/{service}/dashboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDetails Endpoint to get the details of a given service
*/
func (a *Client) ServiceDetails(params *ServiceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serviceDetails",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/services/{service}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceHealth Get health associated to the given service
*/
func (a *Client) ServiceHealth(params *ServiceHealthParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serviceHealth",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/services/{service}/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceHealthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceList Endpoint to get the details of a given service
*/
func (a *Client) ServiceList(params *ServiceListParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serviceList",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceMetrics Endpoint to fetch metrics to be displayed, related to a single service
*/
func (a *Client) ServiceMetrics(params *ServiceMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serviceMetrics",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/services/{service}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceMetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceOverview ntnxes ignore

Endpoint to get the overview info of a given service
*/
func (a *Client) ServiceOverview(params *ServiceOverviewParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceOverviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serviceOverview",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/services/{service}/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceOverviewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SpansList Endpoint to get Jaeger spans for a given service
*/
func (a *Client) SpansList(params *SpansListParams, authInfo runtime.ClientAuthInfoWriter) (*SpansListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpansListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "spansList",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/services/{service}/spans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SpansListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpansListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SpansListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TracesDetail Endpoint to get a specific trace of a given service
*/
func (a *Client) TracesDetail(params *TracesDetailParams, authInfo runtime.ClientAuthInfoWriter) (*TracesDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTracesDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tracesDetail",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/services/{service}/traces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TracesDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TracesDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TracesDetailDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkloadDashboard Endpoint to fetch dashboard to be displayed, related to a single workload
*/
func (a *Client) WorkloadDashboard(params *WorkloadDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*WorkloadDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkloadDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workloadDashboard",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}/dashboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkloadDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkloadDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkloadDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkloadDetails Endpoint to get the workload details
*/
func (a *Client) WorkloadDetails(params *WorkloadDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*WorkloadDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkloadDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workloadDetails",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkloadDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkloadDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkloadDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkloadHealth Get health associated to the given workload
*/
func (a *Client) WorkloadHealth(params *WorkloadHealthParams, authInfo runtime.ClientAuthInfoWriter) (*WorkloadHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkloadHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workloadHealth",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkloadHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkloadHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkloadHealthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkloadList Endpoint to get the list of workloads for a namespace
*/
func (a *Client) WorkloadList(params *WorkloadListParams, authInfo runtime.ClientAuthInfoWriter) (*WorkloadListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkloadListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workloadList",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/workloads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkloadListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkloadListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkloadListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkloadMetrics Endpoint to fetch metrics to be displayed, related to a single workload
*/
func (a *Client) WorkloadMetrics(params *WorkloadMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*WorkloadMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkloadMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workloadMetrics",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkloadMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkloadMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkloadMetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkloadOverview ntnxes ignore

Endpoint to get the overview info of a given workload
*/
func (a *Client) WorkloadOverview(params *WorkloadOverviewParams, authInfo runtime.ClientAuthInfoWriter) (*WorkloadOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkloadOverviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workloadOverview",
		Method:             "GET",
		PathPattern:        "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkloadOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkloadOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkloadOverviewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
