// Code generated by go-swagger; DO NOT EDIT.

package tenant_props

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tenant props API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tenant props API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
TenantPropsDeleteV2 deletes tenant properties by tenant ID ntnx ignore

Deletes properties for the tenant with the given ID.
*/
func (a *Client) TenantPropsDeleteV2(params *TenantPropsDeleteV2Params, authInfo runtime.ClientAuthInfoWriter) (*TenantPropsDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenantPropsDeleteV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TenantPropsDeleteV2",
		Method:             "DELETE",
		PathPattern:        "/v1.0/tenantprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenantPropsDeleteV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TenantPropsDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TenantPropsDeleteV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TenantPropsGetV2 gets tenant properties by tenant ID ntnx ignore

Retrieves properties for the tenant with the given ID.
*/
func (a *Client) TenantPropsGetV2(params *TenantPropsGetV2Params, authInfo runtime.ClientAuthInfoWriter) (*TenantPropsGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenantPropsGetV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TenantPropsGetV2",
		Method:             "GET",
		PathPattern:        "/v1.0/tenantprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenantPropsGetV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TenantPropsGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TenantPropsGetV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TenantPropsUpdateV2 updates tenant properties by tenant ID ntnx ignore

Updates properties for the tenant with the given ID.
*/
func (a *Client) TenantPropsUpdateV2(params *TenantPropsUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*TenantPropsUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenantPropsUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TenantPropsUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1.0/tenantprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenantPropsUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TenantPropsUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TenantPropsUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
