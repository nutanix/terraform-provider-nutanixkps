// Code generated by go-swagger; DO NOT EDIT.

package software_update

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "sherlock-terraform-provider-nutanixkps/generated/kps_cloud_api_swagger/models"
)

// SoftwareReleaseListReader is a Reader for the SoftwareReleaseList structure.
type SoftwareReleaseListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SoftwareReleaseListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSoftwareReleaseListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSoftwareReleaseListDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSoftwareReleaseListOK creates a SoftwareReleaseListOK with default headers values
func NewSoftwareReleaseListOK() *SoftwareReleaseListOK {
	return &SoftwareReleaseListOK{}
}

/*SoftwareReleaseListOK handles this case with default header values.

Ok
*/
type SoftwareReleaseListOK struct {
	Payload *models.SoftwareReleaseListPayload
}

func (o *SoftwareReleaseListOK) Error() string {
	return fmt.Sprintf("[GET /v1.0/softwareupdates/releases][%d] softwareReleaseListOK  %+v", 200, o.Payload)
}

func (o *SoftwareReleaseListOK) GetPayload() *models.SoftwareReleaseListPayload {
	return o.Payload
}

func (o *SoftwareReleaseListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SoftwareReleaseListPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSoftwareReleaseListDefault creates a SoftwareReleaseListDefault with default headers values
func NewSoftwareReleaseListDefault(code int) *SoftwareReleaseListDefault {
	return &SoftwareReleaseListDefault{
		_statusCode: code,
	}
}

/*SoftwareReleaseListDefault handles this case with default header values.

generic API error response
*/
type SoftwareReleaseListDefault struct {
	_statusCode int

	Payload *models.APIErrorPayload
}

// Code gets the status code for the software release list default response
func (o *SoftwareReleaseListDefault) Code() int {
	return o._statusCode
}

func (o *SoftwareReleaseListDefault) Error() string {
	return fmt.Sprintf("[GET /v1.0/softwareupdates/releases][%d] SoftwareReleaseList default  %+v", o._statusCode, o.Payload)
}

func (o *SoftwareReleaseListDefault) GetPayload() *models.APIErrorPayload {
	return o.Payload
}

func (o *SoftwareReleaseListDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
