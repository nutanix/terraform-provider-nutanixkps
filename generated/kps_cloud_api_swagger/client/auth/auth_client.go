// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new auth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
LoginCallV2 lets the user log in

Lets the user log in.
*/
func (a *Client) LoginCallV2(params *LoginCallV2Params) (*LoginCallV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginCallV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoginCallV2",
		Method:             "POST",
		PathPattern:        "/v1.0/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginCallV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginCallV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoginCallV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LoginTokenV1 gets a login token

Generates a login token equivalent to logging in.
*/
func (a *Client) LoginTokenV1(params *LoginTokenV1Params, authInfo runtime.ClientAuthInfoWriter) (*LoginTokenV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginTokenV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoginTokenV1",
		Method:             "POST",
		PathPattern:        "/v1.0/login/logintoken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginTokenV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginTokenV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoginTokenV1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OAuthAuthorizeCallV2 logins through my nutanix ntnx ignore

This will redirect the user to the oauth login page.
Note: UI only API
*/
func (a *Client) OAuthAuthorizeCallV2(params *OAuthAuthorizeCallV2Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOAuthAuthorizeCallV2Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OAuthAuthorizeCallV2",
		Method:             "GET",
		PathPattern:        "/v1.0/oauth2/authorize",
		ProducesMediaTypes: []string{"application/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OAuthAuthorizeCallV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
OAuthTokenCallV2 refreshes token via my nutanix ntnx ignore

This will get the session token from the auth token.
Note: UI only API
*/
func (a *Client) OAuthTokenCallV2(params *OAuthTokenCallV2Params) (*OAuthTokenCallV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOAuthTokenCallV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OAuthTokenCallV2",
		Method:             "POST",
		PathPattern:        "/v1.0/oauth2/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OAuthTokenCallV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OAuthTokenCallV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OAuthTokenCallV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ShortLoginTokenV1 generates a short login token

Generates a temporary login token valid for a short duration.
*/
func (a *Client) ShortLoginTokenV1(params *ShortLoginTokenV1Params, authInfo runtime.ClientAuthInfoWriter) (*ShortLoginTokenV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShortLoginTokenV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShortLoginTokenV1",
		Method:             "POST",
		PathPattern:        "/v1.0/login/shortlogintoken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShortLoginTokenV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShortLoginTokenV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ShortLoginTokenV1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
