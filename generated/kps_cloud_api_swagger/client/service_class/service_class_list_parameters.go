// Code generated by go-swagger; DO NOT EDIT.

package service_class

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewServiceClassListParams creates a new ServiceClassListParams object
// with the default values initialized.
func NewServiceClassListParams() *ServiceClassListParams {
	var ()
	return &ServiceClassListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewServiceClassListParamsWithTimeout creates a new ServiceClassListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewServiceClassListParamsWithTimeout(timeout time.Duration) *ServiceClassListParams {
	var ()
	return &ServiceClassListParams{

		timeout: timeout,
	}
}

// NewServiceClassListParamsWithContext creates a new ServiceClassListParams object
// with the default values initialized, and the ability to set a context for a request
func NewServiceClassListParamsWithContext(ctx context.Context) *ServiceClassListParams {
	var ()
	return &ServiceClassListParams{

		Context: ctx,
	}
}

// NewServiceClassListParamsWithHTTPClient creates a new ServiceClassListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewServiceClassListParamsWithHTTPClient(client *http.Client) *ServiceClassListParams {
	var ()
	return &ServiceClassListParams{
		HTTPClient: client,
	}
}

/*ServiceClassListParams contains all the parameters to send to the API endpoint
for the service class list operation typically these are written to a http.Request
*/
type ServiceClassListParams struct {

	/*Authorization
	  Format: Bearer <token>, with <token> from login API response.

	*/
	Authorization string
	/*Filter
	  Specify result filter. Format is similar to a SQL WHERE clause. For example,
	to filter object by name with prefix foo, use: name LIKE 'foo%'.
	Supported filter keys are the same as order by keys.

	*/
	Filter *string
	/*OrderBy
	  Specify result order. Zero or more entries with format: &ltkey> [desc]
	where orderByKeys lists allowed keys in each response.

	*/
	OrderBy []string
	/*PageIndex
	  0-based index of the page to fetch results.

	*/
	PageIndex *int64
	/*PageSize
	  Item count of each page.

	*/
	PageSize *int64
	/*Scope
	  Scope of the Service Class

	*/
	Scope *string
	/*SvcVersion
	  Version of the Service Class

	*/
	SvcVersion *string
	/*Tags
	  Tags on the Service Class

	*/
	Tags []string
	/*Type
	  Type of the Service Class

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the service class list params
func (o *ServiceClassListParams) WithTimeout(timeout time.Duration) *ServiceClassListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the service class list params
func (o *ServiceClassListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the service class list params
func (o *ServiceClassListParams) WithContext(ctx context.Context) *ServiceClassListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the service class list params
func (o *ServiceClassListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the service class list params
func (o *ServiceClassListParams) WithHTTPClient(client *http.Client) *ServiceClassListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the service class list params
func (o *ServiceClassListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the service class list params
func (o *ServiceClassListParams) WithAuthorization(authorization string) *ServiceClassListParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the service class list params
func (o *ServiceClassListParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithFilter adds the filter to the service class list params
func (o *ServiceClassListParams) WithFilter(filter *string) *ServiceClassListParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the service class list params
func (o *ServiceClassListParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithOrderBy adds the orderBy to the service class list params
func (o *ServiceClassListParams) WithOrderBy(orderBy []string) *ServiceClassListParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the service class list params
func (o *ServiceClassListParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPageIndex adds the pageIndex to the service class list params
func (o *ServiceClassListParams) WithPageIndex(pageIndex *int64) *ServiceClassListParams {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the service class list params
func (o *ServiceClassListParams) SetPageIndex(pageIndex *int64) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the service class list params
func (o *ServiceClassListParams) WithPageSize(pageSize *int64) *ServiceClassListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the service class list params
func (o *ServiceClassListParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithScope adds the scope to the service class list params
func (o *ServiceClassListParams) WithScope(scope *string) *ServiceClassListParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the service class list params
func (o *ServiceClassListParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithSvcVersion adds the svcVersion to the service class list params
func (o *ServiceClassListParams) WithSvcVersion(svcVersion *string) *ServiceClassListParams {
	o.SetSvcVersion(svcVersion)
	return o
}

// SetSvcVersion adds the svcVersion to the service class list params
func (o *ServiceClassListParams) SetSvcVersion(svcVersion *string) {
	o.SvcVersion = svcVersion
}

// WithTags adds the tags to the service class list params
func (o *ServiceClassListParams) WithTags(tags []string) *ServiceClassListParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the service class list params
func (o *ServiceClassListParams) SetTags(tags []string) {
	o.Tags = tags
}

// WithType adds the typeVar to the service class list params
func (o *ServiceClassListParams) WithType(typeVar *string) *ServiceClassListParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the service class list params
func (o *ServiceClassListParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ServiceClassListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	valuesOrderBy := o.OrderBy

	joinedOrderBy := swag.JoinByFormat(valuesOrderBy, "")
	// query array param orderBy
	if err := r.SetQueryParam("orderBy", joinedOrderBy...); err != nil {
		return err
	}

	if o.PageIndex != nil {

		// query param pageIndex
		var qrPageIndex int64
		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatInt64(qrPageIndex)
		if qPageIndex != "" {
			if err := r.SetQueryParam("pageIndex", qPageIndex); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if o.SvcVersion != nil {

		// query param svcVersion
		var qrSvcVersion string
		if o.SvcVersion != nil {
			qrSvcVersion = *o.SvcVersion
		}
		qSvcVersion := qrSvcVersion
		if qSvcVersion != "" {
			if err := r.SetQueryParam("svcVersion", qSvcVersion); err != nil {
				return err
			}
		}

	}

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
