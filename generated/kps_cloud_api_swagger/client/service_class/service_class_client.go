// Code generated by go-swagger; DO NOT EDIT.

package service_class

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service class API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service class API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ServiceClassCreate creates a service class ntnx ignore

Create a Service Class
*/
func (a *Client) ServiceClassCreate(params *ServiceClassCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceClassCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceClassCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceClassCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/serviceclasses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceClassCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceClassCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceClassCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceClassDelete deletes a service class ntnx ignore

Delete a Service Class
*/
func (a *Client) ServiceClassDelete(params *ServiceClassDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceClassDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceClassDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceClassDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/serviceclasses/{svcClassId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceClassDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceClassDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceClassDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceClassGet gets a service class

Get a Service Class
*/
func (a *Client) ServiceClassGet(params *ServiceClassGetParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceClassGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceClassGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceClassGet",
		Method:             "GET",
		PathPattern:        "/v1.0/serviceclasses/{svcClassId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceClassGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceClassGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceClassGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceClassList lists service classes

List Service Classes
*/
func (a *Client) ServiceClassList(params *ServiceClassListParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceClassListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceClassListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceClassList",
		Method:             "GET",
		PathPattern:        "/v1.0/serviceclasses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceClassListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceClassListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceClassListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceClassUpdate updates a service class ntnx ignore

Update a Service Class
*/
func (a *Client) ServiceClassUpdate(params *ServiceClassUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceClassUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceClassUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceClassUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/serviceclasses/{svcClassId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceClassUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceClassUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceClassUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
