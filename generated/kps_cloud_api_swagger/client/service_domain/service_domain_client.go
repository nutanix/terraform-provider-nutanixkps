// Code generated by go-swagger; DO NOT EDIT.

package service_domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service domain API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service domain API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProjectGetServiceDomains gets all service domains associated with a project by project ID

Retrieves all service domains for a project by project ID {projectId}.
*/
func (a *Client) ProjectGetServiceDomains(params *ProjectGetServiceDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetServiceDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetServiceDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetServiceDomains",
		Method:             "GET",
		PathPattern:        "/v1.0/projects/{projectId}/servicedomains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetServiceDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetServiceDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetServiceDomainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainCreate creates service domain

Create a service domain.
*/
func (a *Client) ServiceDomainCreate(params *ServiceDomainCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/servicedomains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainDelete deletes a service domain as specified by its ID

Deletes the service domain with the given ID  {svcDomainId}.
*/
func (a *Client) ServiceDomainDelete(params *ServiceDomainDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/servicedomains/{svcDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainGet gets a service domain by its ID

Retrieves the service domain with the given ID {svcDomainId}.
*/
func (a *Client) ServiceDomainGet(params *ServiceDomainGetParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainGet",
		Method:             "GET",
		PathPattern:        "/v1.0/servicedomains/{svcDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainGetEffectiveProfile gets a service domain effective profile by ID

Retrieves the service domain effective profile with the given ID {svcDomainId}.
*/
func (a *Client) ServiceDomainGetEffectiveProfile(params *ServiceDomainGetEffectiveProfileParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainGetEffectiveProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainGetEffectiveProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainGetEffectiveProfile",
		Method:             "GET",
		PathPattern:        "/v1.0/servicedomains/{svcDomainId}/effectiveprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainGetEffectiveProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainGetEffectiveProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainGetEffectiveProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainGetHandle gets service domain certificate ntnx ignore

Retrieves the certificate and private key for the service domain by its given ID {svcDomainId}.
*/
func (a *Client) ServiceDomainGetHandle(params *ServiceDomainGetHandleParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainGetHandleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainGetHandleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainGetHandle",
		Method:             "POST",
		PathPattern:        "/v1.0/servicedomainhandle/{svcDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainGetHandleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainGetHandleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainGetHandleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainGetNodes retrieves all nodes for a service domain by service domain ID svc domain Id
*/
func (a *Client) ServiceDomainGetNodes(params *ServiceDomainGetNodesParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainGetNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainGetNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainGetNodes",
		Method:             "GET",
		PathPattern:        "/v1.0/servicedomains/{svcDomainId}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainGetNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainGetNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainGetNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainGetNodesInfo gets nodes info for a service domain by service domain ID

Retrieves all nodes info for a service domain by service domain ID {svcDomainId}.
*/
func (a *Client) ServiceDomainGetNodesInfo(params *ServiceDomainGetNodesInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainGetNodesInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainGetNodesInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainGetNodesInfo",
		Method:             "GET",
		PathPattern:        "/v1.0/servicedomains/{svcDomainId}/nodesinfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainGetNodesInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainGetNodesInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainGetNodesInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainList gets service domains

Retrieves all service domains associated with your account.
*/
func (a *Client) ServiceDomainList(params *ServiceDomainListParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainList",
		Method:             "GET",
		PathPattern:        "/v1.0/servicedomains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainSetCertLock sets service domain certificate lock ntnx ignore

Set service domain certificate lock.
*/
func (a *Client) ServiceDomainSetCertLock(params *ServiceDomainSetCertLockParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainSetCertLockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainSetCertLockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainSetCertLock",
		Method:             "POST",
		PathPattern:        "/v1.0/servicedomainsetcertlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainSetCertLockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainSetCertLockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainSetCertLockDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainUpdate updates a service domain by its ID

Updates a service domain by its ID {svcDomainId}.
*/
func (a *Client) ServiceDomainUpdate(params *ServiceDomainUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/servicedomains/{svcDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
