// Code generated by go-swagger; DO NOT EDIT.

package http_service_proxy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new http service proxy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for http service proxy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
HTTPServiceProxyCreate creates a HTTP service proxy

Create a HTTP service proxy.
*/
func (a *Client) HTTPServiceProxyCreate(params *HTTPServiceProxyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*HTTPServiceProxyCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPServiceProxyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HTTPServiceProxyCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/httpserviceproxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPServiceProxyCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HTTPServiceProxyCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HTTPServiceProxyCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HTTPServiceProxyDelete deletes HTTP service proxy

Delete the HTTP service proxy with the given ID {id}.
*/
func (a *Client) HTTPServiceProxyDelete(params *HTTPServiceProxyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*HTTPServiceProxyDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPServiceProxyDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HTTPServiceProxyDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/httpserviceproxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPServiceProxyDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HTTPServiceProxyDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HTTPServiceProxyDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HTTPServiceProxyGet gets a HTTP service proxy by its ID

Retrieves a HTTP service proxy with the given ID {id}.
*/
func (a *Client) HTTPServiceProxyGet(params *HTTPServiceProxyGetParams, authInfo runtime.ClientAuthInfoWriter) (*HTTPServiceProxyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPServiceProxyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HTTPServiceProxyGet",
		Method:             "GET",
		PathPattern:        "/v1.0/httpserviceproxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPServiceProxyGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HTTPServiceProxyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HTTPServiceProxyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HTTPServiceProxyList gets all HTTP service proxies

Retrieves a list of all HTTP service proxies.
*/
func (a *Client) HTTPServiceProxyList(params *HTTPServiceProxyListParams, authInfo runtime.ClientAuthInfoWriter) (*HTTPServiceProxyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPServiceProxyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HTTPServiceProxyList",
		Method:             "GET",
		PathPattern:        "/v1.0/httpserviceproxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPServiceProxyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HTTPServiceProxyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HTTPServiceProxyListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HTTPServiceProxyUpdate updates a HTTP service proxy by its ID

Update a HTTP service proxy with the given ID {id}.
*/
func (a *Client) HTTPServiceProxyUpdate(params *HTTPServiceProxyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*HTTPServiceProxyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPServiceProxyUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HTTPServiceProxyUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/httpserviceproxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPServiceProxyUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HTTPServiceProxyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HTTPServiceProxyUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
