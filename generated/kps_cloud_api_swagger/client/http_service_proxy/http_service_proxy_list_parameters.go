// Code generated by go-swagger; DO NOT EDIT.

package http_service_proxy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewHTTPServiceProxyListParams creates a new HTTPServiceProxyListParams object
// with the default values initialized.
func NewHTTPServiceProxyListParams() *HTTPServiceProxyListParams {
	var ()
	return &HTTPServiceProxyListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHTTPServiceProxyListParamsWithTimeout creates a new HTTPServiceProxyListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHTTPServiceProxyListParamsWithTimeout(timeout time.Duration) *HTTPServiceProxyListParams {
	var ()
	return &HTTPServiceProxyListParams{

		timeout: timeout,
	}
}

// NewHTTPServiceProxyListParamsWithContext creates a new HTTPServiceProxyListParams object
// with the default values initialized, and the ability to set a context for a request
func NewHTTPServiceProxyListParamsWithContext(ctx context.Context) *HTTPServiceProxyListParams {
	var ()
	return &HTTPServiceProxyListParams{

		Context: ctx,
	}
}

// NewHTTPServiceProxyListParamsWithHTTPClient creates a new HTTPServiceProxyListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHTTPServiceProxyListParamsWithHTTPClient(client *http.Client) *HTTPServiceProxyListParams {
	var ()
	return &HTTPServiceProxyListParams{
		HTTPClient: client,
	}
}

/*HTTPServiceProxyListParams contains all the parameters to send to the API endpoint
for the HTTP service proxy list operation typically these are written to a http.Request
*/
type HTTPServiceProxyListParams struct {

	/*Authorization
	  Format: Bearer <token>, with <token> from login API response.

	*/
	Authorization string
	/*Filter
	  Specify result filter. Format is similar to a SQL WHERE clause. For example,
	to filter object by name with prefix foo, use: name LIKE 'foo%'.
	Supported filter keys are the same as order by keys.

	*/
	Filter *string
	/*Name
	  Name of the HTTP Service Proxy

	*/
	Name *string
	/*OrderBy
	  Specify result order. Zero or more entries with format: &ltkey> [desc]
	where orderByKeys lists allowed keys in each response.

	*/
	OrderBy []string
	/*PageIndex
	  0-based index of the page to fetch results.

	*/
	PageIndex *int64
	/*PageSize
	  Item count of each page.

	*/
	PageSize *int64
	/*ProjectID
	  HTTP Service Proxy Project ID

	*/
	ProjectID *string
	/*ServiceName
	  ServiceName of the HTTP Service Proxy

	*/
	ServiceName *string
	/*ServiceNamespace
	  ServiceNamespace of the HTTP Service Proxy

	*/
	ServiceNamespace *string
	/*SvcDomainID
	  HTTP Service Proxy Service Domain ID

	*/
	SvcDomainID *string
	/*Type
	  Type of the HTTP Service Proxy

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithTimeout(timeout time.Duration) *HTTPServiceProxyListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithContext(ctx context.Context) *HTTPServiceProxyListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithHTTPClient(client *http.Client) *HTTPServiceProxyListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithAuthorization(authorization string) *HTTPServiceProxyListParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithFilter adds the filter to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithFilter(filter *string) *HTTPServiceProxyListParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithName adds the name to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithName(name *string) *HTTPServiceProxyListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetName(name *string) {
	o.Name = name
}

// WithOrderBy adds the orderBy to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithOrderBy(orderBy []string) *HTTPServiceProxyListParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPageIndex adds the pageIndex to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithPageIndex(pageIndex *int64) *HTTPServiceProxyListParams {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetPageIndex(pageIndex *int64) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithPageSize(pageSize *int64) *HTTPServiceProxyListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithProjectID adds the projectID to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithProjectID(projectID *string) *HTTPServiceProxyListParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithServiceName adds the serviceName to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithServiceName(serviceName *string) *HTTPServiceProxyListParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetServiceName(serviceName *string) {
	o.ServiceName = serviceName
}

// WithServiceNamespace adds the serviceNamespace to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithServiceNamespace(serviceNamespace *string) *HTTPServiceProxyListParams {
	o.SetServiceNamespace(serviceNamespace)
	return o
}

// SetServiceNamespace adds the serviceNamespace to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetServiceNamespace(serviceNamespace *string) {
	o.ServiceNamespace = serviceNamespace
}

// WithSvcDomainID adds the svcDomainID to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithSvcDomainID(svcDomainID *string) *HTTPServiceProxyListParams {
	o.SetSvcDomainID(svcDomainID)
	return o
}

// SetSvcDomainID adds the svcDomainId to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetSvcDomainID(svcDomainID *string) {
	o.SvcDomainID = svcDomainID
}

// WithType adds the typeVar to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) WithType(typeVar *string) *HTTPServiceProxyListParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the HTTP service proxy list params
func (o *HTTPServiceProxyListParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *HTTPServiceProxyListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	valuesOrderBy := o.OrderBy

	joinedOrderBy := swag.JoinByFormat(valuesOrderBy, "")
	// query array param orderBy
	if err := r.SetQueryParam("orderBy", joinedOrderBy...); err != nil {
		return err
	}

	if o.PageIndex != nil {

		// query param pageIndex
		var qrPageIndex int64
		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatInt64(qrPageIndex)
		if qPageIndex != "" {
			if err := r.SetQueryParam("pageIndex", qPageIndex); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.ServiceName != nil {

		// query param serviceName
		var qrServiceName string
		if o.ServiceName != nil {
			qrServiceName = *o.ServiceName
		}
		qServiceName := qrServiceName
		if qServiceName != "" {
			if err := r.SetQueryParam("serviceName", qServiceName); err != nil {
				return err
			}
		}

	}

	if o.ServiceNamespace != nil {

		// query param serviceNamespace
		var qrServiceNamespace string
		if o.ServiceNamespace != nil {
			qrServiceNamespace = *o.ServiceNamespace
		}
		qServiceNamespace := qrServiceNamespace
		if qServiceNamespace != "" {
			if err := r.SetQueryParam("serviceNamespace", qServiceNamespace); err != nil {
				return err
			}
		}

	}

	if o.SvcDomainID != nil {

		// query param svcDomainId
		var qrSvcDomainID string
		if o.SvcDomainID != nil {
			qrSvcDomainID = *o.SvcDomainID
		}
		qSvcDomainID := qrSvcDomainID
		if qSvcDomainID != "" {
			if err := r.SetQueryParam("svcDomainId", qSvcDomainID); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
