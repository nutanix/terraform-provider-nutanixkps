// Code generated by go-swagger; DO NOT EDIT.

package cloud_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cloud profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CloudProfileCreate creates a cloud profile

Create a cloud service profile.
*/
func (a *Client) CloudProfileCreate(params *CloudProfileCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CloudProfileCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudProfileCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudProfileCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/cloudprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudProfileCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudProfileCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudProfileCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloudProfileDelete deletes a cloud profile by its ID

Delete a cloud service profile with the given ID {id}
*/
func (a *Client) CloudProfileDelete(params *CloudProfileDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CloudProfileDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudProfileDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudProfileDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/cloudprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudProfileDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudProfileDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudProfileDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloudProfileGet gets a cloud profile according to profile ID

Retrieves a cloud service profile with a given ID {id}
*/
func (a *Client) CloudProfileGet(params *CloudProfileGetParams, authInfo runtime.ClientAuthInfoWriter) (*CloudProfileGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudProfileGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudProfileGet",
		Method:             "GET",
		PathPattern:        "/v1.0/cloudprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudProfileGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudProfileGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudProfileGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloudProfileList gets all cloud service profiles

Retrieves all cloud service provider profiles.
*/
func (a *Client) CloudProfileList(params *CloudProfileListParams, authInfo runtime.ClientAuthInfoWriter) (*CloudProfileListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudProfileListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudProfileList",
		Method:             "GET",
		PathPattern:        "/v1.0/cloudprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudProfileListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudProfileListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudProfileListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloudProfileUpdate updates a cloud profile by its ID

Update an existing cloud profile with a given ID {id}
*/
func (a *Client) CloudProfileUpdate(params *CloudProfileUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CloudProfileUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudProfileUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudProfileUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/cloudprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudProfileUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudProfileUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudProfileUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetCloudProfiles gets cloud profiles according to project ID

Retrieves all cloud service profiles for a project with a given ID {projectId}
*/
func (a *Client) ProjectGetCloudProfiles(params *ProjectGetCloudProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetCloudProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetCloudProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetCloudProfiles",
		Method:             "GET",
		PathPattern:        "/v1.0/projects/{projectId}/cloudprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetCloudProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetCloudProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetCloudProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
