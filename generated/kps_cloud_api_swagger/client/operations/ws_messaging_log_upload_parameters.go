// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "sherlock-terraform-provider-nutanixkps/generated/kps_cloud_api_swagger/models"
)

// NewWsMessagingLogUploadParams creates a new WsMessagingLogUploadParams object
// with the default values initialized.
func NewWsMessagingLogUploadParams() *WsMessagingLogUploadParams {
	var ()
	return &WsMessagingLogUploadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWsMessagingLogUploadParamsWithTimeout creates a new WsMessagingLogUploadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWsMessagingLogUploadParamsWithTimeout(timeout time.Duration) *WsMessagingLogUploadParams {
	var ()
	return &WsMessagingLogUploadParams{

		timeout: timeout,
	}
}

// NewWsMessagingLogUploadParamsWithContext creates a new WsMessagingLogUploadParams object
// with the default values initialized, and the ability to set a context for a request
func NewWsMessagingLogUploadParamsWithContext(ctx context.Context) *WsMessagingLogUploadParams {
	var ()
	return &WsMessagingLogUploadParams{

		Context: ctx,
	}
}

// NewWsMessagingLogUploadParamsWithHTTPClient creates a new WsMessagingLogUploadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWsMessagingLogUploadParamsWithHTTPClient(client *http.Client) *WsMessagingLogUploadParams {
	var ()
	return &WsMessagingLogUploadParams{
		HTTPClient: client,
	}
}

/*WsMessagingLogUploadParams contains all the parameters to send to the API endpoint
for the ws messaging log upload operation typically these are written to a http.Request
*/
type WsMessagingLogUploadParams struct {

	/*Payload*/
	Payload *models.ObjectRequestLogUpload

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the ws messaging log upload params
func (o *WsMessagingLogUploadParams) WithTimeout(timeout time.Duration) *WsMessagingLogUploadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ws messaging log upload params
func (o *WsMessagingLogUploadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ws messaging log upload params
func (o *WsMessagingLogUploadParams) WithContext(ctx context.Context) *WsMessagingLogUploadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ws messaging log upload params
func (o *WsMessagingLogUploadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ws messaging log upload params
func (o *WsMessagingLogUploadParams) WithHTTPClient(client *http.Client) *WsMessagingLogUploadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ws messaging log upload params
func (o *WsMessagingLogUploadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPayload adds the payload to the ws messaging log upload params
func (o *WsMessagingLogUploadParams) WithPayload(payload *models.ObjectRequestLogUpload) *WsMessagingLogUploadParams {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the ws messaging log upload params
func (o *WsMessagingLogUploadParams) SetPayload(payload *models.ObjectRequestLogUpload) {
	o.Payload = payload
}

// WriteToRequest writes these params to a swagger request
func (o *WsMessagingLogUploadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Payload != nil {
		if err := r.SetBodyParam(o.Payload); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
