// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ApplicationCreate creates an application ntnx ignore

Create an application.
*/
func (a *Client) ApplicationCreate(params *ApplicationCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationCreate",
		Method:             "POST",
		PathPattern:        "/v1/application",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationDelete deletes application specified by the application ID ntnx ignore

Deletes the application with the given ID {id}.
*/
func (a *Client) ApplicationDelete(params *ApplicationDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/application/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationGet gets application by application ID ntnx ignore

Retrieves the application according to its ID.
*/
func (a *Client) ApplicationGet(params *ApplicationGetParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationGet",
		Method:             "GET",
		PathPattern:        "/v1/application/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationList gets all applications ntnx ignore

Retrieves a list of all applications.
*/
func (a *Client) ApplicationList(params *ApplicationListParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationList",
		Method:             "GET",
		PathPattern:        "/v1/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationStatusCreate creates application status ntnx ignore

Creates an application status.
*/
func (a *Client) ApplicationStatusCreate(params *ApplicationStatusCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationStatusCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationStatusCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationStatusCreate",
		Method:             "POST",
		PathPattern:        "/v1/applicationstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationStatusCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationStatusCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationStatusCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationStatusDelete deletes an application by application ID ntnx ignore

Deletes the application with the given ID {id}.
*/
func (a *Client) ApplicationStatusDelete(params *ApplicationStatusDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationStatusDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationStatusDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationStatusDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/applicationstatus/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationStatusDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationStatusDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationStatusDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationStatusGet gets application status by application ID ntnx ignore

Retrieve status for an application with the given ID {id}.
*/
func (a *Client) ApplicationStatusGet(params *ApplicationStatusGetParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationStatusGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationStatusGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationStatusGet",
		Method:             "GET",
		PathPattern:        "/v1/applicationstatus/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationStatusGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationStatusGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationStatusGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationStatusList gets applications status ntnx ignore

Retrieves status for all applications.
*/
func (a *Client) ApplicationStatusList(params *ApplicationStatusListParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationStatusListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationStatusListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationStatusList",
		Method:             "GET",
		PathPattern:        "/v1/applicationstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationStatusListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationStatusListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationStatusListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationUpdate updates an application ntnx ignore

Update an existing application.
*/
func (a *Client) ApplicationUpdate(params *ApplicationUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/application",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ApplicationUpdateV2 updates an application specified by its ID ntnx ignore

Update a specific application with ID {id}.
You cannot change the project associated with the application or the application ID.
You can change all other attributes.
*/
func (a *Client) ApplicationUpdateV2(params *ApplicationUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*ApplicationUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/application/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuditLogGet gets audit log by request ID pipe date ntnx ignore

Retrieves the audit log entries for the given request ID or date.
*/
func (a *Client) AuditLogGet(params *AuditLogGetParams, authInfo runtime.ClientAuthInfoWriter) (*AuditLogGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditLogGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuditLogGet",
		Method:             "GET",
		PathPattern:        "/v1/auditlogs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuditLogGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditLogGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuditLogGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuditLogList lists audit logs ntnx ignore

Retrieves all audit logs for a tenant.
*/
func (a *Client) AuditLogList(params *AuditLogListParams, authInfo runtime.ClientAuthInfoWriter) (*AuditLogListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditLogListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuditLogList",
		Method:             "GET",
		PathPattern:        "/v1/auditlogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuditLogListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditLogListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuditLogListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryCreate creates a category ntnx ignore

Create a category.
*/
func (a *Client) CategoryCreate(params *CategoryCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CategoryCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryCreate",
		Method:             "POST",
		PathPattern:        "/v1/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryDelete deletes a category by its ID ntnx ignore

Delete a category with the given ID {id}.
*/
func (a *Client) CategoryDelete(params *CategoryDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CategoryDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/categories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryGet gets a category by its ID ntnx ignore

Retrieves a category with the given ID {id}.
*/
func (a *Client) CategoryGet(params *CategoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*CategoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryGet",
		Method:             "GET",
		PathPattern:        "/v1/categories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryList gets all categories ntnx ignore

Retrieves a list of all categories.
*/
func (a *Client) CategoryList(params *CategoryListParams, authInfo runtime.ClientAuthInfoWriter) (*CategoryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryList",
		Method:             "GET",
		PathPattern:        "/v1/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryUpdate updates a category ntnx ignore

Update a category.
*/
func (a *Client) CategoryUpdate(params *CategoryUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CategoryUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryUpdateV2 updates category ntnx ignore

Update a category.
*/
func (a *Client) CategoryUpdateV2(params *CategoryUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*CategoryUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/categories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CertificatesCreate creates certificates ntnx ignore

Certificates for devices requiring them.
*/
func (a *Client) CertificatesCreate(params *CertificatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CertificatesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CertificatesCreate",
		Method:             "POST",
		PathPattern:        "/v1/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CertificatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificatesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CertificatesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloudCredsCreate creates a cloud profile ntnx ignore

Create a cloud service profile.
*/
func (a *Client) CloudCredsCreate(params *CloudCredsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CloudCredsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudCredsCreate",
		Method:             "POST",
		PathPattern:        "/v1/cloudcreds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudCredsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudCredsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloudCredsDelete deletes a cloud profile by its ID ntnx ignore

Delete a cloud service profile with the given ID {id}
*/
func (a *Client) CloudCredsDelete(params *CloudCredsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CloudCredsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudCredsDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/cloudcreds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudCredsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudCredsDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloudCredsGet gets a cloud profile according to profile ID ntnx ignore

Retrieves a cloud service profile with a given ID {id}
*/
func (a *Client) CloudCredsGet(params *CloudCredsGetParams, authInfo runtime.ClientAuthInfoWriter) (*CloudCredsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudCredsGet",
		Method:             "GET",
		PathPattern:        "/v1/cloudcreds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudCredsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudCredsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloudCredsList gets all cloud service profiles ntnx ignore

Retrieves all cloud service provider profiles.
*/
func (a *Client) CloudCredsList(params *CloudCredsListParams, authInfo runtime.ClientAuthInfoWriter) (*CloudCredsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudCredsList",
		Method:             "GET",
		PathPattern:        "/v1/cloudcreds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudCredsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudCredsListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloudCredsUpdate updates a cloud profile ntnx ignore

Update an existing cloud profile.
*/
func (a *Client) CloudCredsUpdate(params *CloudCredsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CloudCredsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudCredsUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/cloudcreds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudCredsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudCredsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloudCredsUpdateV2 updates a cloud profile by its ID ntnx ignore

Update an existing cloud profile with a given ID {id}
*/
func (a *Client) CloudCredsUpdateV2(params *CloudCredsUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*CloudCredsUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredsUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CloudCredsUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/cloudcreds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloudCredsUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredsUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudCredsUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CommonAggregates performs an aggregate query ntnx ignore

Performs and returns the results of the aggregate query.
*/
func (a *Client) CommonAggregates(params *CommonAggregatesParams, authInfo runtime.ClientAuthInfoWriter) (*CommonAggregatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommonAggregatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommonAggregates",
		Method:             "POST",
		PathPattern:        "/v1/common/aggregates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommonAggregatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommonAggregatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommonAggregatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CommonNestedAggregates performs a nested aggregate query ntnx ignore

Performs and returns the results of the nested aggregate query.
*/
func (a *Client) CommonNestedAggregates(params *CommonNestedAggregatesParams, authInfo runtime.ClientAuthInfoWriter) (*CommonNestedAggregatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommonNestedAggregatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommonNestedAggregates",
		Method:             "POST",
		PathPattern:        "/v1/common/nestedAggregates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommonNestedAggregatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommonNestedAggregatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommonNestedAggregatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContainerRegistryCreate creates a container registry profile ntnx ignore

Creates a container registry profile.
*/
func (a *Client) ContainerRegistryCreate(params *ContainerRegistryCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ContainerRegistryCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRegistryCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerRegistryCreate",
		Method:             "POST",
		PathPattern:        "/v1/containerregistries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerRegistryCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRegistryCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContainerRegistryCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContainerRegistryDelete deletes a container registry profile by profile ID ntnx ignore

Deletes a container registry profile with a given ID {id}.

This will delete the containerregistries with the given id.
*/
func (a *Client) ContainerRegistryDelete(params *ContainerRegistryDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ContainerRegistryDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRegistryDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerRegistryDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/containerregistries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerRegistryDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRegistryDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContainerRegistryDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContainerRegistryGet gets a container registry profile by profile ID ntnx ignore

Retrieves a container registry profile with a given ID {id}.
*/
func (a *Client) ContainerRegistryGet(params *ContainerRegistryGetParams, authInfo runtime.ClientAuthInfoWriter) (*ContainerRegistryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRegistryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerRegistryGet",
		Method:             "GET",
		PathPattern:        "/v1/containerregistries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerRegistryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRegistryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContainerRegistryGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContainerRegistryList gets container registry profiles ntnx ignore

Retrieves a list of all container registry profiles.
*/
func (a *Client) ContainerRegistryList(params *ContainerRegistryListParams, authInfo runtime.ClientAuthInfoWriter) (*ContainerRegistryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRegistryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerRegistryList",
		Method:             "GET",
		PathPattern:        "/v1/containerregistries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerRegistryListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRegistryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContainerRegistryListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContainerRegistryUpdate updates a container registry profile ntnx ignore

Updates a container registry profile.
*/
func (a *Client) ContainerRegistryUpdate(params *ContainerRegistryUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ContainerRegistryUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRegistryUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerRegistryUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/containerregistries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerRegistryUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRegistryUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContainerRegistryUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceCreate creates a data source ntnx ignore

Create a data source.
*/
func (a *Client) DataSourceCreate(params *DataSourceCreateParams, authInfo runtime.ClientAuthInfoWriter) (*DataSourceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceCreate",
		Method:             "POST",
		PathPattern:        "/v1/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceDelete deletes a specific data source ntnx ignore

Delete a data source with a given ID {id}.
*/
func (a *Client) DataSourceDelete(params *DataSourceDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*DataSourceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceGet gets the data source according to its ID ntnx ignore

Get the data source according to its given ID {id}.
*/
func (a *Client) DataSourceGet(params *DataSourceGetParams, authInfo runtime.ClientAuthInfoWriter) (*DataSourceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceGet",
		Method:             "GET",
		PathPattern:        "/v1/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceList gets all data sources ntnx ignore

Retrieves a list of all data sources.
*/
func (a *Client) DataSourceList(params *DataSourceListParams, authInfo runtime.ClientAuthInfoWriter) (*DataSourceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceList",
		Method:             "GET",
		PathPattern:        "/v1/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceUpdate updates a data source ntnx ignore

Update a data source. You cannot update or change the edge associated with the data source by using this call.
*/
func (a *Client) DataSourceUpdate(params *DataSourceUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*DataSourceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceUpdateV2 updates a data source ntnx ignore

Update a data source. You cannot update or change the edge associated with the data source by using this call.
*/
func (a *Client) DataSourceUpdateV2(params *DataSourceUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*DataSourceUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataStreamCreate creates a data pipeline ntnx ignore

Create a data pipeline.
*/
func (a *Client) DataStreamCreate(params *DataStreamCreateParams, authInfo runtime.ClientAuthInfoWriter) (*DataStreamCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataStreamCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataStreamCreate",
		Method:             "POST",
		PathPattern:        "/v1/datastreams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataStreamCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataStreamCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataStreamCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataStreamDelete deletes data pipeline ntnx ignore

This will delete the data pipeline with the given id.
*/
func (a *Client) DataStreamDelete(params *DataStreamDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*DataStreamDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataStreamDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataStreamDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/datastreams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataStreamDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataStreamDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataStreamDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataStreamGet gets data pipeline by its ID ntnx ignore

Retrieves a data pipelines with a given ID {id}.
*/
func (a *Client) DataStreamGet(params *DataStreamGetParams, authInfo runtime.ClientAuthInfoWriter) (*DataStreamGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataStreamGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataStreamGet",
		Method:             "GET",
		PathPattern:        "/v1/datastreams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataStreamGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataStreamGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataStreamGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataStreamList gets data pipelines ntnx ignore

Retrieves all data pipelines for a tenant.
*/
func (a *Client) DataStreamList(params *DataStreamListParams, authInfo runtime.ClientAuthInfoWriter) (*DataStreamListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataStreamListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataStreamList",
		Method:             "GET",
		PathPattern:        "/v1/datastreams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataStreamListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataStreamListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataStreamListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataStreamUpdate updates a data pipeline ntnx ignore

Update a data pipeline.
*/
func (a *Client) DataStreamUpdate(params *DataStreamUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*DataStreamUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataStreamUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataStreamUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/datastreams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataStreamUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataStreamUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataStreamUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataStreamUpdateV2 updates a data pipeline ntnx ignore

Update a data pipeline.
*/
func (a *Client) DataStreamUpdateV2(params *DataStreamUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*DataStreamUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataStreamUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataStreamUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/datastreams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataStreamUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataStreamUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataStreamUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DockerProfileCreate creates dockerprofiles ntnx ignore

Creates a dockerprofile.
*/
func (a *Client) DockerProfileCreate(params *DockerProfileCreateParams, authInfo runtime.ClientAuthInfoWriter) (*DockerProfileCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDockerProfileCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DockerProfileCreate",
		Method:             "POST",
		PathPattern:        "/v1/dockerprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DockerProfileCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DockerProfileCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DockerProfileCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DockerProfileDelete deletes dockerprofiles ntnx ignore

Deletes the dockerprofiles with the given ID {id}.
*/
func (a *Client) DockerProfileDelete(params *DockerProfileDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*DockerProfileDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDockerProfileDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DockerProfileDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/dockerprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DockerProfileDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DockerProfileDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DockerProfileDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DockerProfileGet gets dockerprofiles ntnx ignore

Retrieves dockerProfiles with the given ID {id}.
*/
func (a *Client) DockerProfileGet(params *DockerProfileGetParams, authInfo runtime.ClientAuthInfoWriter) (*DockerProfileGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDockerProfileGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DockerProfileGet",
		Method:             "GET",
		PathPattern:        "/v1/dockerprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DockerProfileGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DockerProfileGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DockerProfileGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DockerProfileList gets docker profiles ntnx ignore

Retrieves all DockerProfiles for a tenant.
*/
func (a *Client) DockerProfileList(params *DockerProfileListParams, authInfo runtime.ClientAuthInfoWriter) (*DockerProfileListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDockerProfileListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DockerProfileList",
		Method:             "GET",
		PathPattern:        "/v1/dockerprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DockerProfileListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DockerProfileListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DockerProfileListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DockerProfileUpdate updates dockerprofile ntnx ignore

Update a dockerprofiles.
*/
func (a *Client) DockerProfileUpdate(params *DockerProfileUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*DockerProfileUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDockerProfileUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DockerProfileUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/dockerprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DockerProfileUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DockerProfileUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DockerProfileUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DockerProfileUpdateV2 updates dockerprofiles ntnx ignore

Update a dockerprofiles by ID {id}.
*/
func (a *Client) DockerProfileUpdateV2(params *DockerProfileUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*DockerProfileUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDockerProfileUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DockerProfileUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/dockerprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DockerProfileUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DockerProfileUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DockerProfileUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeCreate creates edge ntnx ignore

Creates an edge.
*/
func (a *Client) EdgeCreate(params *EdgeCreateParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeCreate",
		Method:             "POST",
		PathPattern:        "/v1/edges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeDelete deletes edge by ID ntnx ignore

Deletes the edge with the given ID {edgeId}.
*/
func (a *Client) EdgeDelete(params *EdgeDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/edges/{edgeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeGet gets edge by ID ntnx ignore

Retrieves the edge with the given ID {edgeId}.
*/
func (a *Client) EdgeGet(params *EdgeGetParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeGet",
		Method:             "GET",
		PathPattern:        "/v1/edges/{edgeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeGetBySerialNumber gets edge by serial number ntnx ignore

Retrieves the edge according to the given serial number.
*/
func (a *Client) EdgeGetBySerialNumber(params *EdgeGetBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeGetBySerialNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeGetBySerialNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeGetBySerialNumber",
		Method:             "POST",
		PathPattern:        "/v1/edgebyserialnumber",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeGetBySerialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeGetBySerialNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeGetBySerialNumberDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeGetDatasources gets all data sources associated with an edge ntnx ignore

Retrieves a list of all data sources associated with with a edge by its ID {edgeId}.
*/
func (a *Client) EdgeGetDatasources(params *EdgeGetDatasourcesParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeGetDatasourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeGetDatasourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeGetDatasources",
		Method:             "GET",
		PathPattern:        "/v1/edges/{edgeId}/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeGetDatasourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeGetDatasourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeGetDatasourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeGetHandle gets edge certification ntnx ignore

Retrieves the certificate and private key for the edge by its given ID {edgeId}.
*/
func (a *Client) EdgeGetHandle(params *EdgeGetHandleParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeGetHandleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeGetHandleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeGetHandle",
		Method:             "POST",
		PathPattern:        "/v1/edgehandle/{edgeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeGetHandleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeGetHandleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeGetHandleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeGetSensors gets edge sensors by edge ID ntnx ignore

Retrieves all sensors for an edge by edge ID {edgeId}.
*/
func (a *Client) EdgeGetSensors(params *EdgeGetSensorsParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeGetSensorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeGetSensorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeGetSensors",
		Method:             "GET",
		PathPattern:        "/v1/edges/{edgeId}/sensors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeGetSensorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeGetSensorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeGetSensorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeGetUpgrades lists compatible edge software upgrades by edge ID ntnx ignore

Retrieves compatible software upgrades for the given edge ID.
*/
func (a *Client) EdgeGetUpgrades(params *EdgeGetUpgradesParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeGetUpgradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeGetUpgradesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeGetUpgrades",
		Method:             "GET",
		PathPattern:        "/v1/edges/{edgeId}/upgradecompatible",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeGetUpgradesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeGetUpgradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeGetUpgradesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeInfoGet gets all edge information by edge ID ntnx ignore

Retrieves all edge resource, build, and version details for a given edge ID.
*/
func (a *Client) EdgeInfoGet(params *EdgeInfoGetParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeInfoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeInfoGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeInfoGet",
		Method:             "GET",
		PathPattern:        "/v1/edges/{edgeId}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeInfoGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeInfoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeInfoGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeInfoList gets edge resource build and version details ntnx ignore

Retrieves all edge resource, build, and version details.
*/
func (a *Client) EdgeInfoList(params *EdgeInfoListParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeInfoListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeInfoListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeInfoList",
		Method:             "GET",
		PathPattern:        "/v1/edgesInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeInfoListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeInfoListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeInfoListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeInfoUpdate updates edge information by edge ID ntnx ignore

Update edge resource, build, and version details for a given edge ID.

Once installed, the Karbon Platform Services Service Domain software provides the service domain infrastructure.

Update resource, build, and version details for a given service domain by ID.
The ID is the service domain serial number used when you added the service domain.

This request also requires an Authorization header which specifies your API key.
*/
func (a *Client) EdgeInfoUpdate(params *EdgeInfoUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeInfoUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeInfoUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeInfoUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/edges/{id}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeInfoUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeInfoUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeInfoUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeList gets edges ntnx ignore

Retrieves all edges for a tenant.
*/
func (a *Client) EdgeList(params *EdgeListParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeList",
		Method:             "GET",
		PathPattern:        "/v1/edges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeUpdate updates an edge ntnx ignore

Updates an edge.
*/
func (a *Client) EdgeUpdate(params *EdgeUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/edges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeUpdateV2 updates edge ntnx ignore

Updates an edge.
*/
func (a *Client) EdgeUpdateV2(params *EdgeUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*EdgeUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/edges/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeUpgradeList lists available edge software upgrades ntnx ignore

Retrieves available edge software upgrades.
*/
func (a *Client) EdgeUpgradeList(params *EdgeUpgradeListParams, authInfo runtime.ClientAuthInfoWriter) (*EdgeUpgradeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeUpgradeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeUpgradeList",
		Method:             "GET",
		PathPattern:        "/v1/edgesCompatibleUpgrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeUpgradeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeUpgradeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeUpgradeListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ExecuteEdgeUpgrade upgrades the edge software ntnx ignore

Upgrades the edge software.
*/
func (a *Client) ExecuteEdgeUpgrade(params *ExecuteEdgeUpgradeParams, authInfo runtime.ClientAuthInfoWriter) (*ExecuteEdgeUpgradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteEdgeUpgradeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExecuteEdgeUpgrade",
		Method:             "POST",
		PathPattern:        "/v1/edges/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExecuteEdgeUpgradeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteEdgeUpgradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExecuteEdgeUpgradeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogEntriesList lists log entries ntnx ignore

Retrieve all log entries.
*/
func (a *Client) LogEntriesList(params *LogEntriesListParams, authInfo runtime.ClientAuthInfoWriter) (*LogEntriesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogEntriesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogEntriesList",
		Method:             "GET",
		PathPattern:        "/v1/logs/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogEntriesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogEntriesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogEntriesListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogEntryDelete deletes log entry by ID ntnx ignore

Deletes the log entry with the given id.
*/
func (a *Client) LogEntryDelete(params *LogEntryDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*LogEntryDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogEntryDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogEntryDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/logs/entries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogEntryDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogEntryDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogEntryDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogRequestDownload requests log download ntnx ignore

Generates the log download URL.
*/
func (a *Client) LogRequestDownload(params *LogRequestDownloadParams, authInfo runtime.ClientAuthInfoWriter) (*LogRequestDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogRequestDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogRequestDownload",
		Method:             "POST",
		PathPattern:        "/v1/logs/requestDownload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogRequestDownloadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogRequestDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogRequestDownloadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogRequestUpload requests log upload ntnx ignore

Request edges to upload logs to S3.
*/
func (a *Client) LogRequestUpload(params *LogRequestUploadParams, authInfo runtime.ClientAuthInfoWriter) (*LogRequestUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogRequestUploadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogRequestUpload",
		Method:             "POST",
		PathPattern:        "/v1/logs/requestUpload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogRequestUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogRequestUploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogRequestUploadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogUpload uploads log ntnx ignore

Upload log - for edge testing.
*/
func (a *Client) LogUpload(params *LogUploadParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogUploadParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogUpload",
		Method:             "POST",
		PathPattern:        "/v1/logs/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
LogUploadComplete reports log upload complete ntnx ignore

Edge will use this API to notify log upload complete.
*/
func (a *Client) LogUploadComplete(params *LogUploadCompleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogUploadCompleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogUploadComplete",
		Method:             "POST",
		PathPattern:        "/v1/logs/uploadComplete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogUploadCompleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
LoginCall logins user ntnx ignore

Lets the user log in.
*/
func (a *Client) LoginCall(params *LoginCallParams) (*LoginCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoginCall",
		Method:             "POST",
		PathPattern:        "/v1/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoginCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NodeGetBySerialNumber gets a node as specified by its serial number ntnx ignore

Retrieves the node according to the given serial number.
You can display the serial number by opening this URL in a browser.
Use your service domain IP address: http://service-domain-ip-address:8080/v1/sn
*/
func (a *Client) NodeGetBySerialNumber(params *NodeGetBySerialNumberParams) (*NodeGetBySerialNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodeGetBySerialNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NodeGetBySerialNumber",
		Method:             "POST",
		PathPattern:        "/v1.0/nodebyserialnumber",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodeGetBySerialNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodeGetBySerialNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodeGetBySerialNumberDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OAuthAuthorizeCall logins via my nutanix ntnx ignore

This will redirect the user to the oauth login page.
Note: UI only API
*/
func (a *Client) OAuthAuthorizeCall(params *OAuthAuthorizeCallParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOAuthAuthorizeCallParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OAuthAuthorizeCall",
		Method:             "GET",
		PathPattern:        "/v1/oauth2/authorize",
		ProducesMediaTypes: []string{"application/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OAuthAuthorizeCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
OAuthTokenCall refreshes token via my nutanix ntnx ignore

This will get the session token from the auth token.
Note: UI only API
*/
func (a *Client) OAuthTokenCall(params *OAuthTokenCallParams) (*OAuthTokenCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOAuthTokenCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OAuthTokenCall",
		Method:             "POST",
		PathPattern:        "/v1/oauth2/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OAuthTokenCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OAuthTokenCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OAuthTokenCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectCreate creates a project ntnx ignore

Creates a project.
*/
func (a *Client) ProjectCreate(params *ProjectCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectCreate",
		Method:             "POST",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectDelete deletes a project by ID ntnx ignore

Deletes a project with the given ID {id}.
*/
func (a *Client) ProjectDelete(params *ProjectDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGet gets project by its ID ntnx ignore

Retrieves the project by its given ID {projectId}.
*/
func (a *Client) ProjectGet(params *ProjectGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGet",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetApplications gets all applications in a project according to project ID ntnx ignore

Retrieves a list of all applications in a project with ID {projectId}.
*/
func (a *Client) ProjectGetApplications(params *ProjectGetApplicationsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetApplicationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetApplications",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetApplicationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetCloudCreds gets cloud profiles according to project ID ntnx ignore

Retrieves all cloud service profiles for a project with a given ID {projectId}
*/
func (a *Client) ProjectGetCloudCreds(params *ProjectGetCloudCredsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetCloudCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetCloudCredsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetCloudCreds",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/cloudcreds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetCloudCredsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetCloudCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetCloudCredsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetContainerRegistries gets container registry profiles by project ID ntnx ignore

Retrieves a list of all container registry profiles with a given ID {projectId}
*/
func (a *Client) ProjectGetContainerRegistries(params *ProjectGetContainerRegistriesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetContainerRegistriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetContainerRegistriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetContainerRegistries",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/containerregistries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetContainerRegistriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetContainerRegistriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetContainerRegistriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetDataStreams gets data pipelines for a project ntnx ignore

Retrieves all data pipelines for a project of a tenant.
*/
func (a *Client) ProjectGetDataStreams(params *ProjectGetDataStreamsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetDataStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetDataStreamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetDataStreams",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/datastreams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetDataStreamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetDataStreamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetDataStreamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetDatasources gets data sources for a project ntnx ignore

Retrieves a list of all data sources associated with a project with a given ID {projectId}.
*/
func (a *Client) ProjectGetDatasources(params *ProjectGetDatasourcesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetDatasourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetDatasourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetDatasources",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetDatasourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetDatasourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetDatasourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetDockerProfiles gets project docker profiles ntnx ignore

Retrieves all DockerProfiles for a project by project ID {projectId}.
*/
func (a *Client) ProjectGetDockerProfiles(params *ProjectGetDockerProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetDockerProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetDockerProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetDockerProfiles",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/dockerprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetDockerProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetDockerProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetDockerProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetEdges gets project edges by ID ntnx ignore

Retrieves all edges for a project by project ID {projectId}.
*/
func (a *Client) ProjectGetEdges(params *ProjectGetEdgesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetEdgesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetEdgesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetEdges",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/edges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetEdgesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetEdgesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetEdgesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetEdgesInfo gets all edge information for a project by ID ntnx ignore

Retrieves all edge resource, build, and version details by project ID.
*/
func (a *Client) ProjectGetEdgesInfo(params *ProjectGetEdgesInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetEdgesInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetEdgesInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetEdgesInfo",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/edgesinfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetEdgesInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetEdgesInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetEdgesInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetScriptRuntimes gets function runtime environments for a project by ID ntnx ignore

Retrieves all function runtime environments for a project by a given project ID {projectId}.
*/
func (a *Client) ProjectGetScriptRuntimes(params *ProjectGetScriptRuntimesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetScriptRuntimesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetScriptRuntimesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetScriptRuntimes",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/scriptruntimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetScriptRuntimesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetScriptRuntimesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetScriptRuntimesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetScripts gets project scripts ntnx ignore

This will retrieve all scripts for a project.
*/
func (a *Client) ProjectGetScripts(params *ProjectGetScriptsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetScriptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetScriptsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetScripts",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetScriptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetScriptsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetScriptsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetUsers gets project users by project ID ntnx ignore

Retrieves all users for a project by project ID {projectId}.
*/
func (a *Client) ProjectGetUsers(params *ProjectGetUsersParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetUsers",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectList gets projects ntnx ignore

Retrieves all projects.
*/
func (a *Client) ProjectList(params *ProjectListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectList",
		Method:             "GET",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectUpdate updates projects ntnx ignore

Updates projects.
*/
func (a *Client) ProjectUpdate(params *ProjectUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectUpdateV2 updates a project by its ID ntnx ignore

Updates a project by its given ID {id}.
*/
func (a *Client) ProjectUpdateV2(params *ProjectUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*ProjectUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QueryEvents lists events ntnx ignore

Retrieves all events matching the filter for a tenant.
*/
func (a *Client) QueryEvents(params *QueryEventsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryEvents",
		Method:             "POST",
		PathPattern:        "/v1/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueryEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptCreate creates script ntnx ignore

This will create a script.
*/
func (a *Client) ScriptCreate(params *ScriptCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ScriptCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptCreate",
		Method:             "POST",
		PathPattern:        "/v1/scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptDelete deletes script ntnx ignore

This will delete the script with the given id.
*/
func (a *Client) ScriptDelete(params *ScriptDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ScriptDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/scripts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptGet gets script ntnx ignore

This will get the script with the given id.
*/
func (a *Client) ScriptGet(params *ScriptGetParams, authInfo runtime.ClientAuthInfoWriter) (*ScriptGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptGet",
		Method:             "GET",
		PathPattern:        "/v1/scripts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptList gets scripts ntnx ignore

This will retrieve all scripts for a tenant.
*/
func (a *Client) ScriptList(params *ScriptListParams, authInfo runtime.ClientAuthInfoWriter) (*ScriptListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptList",
		Method:             "GET",
		PathPattern:        "/v1/scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptRuntimeCreate creates script runtime ntnx ignore

Create a script runtime.
*/
func (a *Client) ScriptRuntimeCreate(params *ScriptRuntimeCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ScriptRuntimeCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptRuntimeCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptRuntimeCreate",
		Method:             "POST",
		PathPattern:        "/v1/scriptruntimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptRuntimeCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptRuntimeCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptRuntimeCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptRuntimeDelete deletes script runtime ntnx ignore

Delete runtime environment according to its given ID {id}.
*/
func (a *Client) ScriptRuntimeDelete(params *ScriptRuntimeDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ScriptRuntimeDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptRuntimeDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptRuntimeDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/scriptruntimes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptRuntimeDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptRuntimeDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptRuntimeDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptRuntimeGet gets a function for a runtime by function ID ntnx ignore

Retrieves the function for a runtime by a given function ID.
*/
func (a *Client) ScriptRuntimeGet(params *ScriptRuntimeGetParams, authInfo runtime.ClientAuthInfoWriter) (*ScriptRuntimeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptRuntimeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptRuntimeGet",
		Method:             "GET",
		PathPattern:        "/v1/scriptruntimes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptRuntimeGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptRuntimeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptRuntimeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptRuntimeList gets a function runtime environments ntnx ignore

Retrieves all function runtime environments.

Retrieves all script runtimes.
*/
func (a *Client) ScriptRuntimeList(params *ScriptRuntimeListParams, authInfo runtime.ClientAuthInfoWriter) (*ScriptRuntimeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptRuntimeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptRuntimeList",
		Method:             "GET",
		PathPattern:        "/v1/scriptruntimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptRuntimeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptRuntimeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptRuntimeListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptRuntimeUpdate updates script runtime ntnx ignore

Update a script runtime.
*/
func (a *Client) ScriptRuntimeUpdate(params *ScriptRuntimeUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ScriptRuntimeUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptRuntimeUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptRuntimeUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/scriptruntimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptRuntimeUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptRuntimeUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptRuntimeUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptRuntimeUpdateV2 updates script runtime ntnx ignore

Update a script runtime.
*/
func (a *Client) ScriptRuntimeUpdateV2(params *ScriptRuntimeUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*ScriptRuntimeUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptRuntimeUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptRuntimeUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/scriptruntimes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptRuntimeUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptRuntimeUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptRuntimeUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptUpdate updates script ntnx ignore

This will update a script.
*/
func (a *Client) ScriptUpdate(params *ScriptUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ScriptUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScriptUpdateV2 updates script ntnx ignore

This will update a script.
*/
func (a *Client) ScriptUpdateV2(params *ScriptUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*ScriptUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScriptUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScriptUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/scripts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScriptUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScriptUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScriptUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SensorCreate creates sensor ntnx ignore

Creates a sensor.
*/
func (a *Client) SensorCreate(params *SensorCreateParams, authInfo runtime.ClientAuthInfoWriter) (*SensorCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSensorCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SensorCreate",
		Method:             "POST",
		PathPattern:        "/v1/sensors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SensorCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SensorCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SensorCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SensorDelete deletes sensor by ID ntnx ignore

Deletes the sensor with the given ID {id}.
*/
func (a *Client) SensorDelete(params *SensorDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SensorDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSensorDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SensorDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/sensors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SensorDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SensorDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SensorDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SensorGet gets sensor by ID ntnx ignore

Retrieves the sensor with the given ID {id}.
*/
func (a *Client) SensorGet(params *SensorGetParams, authInfo runtime.ClientAuthInfoWriter) (*SensorGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSensorGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SensorGet",
		Method:             "GET",
		PathPattern:        "/v1/sensors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SensorGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SensorGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SensorGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SensorList gets sensors ntnx ignore

Retrieves all sensors for a tenant.
*/
func (a *Client) SensorList(params *SensorListParams, authInfo runtime.ClientAuthInfoWriter) (*SensorListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSensorListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SensorList",
		Method:             "GET",
		PathPattern:        "/v1/sensors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SensorListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SensorListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SensorListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SensorUpdate updates sensor ntnx ignore

Updates a sensor.
*/
func (a *Client) SensorUpdate(params *SensorUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SensorUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSensorUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SensorUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/sensors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SensorUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SensorUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SensorUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SensorUpdateV2 updates sensor ntnx ignore

Updates a sensor.
*/
func (a *Client) SensorUpdateV2(params *SensorUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*SensorUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSensorUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SensorUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/sensors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SensorUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SensorUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SensorUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TenantPropsDelete deletes tenant properties by tenant ID ntnx ignore

Deletes properties for the tenant with the given ID.
*/
func (a *Client) TenantPropsDelete(params *TenantPropsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*TenantPropsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenantPropsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TenantPropsDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/tenantprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenantPropsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TenantPropsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TenantPropsDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TenantPropsGet gets tenant properties by tenant ID ntnx ignore

Retrieves properties for the tenant with the given ID.
*/
func (a *Client) TenantPropsGet(params *TenantPropsGetParams, authInfo runtime.ClientAuthInfoWriter) (*TenantPropsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenantPropsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TenantPropsGet",
		Method:             "GET",
		PathPattern:        "/v1/tenantprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenantPropsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TenantPropsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TenantPropsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TenantPropsUpdate updates tenant properties by tenant ID ntnx ignore

Updates properties for the tenant with the given ID.
*/
func (a *Client) TenantPropsUpdate(params *TenantPropsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*TenantPropsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenantPropsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TenantPropsUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/tenantprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenantPropsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TenantPropsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TenantPropsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpsertEvents upserts events used internally ntnx ignore

This will insert/update events for a tenant.
*/
func (a *Client) UpsertEvents(params *UpsertEventsParams, authInfo runtime.ClientAuthInfoWriter) (*UpsertEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpsertEvents",
		Method:             "PUT",
		PathPattern:        "/v1/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpsertEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpsertEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpsertEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserCreate creates user ntnx ignore

Creates a user.
*/
func (a *Client) UserCreate(params *UserCreateParams, authInfo runtime.ClientAuthInfoWriter) (*UserCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserCreate",
		Method:             "POST",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserDelete deletes user by ID ntnx ignore

Deletes the user with the given ID {id}.
*/
func (a *Client) UserDelete(params *UserDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*UserDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserGet gets user ntnx ignore

Retrieves a user with the given id {id}.
*/
func (a *Client) UserGet(params *UserGetParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserGet",
		Method:             "GET",
		PathPattern:        "/v1/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserList gets users ntnx ignore

Retrieves all users for a tenant.
*/
func (a *Client) UserList(params *UserListParams, authInfo runtime.ClientAuthInfoWriter) (*UserListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserList",
		Method:             "GET",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPropsDelete deletes user properties by user ID ntnx ignore

Deletes the properties for the user with the given ID {id}.
*/
func (a *Client) UserPropsDelete(params *UserPropsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*UserPropsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPropsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserPropsDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/userprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserPropsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPropsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPropsDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPropsGet gets user properties ntnx ignore

Retrieves the properties for the user with the given ID {id}.
*/
func (a *Client) UserPropsGet(params *UserPropsGetParams, authInfo runtime.ClientAuthInfoWriter) (*UserPropsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPropsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserPropsGet",
		Method:             "GET",
		PathPattern:        "/v1/userprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserPropsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPropsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPropsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPropsUpdate updates user properties by ID ntnx ignore

Updates the properties of the user with the given ID {id}.
*/
func (a *Client) UserPropsUpdate(params *UserPropsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UserPropsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPropsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserPropsUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/userprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserPropsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPropsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPropsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserUpdate updates user ntnx ignore

Updates a user.
*/
func (a *Client) UserUpdate(params *UserUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UserUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserUpdateV2 updates user with a given ID ntnx ignore

Updates a user with a given ID {id}.
*/
func (a *Client) UserUpdateV2(params *UserUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*UserUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WsMessagingGetNotificationTopics documents websocket request response payload for get notification topics message
*/
func (a *Client) WsMessagingGetNotificationTopics(params *WsMessagingGetNotificationTopicsParams) (*WsMessagingGetNotificationTopicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingGetNotificationTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingGetNotificationTopics",
		Method:             "GET",
		PathPattern:        "/v1/wsdocs/getNotificationTopics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingGetNotificationTopicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingGetNotificationTopicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingGetNotificationTopics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingHTTPProxy documents websocket request response payload for http proxy message
*/
func (a *Client) WsMessagingHTTPProxy(params *WsMessagingHTTPProxyParams) (*WsMessagingHTTPProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingHTTPProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingHTTPProxy",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/httpProxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingHTTPProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingHTTPProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingHTTPProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingLogStream documents websocket request response payload for log stream message
*/
func (a *Client) WsMessagingLogStream(params *WsMessagingLogStreamParams) (*WsMessagingLogStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingLogStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingLogStream",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/logStream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingLogStreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingLogStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingLogStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingLogUpload documents websocket request response payload for log upload message
*/
func (a *Client) WsMessagingLogUpload(params *WsMessagingLogUploadParams) (*WsMessagingLogUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingLogUploadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingLogUpload",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/logUpload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingLogUploadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingLogUploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingLogUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingLogUploadComplete documents websocket request response payload for log upload complete message
*/
func (a *Client) WsMessagingLogUploadComplete(params *WsMessagingLogUploadCompleteParams) (*WsMessagingLogUploadCompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingLogUploadCompleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingLogUploadComplete",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/logUploadComplete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingLogUploadCompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingLogUploadCompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingLogUploadComplete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateApplication documents websocket request response payload for on create application message
*/
func (a *Client) WsMessagingOnCreateApplication(params *WsMessagingOnCreateApplicationParams) (*WsMessagingOnCreateApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateApplicationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateApplication",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateApplication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateApplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateCategory documents websocket request response payload for on create category message
*/
func (a *Client) WsMessagingOnCreateCategory(params *WsMessagingOnCreateCategoryParams) (*WsMessagingOnCreateCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateCategory",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateCategory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateCloudCreds documents websocket request response payload for on create cloud creds message
*/
func (a *Client) WsMessagingOnCreateCloudCreds(params *WsMessagingOnCreateCloudCredsParams) (*WsMessagingOnCreateCloudCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateCloudCredsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateCloudCreds",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateCloudCreds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateCloudCredsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateCloudCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateCloudCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateDataDriverInstance documents websocket request response payload for on create data driver instance message
*/
func (a *Client) WsMessagingOnCreateDataDriverInstance(params *WsMessagingOnCreateDataDriverInstanceParams) (*WsMessagingOnCreateDataDriverInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateDataDriverInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateDataDriverInstance",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/OnCreateDataDriverInstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateDataDriverInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateDataDriverInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateDataDriverInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateDataSource documents websocket request response payload for on create data source message
*/
func (a *Client) WsMessagingOnCreateDataSource(params *WsMessagingOnCreateDataSourceParams) (*WsMessagingOnCreateDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateDataSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateDataSource",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateDataSource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateDataSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateDataSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateDataStream documents websocket request response payload for on create data stream message
*/
func (a *Client) WsMessagingOnCreateDataStream(params *WsMessagingOnCreateDataStreamParams) (*WsMessagingOnCreateDataStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateDataStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateDataStream",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateDataStream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateDataStreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateDataStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateDataStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateDockerProfile documents websocket request response payload for on create docker profile message
*/
func (a *Client) WsMessagingOnCreateDockerProfile(params *WsMessagingOnCreateDockerProfileParams) (*WsMessagingOnCreateDockerProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateDockerProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateDockerProfile",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateDockerProfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateDockerProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateDockerProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateDockerProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateExecuteEdgeUpgrade documents websocket request response payload for execute edge upgrade message
*/
func (a *Client) WsMessagingOnCreateExecuteEdgeUpgrade(params *WsMessagingOnCreateExecuteEdgeUpgradeParams) (*WsMessagingOnCreateExecuteEdgeUpgradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateExecuteEdgeUpgradeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateExecuteEdgeUpgrade",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/executeEdgeUpgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateExecuteEdgeUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateExecuteEdgeUpgradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateExecuteEdgeUpgrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateLogCollector documents websocket request response payload for on create log collector message
*/
func (a *Client) WsMessagingOnCreateLogCollector(params *WsMessagingOnCreateLogCollectorParams) (*WsMessagingOnCreateLogCollectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateLogCollectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateLogCollector",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateLogCollector",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateLogCollectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateLogCollectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateLogCollector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateMLModel documents websocket request response payload for on create m l model message
*/
func (a *Client) WsMessagingOnCreateMLModel(params *WsMessagingOnCreateMLModelParams) (*WsMessagingOnCreateMLModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateMLModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateMLModel",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateMLModel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateMLModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateMLModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateMLModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateProject documents websocket request response payload for on create project message
*/
func (a *Client) WsMessagingOnCreateProject(params *WsMessagingOnCreateProjectParams) (*WsMessagingOnCreateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateProject",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateProjectService documents websocket request response payload for on create project service message
*/
func (a *Client) WsMessagingOnCreateProjectService(params *WsMessagingOnCreateProjectServiceParams) (*WsMessagingOnCreateProjectServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateProjectServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateProjectService",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateProjectService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateProjectServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateProjectServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateProjectService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateScript documents websocket request response payload for on create script message
*/
func (a *Client) WsMessagingOnCreateScript(params *WsMessagingOnCreateScriptParams) (*WsMessagingOnCreateScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateScriptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateScript",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateScript",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateScriptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateScriptRuntime documents websocket request response payload for on create script runtime message
*/
func (a *Client) WsMessagingOnCreateScriptRuntime(params *WsMessagingOnCreateScriptRuntimeParams) (*WsMessagingOnCreateScriptRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateScriptRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateScriptRuntime",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateScriptRuntime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateScriptRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateScriptRuntimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateScriptRuntime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnCreateServiceBinding documents websocket request response payload for on create service binding message
*/
func (a *Client) WsMessagingOnCreateServiceBinding(params *WsMessagingOnCreateServiceBindingParams) (*WsMessagingOnCreateServiceBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnCreateServiceBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnCreateServiceBinding",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onCreateSoftwareUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnCreateServiceBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnCreateServiceBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnCreateServiceBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteApplication documents websocket request response payload for on delete application message
*/
func (a *Client) WsMessagingOnDeleteApplication(params *WsMessagingOnDeleteApplicationParams) (*WsMessagingOnDeleteApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteApplicationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteApplication",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteApplication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteApplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteCategory documents websocket request response payload for on delete category message
*/
func (a *Client) WsMessagingOnDeleteCategory(params *WsMessagingOnDeleteCategoryParams) (*WsMessagingOnDeleteCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteCategory",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteCategory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteCloudCreds documents websocket request response payload for on delete cloud creds message
*/
func (a *Client) WsMessagingOnDeleteCloudCreds(params *WsMessagingOnDeleteCloudCredsParams) (*WsMessagingOnDeleteCloudCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteCloudCredsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteCloudCreds",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteCloudCreds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteCloudCredsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteCloudCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteCloudCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteDataDriverInstance documents websocket request response payload for on delete data driver instance message
*/
func (a *Client) WsMessagingOnDeleteDataDriverInstance(params *WsMessagingOnDeleteDataDriverInstanceParams) (*WsMessagingOnDeleteDataDriverInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteDataDriverInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteDataDriverInstance",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteDataDriverInstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteDataDriverInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteDataDriverInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteDataDriverInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteDataSource documents websocket request response payload for on delete data source message
*/
func (a *Client) WsMessagingOnDeleteDataSource(params *WsMessagingOnDeleteDataSourceParams) (*WsMessagingOnDeleteDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteDataSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteDataSource",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteDataSource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteDataSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteDataSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteDataStream documents websocket request response payload for on delete data stream message
*/
func (a *Client) WsMessagingOnDeleteDataStream(params *WsMessagingOnDeleteDataStreamParams) (*WsMessagingOnDeleteDataStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteDataStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteDataStream",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteDataStream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteDataStreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteDataStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteDataStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteDockerProfile documents websocket request response payload for on delete docker profile message
*/
func (a *Client) WsMessagingOnDeleteDockerProfile(params *WsMessagingOnDeleteDockerProfileParams) (*WsMessagingOnDeleteDockerProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteDockerProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteDockerProfile",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteDockerProfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteDockerProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteDockerProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteDockerProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteEdge documents websocket request response payload for on delete edge message
*/
func (a *Client) WsMessagingOnDeleteEdge(params *WsMessagingOnDeleteEdgeParams) (*WsMessagingOnDeleteEdgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteEdgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteEdge",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteEdge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteEdgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteEdgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteEdge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteLogCollector documents websocket request response payload for on delete log collector message
*/
func (a *Client) WsMessagingOnDeleteLogCollector(params *WsMessagingOnDeleteLogCollectorParams) (*WsMessagingOnDeleteLogCollectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteLogCollectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteLogCollector",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteLogCollector",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteLogCollectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteLogCollectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteLogCollector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteMLModel documents websocket request response payload for on delete m l model message
*/
func (a *Client) WsMessagingOnDeleteMLModel(params *WsMessagingOnDeleteMLModelParams) (*WsMessagingOnDeleteMLModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteMLModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteMLModel",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteMLModel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteMLModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteMLModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteMLModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteProject documents websocket request response payload for on delete project message
*/
func (a *Client) WsMessagingOnDeleteProject(params *WsMessagingOnDeleteProjectParams) (*WsMessagingOnDeleteProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteProject",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteProjectService documents websocket request response payload for on delete project service message
*/
func (a *Client) WsMessagingOnDeleteProjectService(params *WsMessagingOnDeleteProjectServiceParams) (*WsMessagingOnDeleteProjectServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteProjectServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteProjectService",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteProjectService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteProjectServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteProjectServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteProjectService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteScript documents websocket request response payload for on delete script message
*/
func (a *Client) WsMessagingOnDeleteScript(params *WsMessagingOnDeleteScriptParams) (*WsMessagingOnDeleteScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteScriptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteScript",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteScript",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteScriptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteScriptRuntime documents websocket request response payload for on delete script runtime message
*/
func (a *Client) WsMessagingOnDeleteScriptRuntime(params *WsMessagingOnDeleteScriptRuntimeParams) (*WsMessagingOnDeleteScriptRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteScriptRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteScriptRuntime",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteScriptRuntime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteScriptRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteScriptRuntimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteScriptRuntime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteServiceBinding documents websocket request response payload for on delete service binding message
*/
func (a *Client) WsMessagingOnDeleteServiceBinding(params *WsMessagingOnDeleteServiceBindingParams) (*WsMessagingOnDeleteServiceBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteServiceBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteServiceBinding",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteServiceBinding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteServiceBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteServiceBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteServiceBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnDeleteServiceInstance documents websocket request response payload for on delete service instance message
*/
func (a *Client) WsMessagingOnDeleteServiceInstance(params *WsMessagingOnDeleteServiceInstanceParams) (*WsMessagingOnDeleteServiceInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnDeleteServiceInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnDeleteServiceInstance",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onDeleteServiceInstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnDeleteServiceInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnDeleteServiceInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnDeleteServiceInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnGetApplicationContainers documents websocket request response payload for on get application containers message
*/
func (a *Client) WsMessagingOnGetApplicationContainers(params *WsMessagingOnGetApplicationContainersParams) (*WsMessagingOnGetApplicationContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnGetApplicationContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnGetApplicationContainers",
		Method:             "GET",
		PathPattern:        "/v1/wsdocs/onGetApplicationContainers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnGetApplicationContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnGetApplicationContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnGetApplicationContainers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnGetDataPipelineContainers documents websocket request response payload for on get data pipeline containers message
*/
func (a *Client) WsMessagingOnGetDataPipelineContainers(params *WsMessagingOnGetDataPipelineContainersParams) (*WsMessagingOnGetDataPipelineContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnGetDataPipelineContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnGetDataPipelineContainers",
		Method:             "GET",
		PathPattern:        "/v1/wsdocs/onGetDataPipelineContainers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnGetDataPipelineContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnGetDataPipelineContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnGetDataPipelineContainers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateApplication documents websocket request response payload for on update application message
*/
func (a *Client) WsMessagingOnUpdateApplication(params *WsMessagingOnUpdateApplicationParams) (*WsMessagingOnUpdateApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateApplicationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateApplication",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateApplication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateApplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateCategory documents websocket request response payload for on update category message
*/
func (a *Client) WsMessagingOnUpdateCategory(params *WsMessagingOnUpdateCategoryParams) (*WsMessagingOnUpdateCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateCategory",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateCategory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateCloudCreds documents websocket request response payload for on update cloud creds message
*/
func (a *Client) WsMessagingOnUpdateCloudCreds(params *WsMessagingOnUpdateCloudCredsParams) (*WsMessagingOnUpdateCloudCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateCloudCredsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateCloudCreds",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateCloudCreds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateCloudCredsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateCloudCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateCloudCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateDataDriverInstance documents websocket request response payload for on update data driver instance message
*/
func (a *Client) WsMessagingOnUpdateDataDriverInstance(params *WsMessagingOnUpdateDataDriverInstanceParams) (*WsMessagingOnUpdateDataDriverInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateDataDriverInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateDataDriverInstance",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/OnUpdateDataDriverInstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateDataDriverInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateDataDriverInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateDataDriverInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateDataSource documents websocket request response payload for on update data source message
*/
func (a *Client) WsMessagingOnUpdateDataSource(params *WsMessagingOnUpdateDataSourceParams) (*WsMessagingOnUpdateDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateDataSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateDataSource",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateDataSource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateDataSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateDataSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateDataStream documents websocket request response payload for on update data stream message
*/
func (a *Client) WsMessagingOnUpdateDataStream(params *WsMessagingOnUpdateDataStreamParams) (*WsMessagingOnUpdateDataStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateDataStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateDataStream",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateDataStream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateDataStreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateDataStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateDataStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateDockerProfile documents websocket request response payload for on update docker profile message
*/
func (a *Client) WsMessagingOnUpdateDockerProfile(params *WsMessagingOnUpdateDockerProfileParams) (*WsMessagingOnUpdateDockerProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateDockerProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateDockerProfile",
		Method:             "POST",
		PathPattern:        "/wsdocs/onUpdateDockerProfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateDockerProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateDockerProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateDockerProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateEdge documents websocket request response payload for on update edge message
*/
func (a *Client) WsMessagingOnUpdateEdge(params *WsMessagingOnUpdateEdgeParams) (*WsMessagingOnUpdateEdgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateEdgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateEdge",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateEdge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateEdgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateEdgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateEdge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateLogCollector documents websocket request response payload for on update log collector message
*/
func (a *Client) WsMessagingOnUpdateLogCollector(params *WsMessagingOnUpdateLogCollectorParams) (*WsMessagingOnUpdateLogCollectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateLogCollectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateLogCollector",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateLogCollector",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateLogCollectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateLogCollectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateLogCollector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateMLModel documents websocket request response payload for on update m l model message
*/
func (a *Client) WsMessagingOnUpdateMLModel(params *WsMessagingOnUpdateMLModelParams) (*WsMessagingOnUpdateMLModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateMLModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateMLModel",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateMLModel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateMLModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateMLModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateMLModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateProject documents websocket request response payload for on update project message
*/
func (a *Client) WsMessagingOnUpdateProject(params *WsMessagingOnUpdateProjectParams) (*WsMessagingOnUpdateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateProject",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateProjectService documents websocket request response payload for on update project service message
*/
func (a *Client) WsMessagingOnUpdateProjectService(params *WsMessagingOnUpdateProjectServiceParams) (*WsMessagingOnUpdateProjectServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateProjectServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateProjectService",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateProjectService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateProjectServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateProjectServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateProjectService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateScript documents websocket request response payload for on update script message
*/
func (a *Client) WsMessagingOnUpdateScript(params *WsMessagingOnUpdateScriptParams) (*WsMessagingOnUpdateScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateScriptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateScript",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateScript",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateScriptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateScriptRuntime documents websocket request response payload for on update script runtime message
*/
func (a *Client) WsMessagingOnUpdateScriptRuntime(params *WsMessagingOnUpdateScriptRuntimeParams) (*WsMessagingOnUpdateScriptRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateScriptRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateScriptRuntime",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateScriptRuntime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateScriptRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateScriptRuntimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateScriptRuntime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingOnUpdateServiceInstance documents websocket request response payload for on update service instance message
*/
func (a *Client) WsMessagingOnUpdateServiceInstance(params *WsMessagingOnUpdateServiceInstanceParams) (*WsMessagingOnUpdateServiceInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingOnUpdateServiceInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingOnUpdateServiceInstance",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/onUpdateSoftwareUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingOnUpdateServiceInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingOnUpdateServiceInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingOnUpdateServiceInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingReportAppStatus documents websocket request response payload for application status message
*/
func (a *Client) WsMessagingReportAppStatus(params *WsMessagingReportAppStatusParams) (*WsMessagingReportAppStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingReportAppStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingReportAppStatus",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/application-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingReportAppStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingReportAppStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingReportAppStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingReportEdge documents websocket request response payload for report edge message
*/
func (a *Client) WsMessagingReportEdge(params *WsMessagingReportEdgeParams) (*WsMessagingReportEdgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingReportEdgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingReportEdge",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/reportEdge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingReportEdgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingReportEdgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingReportEdge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingReportEdgeInfo documents websocket request response payload for report edge info message
*/
func (a *Client) WsMessagingReportEdgeInfo(params *WsMessagingReportEdgeInfoParams) (*WsMessagingReportEdgeInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingReportEdgeInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingReportEdgeInfo",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/reportEdgeInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingReportEdgeInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingReportEdgeInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingReportEdgeInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingReportSensors documents websocket request response payload for report sensors message
*/
func (a *Client) WsMessagingReportSensors(params *WsMessagingReportSensorsParams) (*WsMessagingReportSensorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingReportSensorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingReportSensors",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/reportSensors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingReportSensorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingReportSensorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingReportSensors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingSetupSSHTunneling documents websocket request response payload for setup SSH tunneling message
*/
func (a *Client) WsMessagingSetupSSHTunneling(params *WsMessagingSetupSSHTunnelingParams) (*WsMessagingSetupSSHTunnelingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingSetupSSHTunnelingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingSetupSSHTunneling",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/setupSSHTunneling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingSetupSSHTunnelingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingSetupSSHTunnelingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingSetupSSHTunneling: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WsMessagingTeardownSSHTunneling documents websocket request response payload for teardown SSH tunneling message
*/
func (a *Client) WsMessagingTeardownSSHTunneling(params *WsMessagingTeardownSSHTunnelingParams) (*WsMessagingTeardownSSHTunnelingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWsMessagingTeardownSSHTunnelingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WsMessagingTeardownSSHTunneling",
		Method:             "POST",
		PathPattern:        "/v1/wsdocs/teardownSSHTunneling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WsMessagingTeardownSSHTunnelingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WsMessagingTeardownSSHTunnelingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WsMessagingTeardownSSHTunneling: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
