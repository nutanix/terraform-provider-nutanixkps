// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSensorListParams creates a new SensorListParams object
// with the default values initialized.
func NewSensorListParams() *SensorListParams {
	var ()
	return &SensorListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSensorListParamsWithTimeout creates a new SensorListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSensorListParamsWithTimeout(timeout time.Duration) *SensorListParams {
	var ()
	return &SensorListParams{

		timeout: timeout,
	}
}

// NewSensorListParamsWithContext creates a new SensorListParams object
// with the default values initialized, and the ability to set a context for a request
func NewSensorListParamsWithContext(ctx context.Context) *SensorListParams {
	var ()
	return &SensorListParams{

		Context: ctx,
	}
}

// NewSensorListParamsWithHTTPClient creates a new SensorListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSensorListParamsWithHTTPClient(client *http.Client) *SensorListParams {
	var ()
	return &SensorListParams{
		HTTPClient: client,
	}
}

/*SensorListParams contains all the parameters to send to the API endpoint
for the sensor list operation typically these are written to a http.Request
*/
type SensorListParams struct {

	/*Authorization
	  Format: Bearer <token>, with <token> from login API response.

	*/
	Authorization string
	/*Filter
	  Specify result filter. Format is similar to a SQL WHERE clause. For example,
	to filter object by name with prefix foo, use: name LIKE 'foo%'.
	Supported filter keys are the same as order by keys.

	*/
	Filter *string
	/*OrderBy
	  Specify result order. Zero or more entries with format: &ltkey> [desc]
	where orderByKeys lists allowed keys in each response.

	*/
	OrderBy []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the sensor list params
func (o *SensorListParams) WithTimeout(timeout time.Duration) *SensorListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sensor list params
func (o *SensorListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sensor list params
func (o *SensorListParams) WithContext(ctx context.Context) *SensorListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sensor list params
func (o *SensorListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sensor list params
func (o *SensorListParams) WithHTTPClient(client *http.Client) *SensorListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sensor list params
func (o *SensorListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the sensor list params
func (o *SensorListParams) WithAuthorization(authorization string) *SensorListParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the sensor list params
func (o *SensorListParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithFilter adds the filter to the sensor list params
func (o *SensorListParams) WithFilter(filter *string) *SensorListParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the sensor list params
func (o *SensorListParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithOrderBy adds the orderBy to the sensor list params
func (o *SensorListParams) WithOrderBy(orderBy []string) *SensorListParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the sensor list params
func (o *SensorListParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WriteToRequest writes these params to a swagger request
func (o *SensorListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	valuesOrderBy := o.OrderBy

	joinedOrderBy := swag.JoinByFormat(valuesOrderBy, "")
	// query array param orderBy
	if err := r.SetQueryParam("orderBy", joinedOrderBy...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
