// Code generated by go-swagger; DO NOT EDIT.

package user_public_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user public key API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user public key API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UserPublicKeyDelete deletes current user public key

Deletes the public key for the current user.
*/
func (a *Client) UserPublicKeyDelete(params *UserPublicKeyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*UserPublicKeyDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPublicKeyDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserPublicKeyDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/userpublickey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserPublicKeyDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPublicKeyDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPublicKeyDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPublicKeyGet gets current user public key

Retrieves the public key for the current user.
*/
func (a *Client) UserPublicKeyGet(params *UserPublicKeyGetParams, authInfo runtime.ClientAuthInfoWriter) (*UserPublicKeyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPublicKeyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserPublicKeyGet",
		Method:             "GET",
		PathPattern:        "/v1.0/userpublickey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserPublicKeyGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPublicKeyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPublicKeyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPublicKeyList gets all user public keys

Retrieves the public keys for all users.
*/
func (a *Client) UserPublicKeyList(params *UserPublicKeyListParams, authInfo runtime.ClientAuthInfoWriter) (*UserPublicKeyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPublicKeyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserPublicKeyList",
		Method:             "GET",
		PathPattern:        "/v1.0/userpublickeyall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserPublicKeyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPublicKeyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPublicKeyListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPublicKeyUpdate upserts current user public key

Upserts the public key of the current user.
*/
func (a *Client) UserPublicKeyUpdate(params *UserPublicKeyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UserPublicKeyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPublicKeyUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserPublicKeyUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/userpublickey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserPublicKeyUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPublicKeyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPublicKeyUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
