// Code generated by go-swagger; DO NOT EDIT.

package user_api_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user api token API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user api token API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UserAPITokenCreate creates a user API token

Creates a user API token.
*/
func (a *Client) UserAPITokenCreate(params *UserAPITokenCreateParams, authInfo runtime.ClientAuthInfoWriter) (*UserAPITokenCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAPITokenCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserApiTokenCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/userapitokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserAPITokenCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAPITokenCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserAPITokenCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserAPITokenDelete deletes current user API token

Deletes the API token with the given id for the current user.
*/
func (a *Client) UserAPITokenDelete(params *UserAPITokenDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*UserAPITokenDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAPITokenDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserApiTokenDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/userapitokens/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserAPITokenDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAPITokenDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserAPITokenDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserAPITokenGet gets current user API tokens

Retrieves the API tokens info for the current user.
*/
func (a *Client) UserAPITokenGet(params *UserAPITokenGetParams, authInfo runtime.ClientAuthInfoWriter) (*UserAPITokenGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAPITokenGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserApiTokenGet",
		Method:             "GET",
		PathPattern:        "/v1.0/userapitokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserAPITokenGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAPITokenGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserAPITokenGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserAPITokenList gets all user API tokens

Retrieves the API tokens info for all users. Must be infra admin for this to work.
*/
func (a *Client) UserAPITokenList(params *UserAPITokenListParams, authInfo runtime.ClientAuthInfoWriter) (*UserAPITokenListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAPITokenListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserApiTokenList",
		Method:             "GET",
		PathPattern:        "/v1.0/userapitokensall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserAPITokenListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAPITokenListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserAPITokenListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserAPITokenUpdate updates user API token

Update the API token with the given id. Must be current user or infra admin.
*/
func (a *Client) UserAPITokenUpdate(params *UserAPITokenUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UserAPITokenUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAPITokenUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserApiTokenUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/userapitokens/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserAPITokenUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAPITokenUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserAPITokenUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
