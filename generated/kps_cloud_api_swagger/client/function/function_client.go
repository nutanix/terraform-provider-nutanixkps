// Code generated by go-swagger; DO NOT EDIT.

package function

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new function API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for function API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
FunctionCreate creates a function

Creates a function.
*/
func (a *Client) FunctionCreate(params *FunctionCreateParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FunctionCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FunctionDelete deletes a function by its ID

Deletes the function with the given ID {id}.
*/
func (a *Client) FunctionDelete(params *FunctionDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/functions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FunctionDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FunctionGet gets a function by its ID

Retrieves the function with the given ID {id}.
*/
func (a *Client) FunctionGet(params *FunctionGetParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionGet",
		Method:             "GET",
		PathPattern:        "/v1.0/functions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FunctionGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FunctionList gets functions

Retrieves all functions.
*/
func (a *Client) FunctionList(params *FunctionListParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionList",
		Method:             "GET",
		PathPattern:        "/v1.0/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FunctionListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FunctionUpdate updates function by its ID

Updates a function with the given ID {id}.
*/
func (a *Client) FunctionUpdate(params *FunctionUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/functions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FunctionUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetFunctions gets functions by project ID

Retrieves all functions according to a given project ID {projectId}.
*/
func (a *Client) ProjectGetFunctions(params *ProjectGetFunctionsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetFunctionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetFunctionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetFunctions",
		Method:             "GET",
		PathPattern:        "/v1.0/projects/{projectId}/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetFunctionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetFunctionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetFunctionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
