// Code generated by go-swagger; DO NOT EDIT.

package user_props

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user props API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user props API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UserPropsDeleteV2 deletes user properties by ID ntnx ignore

Deletes the properties for the user with the given ID {id}.
*/
func (a *Client) UserPropsDeleteV2(params *UserPropsDeleteV2Params, authInfo runtime.ClientAuthInfoWriter) (*UserPropsDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPropsDeleteV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserPropsDeleteV2",
		Method:             "DELETE",
		PathPattern:        "/v1.0/userprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserPropsDeleteV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPropsDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPropsDeleteV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPropsGetV2 gets user properties ntnx ignore

Retrieves the properties for the user with the given ID {id}.
*/
func (a *Client) UserPropsGetV2(params *UserPropsGetV2Params, authInfo runtime.ClientAuthInfoWriter) (*UserPropsGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPropsGetV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserPropsGetV2",
		Method:             "GET",
		PathPattern:        "/v1.0/userprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserPropsGetV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPropsGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPropsGetV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPropsUpdateV2 updates user properties by ID ntnx ignore

Updates the properties of the user with the given ID {id}.
*/
func (a *Client) UserPropsUpdateV2(params *UserPropsUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*UserPropsUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPropsUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserPropsUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1.0/userprops/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserPropsUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPropsUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPropsUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
