// Code generated by go-swagger; DO NOT EDIT.

package node_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new node info API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for node info API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NodeInfoGet gets all node information by node ID

Retrieves all node resource, build, and version details for a given node ID.
*/
func (a *Client) NodeInfoGet(params *NodeInfoGetParams, authInfo runtime.ClientAuthInfoWriter) (*NodeInfoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodeInfoGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NodeInfoGet",
		Method:             "GET",
		PathPattern:        "/v1.0/nodesinfo/{nodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodeInfoGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodeInfoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodeInfoGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NodeInfoList gets node resource build and version details

Retrieves all node resource, build, and version details.
*/
func (a *Client) NodeInfoList(params *NodeInfoListParams, authInfo runtime.ClientAuthInfoWriter) (*NodeInfoListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodeInfoListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NodeInfoList",
		Method:             "GET",
		PathPattern:        "/v1.0/nodesinfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodeInfoListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodeInfoListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodeInfoListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NodeInfoUpdate updates node information by node ID

Update node resource, build, and version details for a given node ID.
*/
func (a *Client) NodeInfoUpdate(params *NodeInfoUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*NodeInfoUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodeInfoUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NodeInfoUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/nodesinfo/{nodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodeInfoUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodeInfoUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodeInfoUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetNodesInfo gets all node information for a project by project ID

Retrieves all node resource, build, and version details by project ID.
*/
func (a *Client) ProjectGetNodesInfo(params *ProjectGetNodesInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetNodesInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetNodesInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetNodesInfo",
		Method:             "GET",
		PathPattern:        "/v1.0/projects/{projectId}/nodesinfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetNodesInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetNodesInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetNodesInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
