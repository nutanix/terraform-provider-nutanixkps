// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "sherlock-terraform-provider-nutanixkps/generated/kps_cloud_api_swagger/models"
)

// NewQueryEventsV2Params creates a new QueryEventsV2Params object
// with the default values initialized.
func NewQueryEventsV2Params() *QueryEventsV2Params {
	var ()
	return &QueryEventsV2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryEventsV2ParamsWithTimeout creates a new QueryEventsV2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryEventsV2ParamsWithTimeout(timeout time.Duration) *QueryEventsV2Params {
	var ()
	return &QueryEventsV2Params{

		timeout: timeout,
	}
}

// NewQueryEventsV2ParamsWithContext creates a new QueryEventsV2Params object
// with the default values initialized, and the ability to set a context for a request
func NewQueryEventsV2ParamsWithContext(ctx context.Context) *QueryEventsV2Params {
	var ()
	return &QueryEventsV2Params{

		Context: ctx,
	}
}

// NewQueryEventsV2ParamsWithHTTPClient creates a new QueryEventsV2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryEventsV2ParamsWithHTTPClient(client *http.Client) *QueryEventsV2Params {
	var ()
	return &QueryEventsV2Params{
		HTTPClient: client,
	}
}

/*QueryEventsV2Params contains all the parameters to send to the API endpoint
for the query events v2 operation typically these are written to a http.Request
*/
type QueryEventsV2Params struct {

	/*Authorization
	  Format: Bearer <token>, with <token> from login API response.

	*/
	Authorization string
	/*Payload*/
	Payload *models.EventFilterV2
	/*PageIndex
	  0-based index of the page to fetch results.

	*/
	PageIndex *int64
	/*PageSize
	  Item count of each page.

	*/
	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query events v2 params
func (o *QueryEventsV2Params) WithTimeout(timeout time.Duration) *QueryEventsV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query events v2 params
func (o *QueryEventsV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query events v2 params
func (o *QueryEventsV2Params) WithContext(ctx context.Context) *QueryEventsV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query events v2 params
func (o *QueryEventsV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query events v2 params
func (o *QueryEventsV2Params) WithHTTPClient(client *http.Client) *QueryEventsV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query events v2 params
func (o *QueryEventsV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the query events v2 params
func (o *QueryEventsV2Params) WithAuthorization(authorization string) *QueryEventsV2Params {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the query events v2 params
func (o *QueryEventsV2Params) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithPayload adds the payload to the query events v2 params
func (o *QueryEventsV2Params) WithPayload(payload *models.EventFilterV2) *QueryEventsV2Params {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the query events v2 params
func (o *QueryEventsV2Params) SetPayload(payload *models.EventFilterV2) {
	o.Payload = payload
}

// WithPageIndex adds the pageIndex to the query events v2 params
func (o *QueryEventsV2Params) WithPageIndex(pageIndex *int64) *QueryEventsV2Params {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the query events v2 params
func (o *QueryEventsV2Params) SetPageIndex(pageIndex *int64) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the query events v2 params
func (o *QueryEventsV2Params) WithPageSize(pageSize *int64) *QueryEventsV2Params {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the query events v2 params
func (o *QueryEventsV2Params) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *QueryEventsV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Payload != nil {
		if err := r.SetBodyParam(o.Payload); err != nil {
			return err
		}
	}

	if o.PageIndex != nil {

		// query param pageIndex
		var qrPageIndex int64
		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatInt64(qrPageIndex)
		if qPageIndex != "" {
			if err := r.SetQueryParam("pageIndex", qPageIndex); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
