// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new event API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for event API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
QueryEventsV2 lists events matching the provided filter

Retrieves all events matching the filter for a tenant.
*/
func (a *Client) QueryEventsV2(params *QueryEventsV2Params, authInfo runtime.ClientAuthInfoWriter) (*QueryEventsV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryEventsV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryEventsV2",
		Method:             "POST",
		PathPattern:        "/v1.0/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueryEventsV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryEventsV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryEventsV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpsertEventsV2 upserts events used internally ntnx ignore

This will insert/update events for a tenant.
*/
func (a *Client) UpsertEventsV2(params *UpsertEventsV2Params, authInfo runtime.ClientAuthInfoWriter) (*UpsertEventsV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertEventsV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpsertEventsV2",
		Method:             "PUT",
		PathPattern:        "/v1.0/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpsertEventsV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpsertEventsV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpsertEventsV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
