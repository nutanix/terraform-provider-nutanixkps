// Code generated by go-swagger; DO NOT EDIT.

package proxy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new proxy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for proxy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProxyDeleteCall proxies HTTP API ntnx ignore

Proxy HTTP API over websocket to Service Domain.
The path parameter should be of the form:
http[s]/:svc_domain_id/path_of_http_service
The payload will be passed on to Service Domain.
*/
func (a *Client) ProxyDeleteCall(params *ProxyDeleteCallParams, authInfo runtime.ClientAuthInfoWriter) (*ProxyDeleteCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProxyDeleteCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProxyDeleteCall",
		Method:             "DELETE",
		PathPattern:        "/v1.0/proxy/*path",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProxyDeleteCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProxyDeleteCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProxyDeleteCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProxyGetCall proxies HTTP API ntnx ignore

Proxy HTTP API over websocket to Service Domain.
The path parameter should be of the form:
http[s]/:svc_domain_id/path_of_http_service
The payload will be passed on to Service Domain.
*/
func (a *Client) ProxyGetCall(params *ProxyGetCallParams, authInfo runtime.ClientAuthInfoWriter) (*ProxyGetCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProxyGetCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProxyGetCall",
		Method:             "GET",
		PathPattern:        "/v1.0/proxy/*path",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProxyGetCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProxyGetCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProxyGetCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProxyPostCall proxies HTTP API ntnx ignore

Proxy HTTP API over websocket to Service Domain.
The path parameter should be of the form:
http[s]/:svc_domain_id/path_of_http_service
The payload will be passed on to Service Domain.
*/
func (a *Client) ProxyPostCall(params *ProxyPostCallParams, authInfo runtime.ClientAuthInfoWriter) (*ProxyPostCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProxyPostCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProxyPostCall",
		Method:             "POST",
		PathPattern:        "/v1.0/proxy/*path",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProxyPostCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProxyPostCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProxyPostCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProxyPutCall proxies HTTP API ntnx ignore

Proxy HTTP API over websocket to Service Domain.
The path parameter should be of the form:
http[s]/:svc_domain_id/path_of_http_service
The payload will be passed on to Service Domain.
*/
func (a *Client) ProxyPutCall(params *ProxyPutCallParams, authInfo runtime.ClientAuthInfoWriter) (*ProxyPutCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProxyPutCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProxyPutCall",
		Method:             "PUT",
		PathPattern:        "/v1.0/proxy/*path",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProxyPutCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProxyPutCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProxyPutCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
