// Code generated by go-swagger; DO NOT EDIT.

package data_source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new data source API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data source API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DataSourceCreateArtifactV2 creates data source artifact according to its ID ntnx ignore

Create data source artifact according to its given ID {id}.
*/
func (a *Client) DataSourceCreateArtifactV2(params *DataSourceCreateArtifactV2Params, authInfo runtime.ClientAuthInfoWriter) (*DataSourceCreateArtifactV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceCreateArtifactV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceCreateArtifactV2",
		Method:             "POST",
		PathPattern:        "/v1.0/datasources/{id}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceCreateArtifactV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceCreateArtifactV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceCreateArtifactV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceCreateV2 creates a data source

Create a data source.
*/
func (a *Client) DataSourceCreateV2(params *DataSourceCreateV2Params, authInfo runtime.ClientAuthInfoWriter) (*DataSourceCreateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceCreateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceCreateV2",
		Method:             "POST",
		PathPattern:        "/v1.0/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceCreateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceCreateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceCreateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceDeleteV2 deletes a specific data source

Delete a data source with a given ID {id}.
*/
func (a *Client) DataSourceDeleteV2(params *DataSourceDeleteV2Params, authInfo runtime.ClientAuthInfoWriter) (*DataSourceDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceDeleteV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceDeleteV2",
		Method:             "DELETE",
		PathPattern:        "/v1.0/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceDeleteV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceDeleteV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceGetArtifactV2 gets data source artifacts according to its ID

Retrieves the artifacts after deploying the data source with the given ID {id}.
*/
func (a *Client) DataSourceGetArtifactV2(params *DataSourceGetArtifactV2Params, authInfo runtime.ClientAuthInfoWriter) (*DataSourceGetArtifactV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceGetArtifactV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceGetArtifactV2",
		Method:             "GET",
		PathPattern:        "/v1.0/datasources/{id}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceGetArtifactV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceGetArtifactV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceGetArtifactV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceGetV2 gets a data source according to its ID

Get a data source according to its given ID {id}.
*/
func (a *Client) DataSourceGetV2(params *DataSourceGetV2Params, authInfo runtime.ClientAuthInfoWriter) (*DataSourceGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceGetV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceGetV2",
		Method:             "GET",
		PathPattern:        "/v1.0/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceGetV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceGetV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceListV2 gets all data sources

Retrieves a list of all data sources.
*/
func (a *Client) DataSourceListV2(params *DataSourceListV2Params, authInfo runtime.ClientAuthInfoWriter) (*DataSourceListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceListV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceListV2",
		Method:             "GET",
		PathPattern:        "/v1.0/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceListV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceListV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataSourceUpdateV3 updates a data source

Update a data source. You cannot update or change the edge associated with the data source by using this call.
*/
func (a *Client) DataSourceUpdateV3(params *DataSourceUpdateV3Params, authInfo runtime.ClientAuthInfoWriter) (*DataSourceUpdateV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceUpdateV3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceUpdateV3",
		Method:             "PUT",
		PathPattern:        "/v1.0/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceUpdateV3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataSourceUpdateV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataSourceUpdateV3Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeGetDatasourcesV2 gets all data sources associated with an edge

Retrieves a list of all data sources associated with a edge by its ID {edgeId}.
*/
func (a *Client) EdgeGetDatasourcesV2(params *EdgeGetDatasourcesV2Params, authInfo runtime.ClientAuthInfoWriter) (*EdgeGetDatasourcesV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeGetDatasourcesV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EdgeGetDatasourcesV2",
		Method:             "GET",
		PathPattern:        "/v1.0/edges/{edgeId}/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EdgeGetDatasourcesV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeGetDatasourcesV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeGetDatasourcesV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetDatasourcesV2 gets data sources for a project ntnx ignore

Retrieves a list of all data sources associated with a project with a given ID {projectId}.
*/
func (a *Client) ProjectGetDatasourcesV2(params *ProjectGetDatasourcesV2Params, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetDatasourcesV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetDatasourcesV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetDatasourcesV2",
		Method:             "GET",
		PathPattern:        "/v1.0/projects/{projectId}/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetDatasourcesV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetDatasourcesV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetDatasourcesV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
