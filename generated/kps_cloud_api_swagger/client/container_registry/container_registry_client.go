// Code generated by go-swagger; DO NOT EDIT.

package container_registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new container registry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for container registry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ContainerRegistryCreateV2 creates a container registry profile

Creates a container registry profile.
*/
func (a *Client) ContainerRegistryCreateV2(params *ContainerRegistryCreateV2Params, authInfo runtime.ClientAuthInfoWriter) (*ContainerRegistryCreateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRegistryCreateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerRegistryCreateV2",
		Method:             "POST",
		PathPattern:        "/v1.0/containerregistries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerRegistryCreateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRegistryCreateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContainerRegistryCreateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContainerRegistryDeleteV2 deletes a container registry profile by profile ID

Deletes a container registry profile with a given ID {id}.
*/
func (a *Client) ContainerRegistryDeleteV2(params *ContainerRegistryDeleteV2Params, authInfo runtime.ClientAuthInfoWriter) (*ContainerRegistryDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRegistryDeleteV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerRegistryDeleteV2",
		Method:             "DELETE",
		PathPattern:        "/v1.0/containerregistries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerRegistryDeleteV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRegistryDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContainerRegistryDeleteV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContainerRegistryGetV2 gets a container registry profile by profile ID

Retrieves a container registry profile with a given ID {id}.
*/
func (a *Client) ContainerRegistryGetV2(params *ContainerRegistryGetV2Params, authInfo runtime.ClientAuthInfoWriter) (*ContainerRegistryGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRegistryGetV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerRegistryGetV2",
		Method:             "GET",
		PathPattern:        "/v1.0/containerregistries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerRegistryGetV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRegistryGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContainerRegistryGetV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContainerRegistryListV2 gets container registry profiles

Retrieves a list of all container registry profiles.
*/
func (a *Client) ContainerRegistryListV2(params *ContainerRegistryListV2Params, authInfo runtime.ClientAuthInfoWriter) (*ContainerRegistryListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRegistryListV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerRegistryListV2",
		Method:             "GET",
		PathPattern:        "/v1.0/containerregistries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerRegistryListV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRegistryListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContainerRegistryListV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContainerRegistryUpdateV2 updates a container registry profile

Updates a container registry profile.
*/
func (a *Client) ContainerRegistryUpdateV2(params *ContainerRegistryUpdateV2Params, authInfo runtime.ClientAuthInfoWriter) (*ContainerRegistryUpdateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRegistryUpdateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerRegistryUpdateV2",
		Method:             "PUT",
		PathPattern:        "/v1.0/containerregistries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerRegistryUpdateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRegistryUpdateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContainerRegistryUpdateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DockerProfileListV2 gets docker profiles ntnx ignore

Retrieves all DockerProfiles.
*/
func (a *Client) DockerProfileListV2(params *DockerProfileListV2Params, authInfo runtime.ClientAuthInfoWriter) (*DockerProfileListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDockerProfileListV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DockerProfileListV2",
		Method:             "GET",
		PathPattern:        "/v1.0/dockerprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DockerProfileListV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DockerProfileListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DockerProfileListV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetContainerRegistriesV2 gets container registry profiles by project ID

Retrieves a list of all container registry profiles with a given ID {projectId}
*/
func (a *Client) ProjectGetContainerRegistriesV2(params *ProjectGetContainerRegistriesV2Params, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetContainerRegistriesV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetContainerRegistriesV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetContainerRegistriesV2",
		Method:             "GET",
		PathPattern:        "/v1.0/projects/{projectId}/containerregistries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetContainerRegistriesV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetContainerRegistriesV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetContainerRegistriesV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProjectGetDockerProfilesV2 gets project docker profiles ntnx ignore

Retrieves all DockerProfiles for a project by project ID {projectId}.
*/
func (a *Client) ProjectGetDockerProfilesV2(params *ProjectGetDockerProfilesV2Params, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetDockerProfilesV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetDockerProfilesV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetDockerProfilesV2",
		Method:             "GET",
		PathPattern:        "/v1.0/projects/{projectId}/dockerprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetDockerProfilesV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetDockerProfilesV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetDockerProfilesV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
