// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new category API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for category API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CategoryCreateV2 creates a category

Create a category.
*/
func (a *Client) CategoryCreateV2(params *CategoryCreateV2Params, authInfo runtime.ClientAuthInfoWriter) (*CategoryCreateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryCreateV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryCreateV2",
		Method:             "POST",
		PathPattern:        "/v1.0/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryCreateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryCreateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryCreateV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryDeleteV2 deletes category

Delete the category with the given ID {id}.
*/
func (a *Client) CategoryDeleteV2(params *CategoryDeleteV2Params, authInfo runtime.ClientAuthInfoWriter) (*CategoryDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryDeleteV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryDeleteV2",
		Method:             "DELETE",
		PathPattern:        "/v1.0/categories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryDeleteV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryDeleteV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryGetV2 gets a category by its ID

Retrieves a category with the given ID {id}.
*/
func (a *Client) CategoryGetV2(params *CategoryGetV2Params, authInfo runtime.ClientAuthInfoWriter) (*CategoryGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryGetV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryGetV2",
		Method:             "GET",
		PathPattern:        "/v1.0/categories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryGetV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryGetV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryListV2 gets all categories

Retrieves a list of all categories.
*/
func (a *Client) CategoryListV2(params *CategoryListV2Params, authInfo runtime.ClientAuthInfoWriter) (*CategoryListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryListV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryListV2",
		Method:             "GET",
		PathPattern:        "/v1.0/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryListV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryListV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryUpdateV3 updates a category by its ID

Update a category with the given ID {id}.
*/
func (a *Client) CategoryUpdateV3(params *CategoryUpdateV3Params, authInfo runtime.ClientAuthInfoWriter) (*CategoryUpdateV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryUpdateV3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryUpdateV3",
		Method:             "PUT",
		PathPattern:        "/v1.0/categories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryUpdateV3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryUpdateV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryUpdateV3Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryUsageGet gets detailed usage of a category by its ID ntnx ignore

Retrieves detailed usage of a category with the given ID {id}.
*/
func (a *Client) CategoryUsageGet(params *CategoryUsageGetParams, authInfo runtime.ClientAuthInfoWriter) (*CategoryUsageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryUsageGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryUsageGet",
		Method:             "GET",
		PathPattern:        "/v1.0/categoriesusage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryUsageGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryUsageGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryUsageGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CategoryUsageList gets all categories usage ntnx ignore

Retrieves a list of all categories usage.
*/
func (a *Client) CategoryUsageList(params *CategoryUsageListParams, authInfo runtime.ClientAuthInfoWriter) (*CategoryUsageListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryUsageListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CategoryUsageList",
		Method:             "GET",
		PathPattern:        "/v1.0/categoriesusage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CategoryUsageListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryUsageListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CategoryUsageListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
