// Code generated by go-swagger; DO NOT EDIT.

package runtime_environment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new runtime environment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runtime environment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProjectGetRuntimeEnvironments gets runtime environments for a project by project ID

Retrieves all runtime environments for a project by a given project ID {projectId}.
*/
func (a *Client) ProjectGetRuntimeEnvironments(params *ProjectGetRuntimeEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetRuntimeEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetRuntimeEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetRuntimeEnvironments",
		Method:             "GET",
		PathPattern:        "/v1.0/projects/{projectId}/runtimeenvironments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetRuntimeEnvironmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetRuntimeEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetRuntimeEnvironmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RuntimeEnvironmentCreate creates a runtime environment for functions

Creates a runtime environment for functions.
*/
func (a *Client) RuntimeEnvironmentCreate(params *RuntimeEnvironmentCreateParams, authInfo runtime.ClientAuthInfoWriter) (*RuntimeEnvironmentCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRuntimeEnvironmentCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RuntimeEnvironmentCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/runtimeenvironments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RuntimeEnvironmentCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RuntimeEnvironmentCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RuntimeEnvironmentCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RuntimeEnvironmentDelete deletes a runtime environment by its ID

Delete runtime environment according to its given ID {id}.
*/
func (a *Client) RuntimeEnvironmentDelete(params *RuntimeEnvironmentDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*RuntimeEnvironmentDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRuntimeEnvironmentDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RuntimeEnvironmentDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/runtimeenvironments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RuntimeEnvironmentDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RuntimeEnvironmentDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RuntimeEnvironmentDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RuntimeEnvironmentGet gets a runtime environment by its ID

Retrieves a runtime environment with the given ID {id}.
*/
func (a *Client) RuntimeEnvironmentGet(params *RuntimeEnvironmentGetParams, authInfo runtime.ClientAuthInfoWriter) (*RuntimeEnvironmentGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRuntimeEnvironmentGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RuntimeEnvironmentGet",
		Method:             "GET",
		PathPattern:        "/v1.0/runtimeenvironments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RuntimeEnvironmentGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RuntimeEnvironmentGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RuntimeEnvironmentGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RuntimeEnvironmentList gets runtime environments

Retrieves all runtime environments.
*/
func (a *Client) RuntimeEnvironmentList(params *RuntimeEnvironmentListParams, authInfo runtime.ClientAuthInfoWriter) (*RuntimeEnvironmentListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRuntimeEnvironmentListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RuntimeEnvironmentList",
		Method:             "GET",
		PathPattern:        "/v1.0/runtimeenvironments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RuntimeEnvironmentListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RuntimeEnvironmentListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RuntimeEnvironmentListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RuntimeEnvironmentUpdate updates the runtime environment by its ID

Updates a function runtime environment by its given ID {id}.
*/
func (a *Client) RuntimeEnvironmentUpdate(params *RuntimeEnvironmentUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*RuntimeEnvironmentUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRuntimeEnvironmentUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RuntimeEnvironmentUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/runtimeenvironments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RuntimeEnvironmentUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RuntimeEnvironmentUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RuntimeEnvironmentUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
