// Code generated by go-swagger; DO NOT EDIT.

package auditlog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new auditlog API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auditlog API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AuditLogGetV2 gets audit log by request ID or date ntnx ignore

Retrieves the audit log entries for the given request ID or date.
*/
func (a *Client) AuditLogGetV2(params *AuditLogGetV2Params, authInfo runtime.ClientAuthInfoWriter) (*AuditLogGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditLogGetV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuditLogGetV2",
		Method:             "GET",
		PathPattern:        "/v1.0/auditlogs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuditLogGetV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditLogGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuditLogGetV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuditLogListV2 lists audit logs ntnx ignore

Retrieves all audit logs for a tenant.
*/
func (a *Client) AuditLogListV2(params *AuditLogListV2Params, authInfo runtime.ClientAuthInfoWriter) (*AuditLogListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditLogListV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuditLogListV2",
		Method:             "GET",
		PathPattern:        "/v1.0/auditlogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuditLogListV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditLogListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuditLogListV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InsertAuditLogV2 inserts audit logs used internally ntnx ignore

This will insert audit log for a tenant.
*/
func (a *Client) InsertAuditLogV2(params *InsertAuditLogV2Params, authInfo runtime.ClientAuthInfoWriter) (*InsertAuditLogV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertAuditLogV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InsertAuditLogV2",
		Method:             "PUT",
		PathPattern:        "/v1.0/auditlogsV2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertAuditLogV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InsertAuditLogV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InsertAuditLogV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QueryAuditLogsV2 lists audit logs matching the provided filter

Retrieves all audit logs matching the filter for a tenant.
*/
func (a *Client) QueryAuditLogsV2(params *QueryAuditLogsV2Params, authInfo runtime.ClientAuthInfoWriter) (*QueryAuditLogsV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryAuditLogsV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryAuditLogsV2",
		Method:             "POST",
		PathPattern:        "/v1.0/auditlogsV2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueryAuditLogsV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryAuditLogsV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryAuditLogsV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
