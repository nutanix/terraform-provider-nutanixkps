// Code generated by go-swagger; DO NOT EDIT.

package service_domain_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service domain info API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service domain info API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProjectGetServiceDomainsInfo gets all service domain information for a project as specified by project ID

Retrieves all service domain information for a project as specified by project ID.
*/
func (a *Client) ProjectGetServiceDomainsInfo(params *ProjectGetServiceDomainsInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectGetServiceDomainsInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGetServiceDomainsInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectGetServiceDomainsInfo",
		Method:             "GET",
		PathPattern:        "/v1.0/projects/{projectId}/servicedomainsinfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectGetServiceDomainsInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGetServiceDomainsInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectGetServiceDomainsInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainInfoGet gets all service domain information by service domain ID

Retrieves all service domain additional information for a given service domain ID.
*/
func (a *Client) ServiceDomainInfoGet(params *ServiceDomainInfoGetParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainInfoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainInfoGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainInfoGet",
		Method:             "GET",
		PathPattern:        "/v1.0/servicedomainsinfo/{svcDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainInfoGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainInfoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainInfoGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainInfoList gets service domain additional information like artifacts

Retrieves all service domain additional information.
*/
func (a *Client) ServiceDomainInfoList(params *ServiceDomainInfoListParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainInfoListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainInfoListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainInfoList",
		Method:             "GET",
		PathPattern:        "/v1.0/servicedomainsinfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainInfoListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainInfoListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainInfoListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceDomainInfoUpdate updates service domain information by service domain ID

Update service domain additional information for a given service domain ID.
*/
func (a *Client) ServiceDomainInfoUpdate(params *ServiceDomainInfoUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceDomainInfoUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDomainInfoUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceDomainInfoUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/servicedomainsinfo/{svcDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDomainInfoUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDomainInfoUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceDomainInfoUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
