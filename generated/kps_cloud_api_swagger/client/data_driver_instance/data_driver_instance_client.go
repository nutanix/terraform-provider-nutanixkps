// Code generated by go-swagger; DO NOT EDIT.

package data_driver_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new data driver instance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data driver instance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DataDriverInstanceCreate creates a data driver instance ntnx ignore

Create a data driver instance.
*/
func (a *Client) DataDriverInstanceCreate(params *DataDriverInstanceCreateParams, authInfo runtime.ClientAuthInfoWriter) (*DataDriverInstanceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataDriverInstanceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataDriverInstanceCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/datadriverinstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataDriverInstanceCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataDriverInstanceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataDriverInstanceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataDriverInstanceDelete deletes a specific data driver instance ntnx ignore

Delete a data driver instance with a given ID {id}.
*/
func (a *Client) DataDriverInstanceDelete(params *DataDriverInstanceDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*DataDriverInstanceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataDriverInstanceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataDriverInstanceDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/datadriverinstances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataDriverInstanceDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataDriverInstanceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataDriverInstanceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataDriverInstanceGet gets a data driver instance by ID ntnx ignore

Get a data driver instance according to its given ID {id}.
*/
func (a *Client) DataDriverInstanceGet(params *DataDriverInstanceGetParams, authInfo runtime.ClientAuthInfoWriter) (*DataDriverInstanceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataDriverInstanceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataDriverInstanceGet",
		Method:             "GET",
		PathPattern:        "/v1.0/datadriverinstances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataDriverInstanceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataDriverInstanceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataDriverInstanceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataDriverInstanceUpdate updates a data driver instance ntnx ignore

Update a data driver instance.
*/
func (a *Client) DataDriverInstanceUpdate(params *DataDriverInstanceUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*DataDriverInstanceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataDriverInstanceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataDriverInstanceUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/datadriverinstances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataDriverInstanceUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataDriverInstanceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataDriverInstanceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DataDriverInstancesList gets all data driver instances ntnx ignore

Retrieves a list of all data driver isntances.
*/
func (a *Client) DataDriverInstancesList(params *DataDriverInstancesListParams, authInfo runtime.ClientAuthInfoWriter) (*DataDriverInstancesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataDriverInstancesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataDriverInstancesList",
		Method:             "GET",
		PathPattern:        "/v1.0/datadriverinstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataDriverInstancesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DataDriverInstancesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DataDriverInstancesListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
