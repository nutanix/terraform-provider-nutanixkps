// Code generated by go-swagger; DO NOT EDIT.

package log_collector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new log collector API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for log collector API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
LogCollectorCreate creates a log collector

Create a log collector.
*/
func (a *Client) LogCollectorCreate(params *LogCollectorCreateParams, authInfo runtime.ClientAuthInfoWriter) (*LogCollectorCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogCollectorCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogCollectorCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/logs/collector",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogCollectorCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogCollectorCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogCollectorCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogCollectorDelete deletes a log collector

Delete a log collector by ID {id}.
*/
func (a *Client) LogCollectorDelete(params *LogCollectorDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*LogCollectorDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogCollectorDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogCollectorDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/logs/collector/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogCollectorDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogCollectorDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogCollectorDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogCollectorGet gets information about log collector

Get log collector information by ID {id}.
*/
func (a *Client) LogCollectorGet(params *LogCollectorGetParams, authInfo runtime.ClientAuthInfoWriter) (*LogCollectorGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogCollectorGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogCollectorGet",
		Method:             "GET",
		PathPattern:        "/v1.0/logs/collector/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogCollectorGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogCollectorGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogCollectorGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogCollectorStart starts a log collector

Start a log collector by ID {id}.
*/
func (a *Client) LogCollectorStart(params *LogCollectorStartParams, authInfo runtime.ClientAuthInfoWriter) (*LogCollectorStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogCollectorStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogCollectorStart",
		Method:             "POST",
		PathPattern:        "/v1.0/logs/collector/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogCollectorStartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogCollectorStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogCollectorStartDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogCollectorStop stops a log collector

Stop a log collector by ID {id}.
*/
func (a *Client) LogCollectorStop(params *LogCollectorStopParams, authInfo runtime.ClientAuthInfoWriter) (*LogCollectorStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogCollectorStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogCollectorStop",
		Method:             "POST",
		PathPattern:        "/v1.0/logs/collector/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogCollectorStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogCollectorStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogCollectorStopDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogCollectorUpdate updates a log collector

Update a log collector by ID {id}.
*/
func (a *Client) LogCollectorUpdate(params *LogCollectorUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*LogCollectorUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogCollectorUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogCollectorUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/logs/collector/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogCollectorUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogCollectorUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogCollectorUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LogCollectorsList gets configured log collectors in a system

Get log collectors information.
*/
func (a *Client) LogCollectorsList(params *LogCollectorsListParams, authInfo runtime.ClientAuthInfoWriter) (*LogCollectorsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogCollectorsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LogCollectorsList",
		Method:             "GET",
		PathPattern:        "/v1.0/logs/collector",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogCollectorsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogCollectorsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogCollectorsListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
