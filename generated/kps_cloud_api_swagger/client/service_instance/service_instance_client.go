// Code generated by go-swagger; DO NOT EDIT.

package service_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service instance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service instance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ServiceInstanceCreate creates a service instance

Create a Service Instance
*/
func (a *Client) ServiceInstanceCreate(params *ServiceInstanceCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceInstanceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceInstanceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceInstanceCreate",
		Method:             "POST",
		PathPattern:        "/v1.0/serviceinstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceInstanceCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceInstanceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceInstanceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceInstanceDelete deletes a service instance

Delete a Service Instance
*/
func (a *Client) ServiceInstanceDelete(params *ServiceInstanceDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceInstanceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceInstanceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceInstanceDelete",
		Method:             "DELETE",
		PathPattern:        "/v1.0/serviceinstances/{svcInstanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceInstanceDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceInstanceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceInstanceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceInstanceGet gets a service instance

Get a Service Instance
*/
func (a *Client) ServiceInstanceGet(params *ServiceInstanceGetParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceInstanceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceInstanceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceInstanceGet",
		Method:             "GET",
		PathPattern:        "/v1.0/serviceinstances/{svcInstanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceInstanceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceInstanceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceInstanceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceInstanceList lists service instances

List Service Instances
*/
func (a *Client) ServiceInstanceList(params *ServiceInstanceListParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceInstanceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceInstanceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceInstanceList",
		Method:             "GET",
		PathPattern:        "/v1.0/serviceinstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceInstanceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceInstanceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceInstanceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceInstanceStatusList gets the status of the service instance

Get the status of the Service Instance on Service Domains
*/
func (a *Client) ServiceInstanceStatusList(params *ServiceInstanceStatusListParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceInstanceStatusListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceInstanceStatusListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceInstanceStatusList",
		Method:             "GET",
		PathPattern:        "/v1.0/serviceinstances/{svcInstanceId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceInstanceStatusListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceInstanceStatusListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceInstanceStatusListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceInstanceUpdate updates a service instance

Update a Service Instance
*/
func (a *Client) ServiceInstanceUpdate(params *ServiceInstanceUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceInstanceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceInstanceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ServiceInstanceUpdate",
		Method:             "PUT",
		PathPattern:        "/v1.0/serviceinstances/{svcInstanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceInstanceUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceInstanceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceInstanceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
