// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ServiceInstanceStateType service instance state type
// swagger:model ServiceInstanceStateType
type ServiceInstanceStateType string

const (

	// ServiceInstanceStateTypePROVISIONING captures enum value "PROVISIONING"
	ServiceInstanceStateTypePROVISIONING ServiceInstanceStateType = "PROVISIONING"

	// ServiceInstanceStateTypePROVISIONED captures enum value "PROVISIONED"
	ServiceInstanceStateTypePROVISIONED ServiceInstanceStateType = "PROVISIONED"

	// ServiceInstanceStateTypeFAILED captures enum value "FAILED"
	ServiceInstanceStateTypeFAILED ServiceInstanceStateType = "FAILED"
)

// for schema
var serviceInstanceStateTypeEnum []interface{}

func init() {
	var res []ServiceInstanceStateType
	if err := json.Unmarshal([]byte(`["PROVISIONING","PROVISIONED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceInstanceStateTypeEnum = append(serviceInstanceStateTypeEnum, v)
	}
}

func (m ServiceInstanceStateType) validateServiceInstanceStateTypeEnum(path, location string, value ServiceInstanceStateType) error {
	if err := validate.Enum(path, location, value, serviceInstanceStateTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this service instance state type
func (m ServiceInstanceStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceInstanceStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
