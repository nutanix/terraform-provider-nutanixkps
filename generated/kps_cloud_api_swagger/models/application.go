// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Application Application - the contents of an Application
// swagger:model Application
type Application struct {

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// DataIfcEndpoints is a list of endpoints exposed to an application.
	DataIfcEndpoints []*DataIfcEndpoint `json:"dataIfcEndpoints"`

	// A description of the application.
	// Maximum length of 200 characters.
	Description string `json:"description,omitempty"`

	// Edges listed according to ID where the application is deployed.
	// Only relevant if the parent project EdgeSelectorType value is set to Explicit.
	EdgeIDs []string `json:"edgeIds"`

	// Select edges according to CategoryInfo.
	// Only relevant if the parent project EdgeSelectorType value is set to Category.
	EdgeSelectors []*CategoryInfo `json:"edgeSelectors"`

	// Edges to be excluded from the application deployment.
	ExcludeEdgeIDs []string `json:"excludeEdgeIds"`

	// ID of the entity
	// Maximum character length is 64 for project, category, and runtime environment,
	// 36 for other entity types.
	ID string `json:"id,omitempty"`

	// The application name.
	// Maximum length of 200 characters.
	// Required: true
	Name *string `json:"name"`

	// Only pre-pull images on service domains w/o doing an actual update.
	// Service domain which have not yet deployed the app will deploy
	// application like usual.
	// Update will commence once this flag is unset.
	OnlyPrePullOnUpdate bool `json:"onlyPrePullOnUpdate,omitempty"`

	// OriginSelectors is the list of CategoryInfo used as criteria
	// to feed data into applications.
	OriginSelectors []*CategoryInfo `json:"originSelectors"`

	// PackagingType vanilla or helm, nil = vanilla
	PackagingType string `json:"packagingType,omitempty"`

	// Parent project ID.
	// Not required (to maintain backward compatibility).
	// Required: true
	ProjectID *string `json:"projectId"`

	// State of this entity
	State string `json:"state,omitempty"`

	// ntnx:ignore
	// Required: true
	TenantID *string `json:"tenantId"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// ntnx:ignore
	// Version of entity, implemented using timestamp in nano seconds
	// This is set to float64 since JSON numbers are floating point
	// May lose precision due to truncation but should have milli-second precision
	Version float64 `json:"version,omitempty"`

	// The YAML content for the application.
	// Required: true
	YamlData *string `json:"yamlData"`

	// helm metadata
	HelmMetadata *HelmAppMetadata `json:"helmMetadata,omitempty"`
}

// Validate validates this application
func (m *Application) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataIfcEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeSelectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginSelectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYamlData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelmMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Application) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateDataIfcEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.DataIfcEndpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.DataIfcEndpoints); i++ {
		if swag.IsZero(m.DataIfcEndpoints[i]) { // not required
			continue
		}

		if m.DataIfcEndpoints[i] != nil {
			if err := m.DataIfcEndpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataIfcEndpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Application) validateEdgeSelectors(formats strfmt.Registry) error {

	if swag.IsZero(m.EdgeSelectors) { // not required
		return nil
	}

	for i := 0; i < len(m.EdgeSelectors); i++ {
		if swag.IsZero(m.EdgeSelectors[i]) { // not required
			continue
		}

		if m.EdgeSelectors[i] != nil {
			if err := m.EdgeSelectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("edgeSelectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Application) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateOriginSelectors(formats strfmt.Registry) error {

	if swag.IsZero(m.OriginSelectors) { // not required
		return nil
	}

	for i := 0; i < len(m.OriginSelectors); i++ {
		if swag.IsZero(m.OriginSelectors[i]) { // not required
			continue
		}

		if m.OriginSelectors[i] != nil {
			if err := m.OriginSelectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("originSelectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Application) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateYamlData(formats strfmt.Registry) error {

	if err := validate.Required("yamlData", "body", m.YamlData); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateHelmMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.HelmMetadata) { // not required
		return nil
	}

	if m.HelmMetadata != nil {
		if err := m.HelmMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helmMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Application) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Application) UnmarshalBinary(b []byte) error {
	var res Application
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
