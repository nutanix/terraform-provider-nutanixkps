// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceClass ServiceClass holds the definition including schemas for the managed service
// swagger:model ServiceClass
type ServiceClass struct {

	// Flag to specify if service binding is supported
	// Required: true
	Bindable *bool `json:"bindable"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// Minimum version of the Service Domain supporting this Service Class
	// Required: true
	MinSvcDomainVersion *string `json:"minSvcDomainVersion"`

	// name
	// Required: true
	Name *string `json:"name"`

	// Version of the Service Class type
	// Required: true
	SvcVersion *string `json:"svcVersion"`

	// Tag name can be repeated to hold multiple values.
	// Tags essential = yes/no and category = some category are required
	Tags []*ServiceClassTag `json:"tags"`

	// Type of the Service Class e.g Kafka
	// Required: true
	Type *string `json:"type"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// version
	Version float64 `json:"version,omitempty"`

	// schemas
	Schemas *ServiceClassSchemas `json:"schemas,omitempty"`

	// scope
	// Required: true
	Scope ServiceClassScopeType `json:"scope"`

	// state
	// Required: true
	State ServiceClassStateType `json:"state"`
}

// Validate validates this service class
func (m *ServiceClass) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBindable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSvcDomainVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceClass) validateBindable(formats strfmt.Registry) error {

	if err := validate.Required("bindable", "body", m.Bindable); err != nil {
		return err
	}

	return nil
}

func (m *ServiceClass) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceClass) validateMinSvcDomainVersion(formats strfmt.Registry) error {

	if err := validate.Required("minSvcDomainVersion", "body", m.MinSvcDomainVersion); err != nil {
		return err
	}

	return nil
}

func (m *ServiceClass) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ServiceClass) validateSvcVersion(formats strfmt.Registry) error {

	if err := validate.Required("svcVersion", "body", m.SvcVersion); err != nil {
		return err
	}

	return nil
}

func (m *ServiceClass) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceClass) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ServiceClass) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceClass) validateSchemas(formats strfmt.Registry) error {

	if swag.IsZero(m.Schemas) { // not required
		return nil
	}

	if m.Schemas != nil {
		if err := m.Schemas.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schemas")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceClass) validateScope(formats strfmt.Registry) error {

	if err := m.Scope.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scope")
		}
		return err
	}

	return nil
}

func (m *ServiceClass) validateState(formats strfmt.Registry) error {

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceClass) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceClass) UnmarshalBinary(b []byte) error {
	var res ServiceClass
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
