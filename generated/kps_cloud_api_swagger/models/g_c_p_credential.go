// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GCPCredential GCPCredential - Google Cloud Platform credentials.
// swagger:model GCPCredential
type GCPCredential struct {

	// Google service account key generated using the gcloud command
	// GCP service account key formats depend on when you use the gcloud command or the REST API/client library
	// to generate the key. The gcloud format is supported in this case.
	// Use the key generated using gcloud command as is, for all field values as follows.
	//
	// Type is set to 'service_account' when you generate the key using gcloud command
	// Required: true
	AuthProviderX509CertURL *string `json:"auth_provider_x509_cert_url"`

	// auth URI
	// Required: true
	AuthURI *string `json:"auth_uri"`

	// client email
	// Required: true
	ClientEmail *string `json:"client_email"`

	// client ID
	// Required: true
	ClientID *string `json:"client_id"`

	// client x509 cert URL
	// Required: true
	ClientX509CertURL *string `json:"client_x509_cert_url"`

	// private key
	// Required: true
	PrivateKey *string `json:"private_key"`

	// private key ID
	// Required: true
	PrivateKeyID *string `json:"private_key_id"`

	// The project resource is the base-level organizing entity in Google Cloud Platform
	// Specify the unique Id for the project in GCP
	// Required: true
	ProjectID *string `json:"project_id"`

	// token URI
	// Required: true
	TokenURI *string `json:"token_uri"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this g c p credential
func (m *GCPCredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthProviderX509CertURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientX509CertURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GCPCredential) validateAuthProviderX509CertURL(formats strfmt.Registry) error {

	if err := validate.Required("auth_provider_x509_cert_url", "body", m.AuthProviderX509CertURL); err != nil {
		return err
	}

	return nil
}

func (m *GCPCredential) validateAuthURI(formats strfmt.Registry) error {

	if err := validate.Required("auth_uri", "body", m.AuthURI); err != nil {
		return err
	}

	return nil
}

func (m *GCPCredential) validateClientEmail(formats strfmt.Registry) error {

	if err := validate.Required("client_email", "body", m.ClientEmail); err != nil {
		return err
	}

	return nil
}

func (m *GCPCredential) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("client_id", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *GCPCredential) validateClientX509CertURL(formats strfmt.Registry) error {

	if err := validate.Required("client_x509_cert_url", "body", m.ClientX509CertURL); err != nil {
		return err
	}

	return nil
}

func (m *GCPCredential) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("private_key", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *GCPCredential) validatePrivateKeyID(formats strfmt.Registry) error {

	if err := validate.Required("private_key_id", "body", m.PrivateKeyID); err != nil {
		return err
	}

	return nil
}

func (m *GCPCredential) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *GCPCredential) validateTokenURI(formats strfmt.Registry) error {

	if err := validate.Required("token_uri", "body", m.TokenURI); err != nil {
		return err
	}

	return nil
}

func (m *GCPCredential) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GCPCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GCPCredential) UnmarshalBinary(b []byte) error {
	var res GCPCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
