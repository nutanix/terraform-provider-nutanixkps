// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkloadOverview workload overview
// swagger:model WorkloadOverview
type WorkloadOverview struct {

	// detail
	Detail *Workload `json:"detail,omitempty"`

	// graph
	Graph *GraphConfig `json:"graph,omitempty"`

	// health
	Health *WorkloadHealth `json:"health,omitempty"`

	// inbound
	Inbound *DashboardResponse `json:"inbound,omitempty"`

	// outbound
	Outbound *DashboardResponse `json:"outbound,omitempty"`
}

// Validate validates this workload overview
func (m *WorkloadOverview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraph(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutbound(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkloadOverview) validateDetail(formats strfmt.Registry) error {

	if swag.IsZero(m.Detail) { // not required
		return nil
	}

	if m.Detail != nil {
		if err := m.Detail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detail")
			}
			return err
		}
	}

	return nil
}

func (m *WorkloadOverview) validateGraph(formats strfmt.Registry) error {

	if swag.IsZero(m.Graph) { // not required
		return nil
	}

	if m.Graph != nil {
		if err := m.Graph.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("graph")
			}
			return err
		}
	}

	return nil
}

func (m *WorkloadOverview) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *WorkloadOverview) validateInbound(formats strfmt.Registry) error {

	if swag.IsZero(m.Inbound) { // not required
		return nil
	}

	if m.Inbound != nil {
		if err := m.Inbound.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inbound")
			}
			return err
		}
	}

	return nil
}

func (m *WorkloadOverview) validateOutbound(formats strfmt.Registry) error {

	if swag.IsZero(m.Outbound) { // not required
		return nil
	}

	if m.Outbound != nil {
		if err := m.Outbound.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outbound")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkloadOverview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkloadOverview) UnmarshalBinary(b []byte) error {
	var res WorkloadOverview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
