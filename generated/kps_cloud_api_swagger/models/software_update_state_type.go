// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SoftwareUpdateStateType software update state type
// swagger:model SoftwareUpdateStateType
type SoftwareUpdateStateType string

const (

	// SoftwareUpdateStateTypeDOWNLOAD captures enum value "DOWNLOAD"
	SoftwareUpdateStateTypeDOWNLOAD SoftwareUpdateStateType = "DOWNLOAD"

	// SoftwareUpdateStateTypeDOWNLOADING captures enum value "DOWNLOADING"
	SoftwareUpdateStateTypeDOWNLOADING SoftwareUpdateStateType = "DOWNLOADING"

	// SoftwareUpdateStateTypeDOWNLOADCANCEL captures enum value "DOWNLOAD_CANCEL"
	SoftwareUpdateStateTypeDOWNLOADCANCEL SoftwareUpdateStateType = "DOWNLOAD_CANCEL"

	// SoftwareUpdateStateTypeDOWNLOADCANCELLED captures enum value "DOWNLOAD_CANCELLED"
	SoftwareUpdateStateTypeDOWNLOADCANCELLED SoftwareUpdateStateType = "DOWNLOAD_CANCELLED"

	// SoftwareUpdateStateTypeDOWNLOADFAILED captures enum value "DOWNLOAD_FAILED"
	SoftwareUpdateStateTypeDOWNLOADFAILED SoftwareUpdateStateType = "DOWNLOAD_FAILED"

	// SoftwareUpdateStateTypeDOWNLOADED captures enum value "DOWNLOADED"
	SoftwareUpdateStateTypeDOWNLOADED SoftwareUpdateStateType = "DOWNLOADED"

	// SoftwareUpdateStateTypeUPGRADE captures enum value "UPGRADE"
	SoftwareUpdateStateTypeUPGRADE SoftwareUpdateStateType = "UPGRADE"

	// SoftwareUpdateStateTypeUPGRADING captures enum value "UPGRADING"
	SoftwareUpdateStateTypeUPGRADING SoftwareUpdateStateType = "UPGRADING"

	// SoftwareUpdateStateTypeUPGRADEFAILED captures enum value "UPGRADE_FAILED"
	SoftwareUpdateStateTypeUPGRADEFAILED SoftwareUpdateStateType = "UPGRADE_FAILED"

	// SoftwareUpdateStateTypeUPGRADED captures enum value "UPGRADED"
	SoftwareUpdateStateTypeUPGRADED SoftwareUpdateStateType = "UPGRADED"
)

// for schema
var softwareUpdateStateTypeEnum []interface{}

func init() {
	var res []SoftwareUpdateStateType
	if err := json.Unmarshal([]byte(`["DOWNLOAD","DOWNLOADING","DOWNLOAD_CANCEL","DOWNLOAD_CANCELLED","DOWNLOAD_FAILED","DOWNLOADED","UPGRADE","UPGRADING","UPGRADE_FAILED","UPGRADED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		softwareUpdateStateTypeEnum = append(softwareUpdateStateTypeEnum, v)
	}
}

func (m SoftwareUpdateStateType) validateSoftwareUpdateStateTypeEnum(path, location string, value SoftwareUpdateStateType) error {
	if err := validate.Enum(path, location, value, softwareUpdateStateTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this software update state type
func (m SoftwareUpdateStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSoftwareUpdateStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
