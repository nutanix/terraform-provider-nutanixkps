// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MLModelVersionStatus m l model version status
// swagger:model MLModelVersionStatus
type MLModelVersionStatus struct {

	// Status of the ML model version
	// Enum: [Active Inactive]
	Status string `json:"Status,omitempty"`

	// ML model version number
	Version int64 `json:"Version,omitempty"`
}

// Validate validates this m l model version status
func (m *MLModelVersionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mLModelVersionStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mLModelVersionStatusTypeStatusPropEnum = append(mLModelVersionStatusTypeStatusPropEnum, v)
	}
}

const (

	// MLModelVersionStatusStatusActive captures enum value "Active"
	MLModelVersionStatusStatusActive string = "Active"

	// MLModelVersionStatusStatusInactive captures enum value "Inactive"
	MLModelVersionStatusStatusInactive string = "Inactive"
)

// prop value enum
func (m *MLModelVersionStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mLModelVersionStatusTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MLModelVersionStatus) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MLModelVersionStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MLModelVersionStatus) UnmarshalBinary(b []byte) error {
	var res MLModelVersionStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
