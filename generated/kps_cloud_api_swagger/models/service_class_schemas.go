// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ServiceClassSchemas ServiceClassSchemas holds the schema for the Service Class
// swagger:model ServiceClassSchemas
type ServiceClassSchemas struct {

	// svc binding
	SvcBinding *ServiceBindingSchema `json:"svcBinding,omitempty"`

	// svc instance
	SvcInstance *ServiceInstanceSchema `json:"svcInstance,omitempty"`
}

// Validate validates this service class schemas
func (m *ServiceClassSchemas) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSvcBinding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcInstance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceClassSchemas) validateSvcBinding(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcBinding) { // not required
		return nil
	}

	if m.SvcBinding != nil {
		if err := m.SvcBinding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svcBinding")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceClassSchemas) validateSvcInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcInstance) { // not required
		return nil
	}

	if m.SvcInstance != nil {
		if err := m.SvcInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svcInstance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceClassSchemas) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceClassSchemas) UnmarshalBinary(b []byte) error {
	var res ServiceClassSchemas
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
