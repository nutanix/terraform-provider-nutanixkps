// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditLogV2 AuditLogV2 is the object model for audit log
// swagger:model AuditLogV2
type AuditLogV2 struct {

	// modifier ID
	ModifierID string `json:"modifierID,omitempty"`

	// modifier name
	ModifierName string `json:"modifierName,omitempty"`

	// modifier role
	ModifierRole string `json:"modifierRole,omitempty"`

	// operation
	Operation string `json:"operation,omitempty"`

	// operation type
	OperationType string `json:"operationType,omitempty"`

	// payload
	Payload string `json:"payload,omitempty"`

	// project ID
	ProjectID string `json:"projectID,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// resource ID
	ResourceID string `json:"resourceID,omitempty"`

	// resource name
	ResourceName string `json:"resourceName,omitempty"`

	// resource type
	ResourceType string `json:"resourceType,omitempty"`

	// scope
	Scope string `json:"scope,omitempty"`

	// service domain ID
	ServiceDomainID string `json:"serviceDomainID,omitempty"`

	// service domain name
	ServiceDomainName string `json:"serviceDomainName,omitempty"`

	// tenant ID
	TenantID string `json:"tenantID,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this audit log v2
func (m *AuditLogV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditLogV2) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditLogV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditLogV2) UnmarshalBinary(b []byte) error {
	var res AuditLogV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
