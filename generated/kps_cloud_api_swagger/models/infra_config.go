// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfraConfig InfraConfig is the infra config information
// swagger:model InfraConfig
type InfraConfig struct {

	// cluster config
	// Required: true
	ClusterConfig *ClusterConfig `json:"clusterConfig"`

	// k8s config
	// Required: true
	K8sConfig *K8sConfig `json:"k8sConfig"`
}

// Validate validates this infra config
func (m *InfraConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateK8sConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraConfig) validateClusterConfig(formats strfmt.Registry) error {

	if err := validate.Required("clusterConfig", "body", m.ClusterConfig); err != nil {
		return err
	}

	if m.ClusterConfig != nil {
		if err := m.ClusterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *InfraConfig) validateK8sConfig(formats strfmt.Registry) error {

	if err := validate.Required("k8sConfig", "body", m.K8sConfig); err != nil {
		return err
	}

	if m.K8sConfig != nil {
		if err := m.K8sConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8sConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraConfig) UnmarshalBinary(b []byte) error {
	var res InfraConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
