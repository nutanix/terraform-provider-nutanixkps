// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkloadListItem WorkloadListItem has the necessary information to display the console workload list
// swagger:model WorkloadListItem
type WorkloadListItem struct {

	// Define if Pods related to this Workload has the label App
	// Required: true
	AppLabel *bool `json:"appLabel"`

	// Creation timestamp (in RFC3339 format)
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// Define if Pods related to this Workload has an IstioSidecar deployed
	// Required: true
	IstioSidecar *bool `json:"istioSidecar"`

	// Workload labels
	Labels map[string]string `json:"labels,omitempty"`

	// Name of the workload
	// Required: true
	Name *string `json:"name"`

	// Number of current workload pods
	// Required: true
	PodCount *int64 `json:"podCount"`

	// Kubernetes ResourceVersion
	// Required: true
	ResourceVersion *string `json:"resourceVersion"`

	// Type of the workload
	// Required: true
	Type *string `json:"type"`

	// Define if Pods related to this Workload has the label Version
	// Required: true
	VersionLabel *bool `json:"versionLabel"`

	// additional detail sample
	AdditionalDetailSample *AdditionalItem `json:"additionalDetailSample,omitempty"`
}

// Validate validates this workload list item
func (m *WorkloadListItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIstioSidecar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalDetailSample(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkloadListItem) validateAppLabel(formats strfmt.Registry) error {

	if err := validate.Required("appLabel", "body", m.AppLabel); err != nil {
		return err
	}

	return nil
}

func (m *WorkloadListItem) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *WorkloadListItem) validateIstioSidecar(formats strfmt.Registry) error {

	if err := validate.Required("istioSidecar", "body", m.IstioSidecar); err != nil {
		return err
	}

	return nil
}

func (m *WorkloadListItem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *WorkloadListItem) validatePodCount(formats strfmt.Registry) error {

	if err := validate.Required("podCount", "body", m.PodCount); err != nil {
		return err
	}

	return nil
}

func (m *WorkloadListItem) validateResourceVersion(formats strfmt.Registry) error {

	if err := validate.Required("resourceVersion", "body", m.ResourceVersion); err != nil {
		return err
	}

	return nil
}

func (m *WorkloadListItem) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *WorkloadListItem) validateVersionLabel(formats strfmt.Registry) error {

	if err := validate.Required("versionLabel", "body", m.VersionLabel); err != nil {
		return err
	}

	return nil
}

func (m *WorkloadListItem) validateAdditionalDetailSample(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalDetailSample) { // not required
		return nil
	}

	if m.AdditionalDetailSample != nil {
		if err := m.AdditionalDetailSample.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalDetailSample")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkloadListItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkloadListItem) UnmarshalBinary(b []byte) error {
	var res WorkloadListItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
