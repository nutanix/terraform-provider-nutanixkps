// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPServiceProxyUpdateParamPayload HTTPServiceProxyUpdateParamPayload holds the parameters for updating HTTP Service Proxy
// swagger:model HTTPServiceProxyUpdateParamPayload
type HTTPServiceProxyUpdateParamPayload struct {

	// By default, a rewrite rule will be put in place to rewrite service URL path base to /
	// set this flag to true to retain the URL path base.
	DisableRewriteRules bool `json:"disableRewriteRules,omitempty"`

	// Duration of the http service proxy.
	Duration string `json:"duration,omitempty"`

	// JSON object representation of HTTP headers to overwrite.
	// May be useful for (https) endpoint that require
	// specific Host field for example.
	Headers string `json:"headers,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Whether to setup DNS entry for this service.
	// Default is false. Might be useful for services
	// that do not work with URL path.
	// However, bear in mind it may take several minutes
	// for the DNS name to propagate/resolve.
	// Required: true
	SetupDNS *bool `json:"setupDNS"`

	// Whether to skip TLS certification verification for endpoint.
	// Only relevant when TLSEndpoint is true.
	// This should be set to true if the endpoint is using a self-signed certificate.
	// Required: true
	SkipCertVerification *bool `json:"skipCertVerification"`

	// Whether the endpoint to proxy to is a TLS endpoint.
	// Required: true
	TLSEndpoint *bool `json:"tlsEndpoint"`
}

// Validate validates this HTTP service proxy update param payload
func (m *HTTPServiceProxyUpdateParamPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSetupDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkipCertVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPServiceProxyUpdateParamPayload) validateSetupDNS(formats strfmt.Registry) error {

	if err := validate.Required("setupDNS", "body", m.SetupDNS); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyUpdateParamPayload) validateSkipCertVerification(formats strfmt.Registry) error {

	if err := validate.Required("skipCertVerification", "body", m.SkipCertVerification); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyUpdateParamPayload) validateTLSEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("tlsEndpoint", "body", m.TLSEndpoint); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPServiceProxyUpdateParamPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPServiceProxyUpdateParamPayload) UnmarshalBinary(b []byte) error {
	var res HTTPServiceProxyUpdateParamPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
