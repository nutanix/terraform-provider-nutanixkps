// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgeCertLockParam EdgeCertLockParam describes payload for SetEdgeCertLock operation
// swagger:model EdgeCertLockParam
type EdgeCertLockParam struct {

	// If Locked is false and DurationSeconds is greater than 0,
	// then first unlock the edge certification,
	// then auto lock it after DurationSeconds seconds.
	DurationSeconds int64 `json:"durationSeconds,omitempty"`

	// edge cluster ID
	// Required: true
	EdgeClusterID *string `json:"edgeClusterId"`

	// locked
	// Required: true
	Locked *bool `json:"locked"`
}

// Validate validates this edge cert lock param
func (m *EdgeCertLockParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEdgeClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocked(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeCertLockParam) validateEdgeClusterID(formats strfmt.Registry) error {

	if err := validate.Required("edgeClusterId", "body", m.EdgeClusterID); err != nil {
		return err
	}

	return nil
}

func (m *EdgeCertLockParam) validateLocked(formats strfmt.Registry) error {

	if err := validate.Required("locked", "body", m.Locked); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeCertLockParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeCertLockParam) UnmarshalBinary(b []byte) error {
	var res EdgeCertLockParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
