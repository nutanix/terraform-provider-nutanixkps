// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDomainProfile ServiceDomainProfile is the object model for service domain profiles.
// swagger:model ServiceDomainProfile
type ServiceDomainProfile struct {

	// a i inferencing service
	AIInferencingService *AIInferencingServiceProfile `json:"AIInferencingService,omitempty"`

	// enable SSH
	EnableSSH bool `json:"enableSSH,omitempty"`

	// ingress type
	// Enum: [Traefik NGINX]
	IngressType string `json:"ingressType,omitempty"`

	// privileged
	Privileged bool `json:"privileged,omitempty"`
}

// Validate validates this service domain profile
func (m *ServiceDomainProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAIInferencingService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDomainProfile) validateAIInferencingService(formats strfmt.Registry) error {

	if swag.IsZero(m.AIInferencingService) { // not required
		return nil
	}

	if m.AIInferencingService != nil {
		if err := m.AIInferencingService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AIInferencingService")
			}
			return err
		}
	}

	return nil
}

var serviceDomainProfileTypeIngressTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Traefik","NGINX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDomainProfileTypeIngressTypePropEnum = append(serviceDomainProfileTypeIngressTypePropEnum, v)
	}
}

const (

	// ServiceDomainProfileIngressTypeTraefik captures enum value "Traefik"
	ServiceDomainProfileIngressTypeTraefik string = "Traefik"

	// ServiceDomainProfileIngressTypeNGINX captures enum value "NGINX"
	ServiceDomainProfileIngressTypeNGINX string = "NGINX"
)

// prop value enum
func (m *ServiceDomainProfile) validateIngressTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDomainProfileTypeIngressTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDomainProfile) validateIngressType(formats strfmt.Registry) error {

	if swag.IsZero(m.IngressType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIngressTypeEnum("ingressType", "body", m.IngressType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDomainProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDomainProfile) UnmarshalBinary(b []byte) error {
	var res ServiceDomainProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
