// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataSourceV2 DataSourceV2 is object model for data source
//
// A data source represents a logical IoT Sensor or Gateway.
// Note: This grouping is a construct to store meta information
// for sensors. Defining a data source does not cause
// the topic message to flow into the Karbon Platform Services Service Domain (for example, NATS or Kafka).
// You must create a data pipeline to enable that flow.
// swagger:model DataSourceV2
type DataSourceV2 struct {

	// Type of authentication used by sensor
	// Required: true
	// Enum: [CERTIFICATE PASSWORD TOKEN]
	AuthType *string `json:"authType"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// ID of the edge this entity belongs to
	// Required: true
	EdgeID *string `json:"edgeId"`

	// User defined fields to extract data from the topic payload.
	// Required: true
	FieldsV2 []*DataSourceFieldInfoV2 `json:"fields"`

	// ID of the entity
	// Maximum character length is 64 for project, category, and runtime environment,
	// 36 for other entity types.
	ID string `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// Sensor protocol
	// Required: true
	// Enum: [MQTT RTSP GIGEVISION OTHER DATAINTERFACE]
	Protocol *string `json:"protocol"`

	// A list of DataSourceFieldSelector users assigned to the data source.
	// Allows a user to use Category selectors to identify the
	// data pipeline source.
	// Selectors with different category IDs are combined with the AND operator,
	// while selectors with the same category ID are combined with the OR operator.
	// Required: true
	Selectors []*DataSourceFieldSelector `json:"selectors"`

	// ntnx:ignore
	// Required: true
	TenantID *string `json:"tenantId"`

	// Type of data source.
	// Sensor or Gateway
	// Required: true
	// Enum: [Sensor Gateway]
	Type *string `json:"type"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// ntnx:ignore
	// Version of entity, implemented using timestamp in nano seconds
	// This is set to float64 since JSON numbers are floating point
	// May lose precision due to truncation but should have milli-second precision
	Version float64 `json:"version,omitempty"`

	// ifc info
	IfcInfo *DataSourceIfcInfo `json:"ifcInfo,omitempty"`
}

// Validate validates this data source v2
func (m *DataSourceV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldsV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIfcInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataSourceV2TypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CERTIFICATE","PASSWORD","TOKEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceV2TypeAuthTypePropEnum = append(dataSourceV2TypeAuthTypePropEnum, v)
	}
}

const (

	// DataSourceV2AuthTypeCERTIFICATE captures enum value "CERTIFICATE"
	DataSourceV2AuthTypeCERTIFICATE string = "CERTIFICATE"

	// DataSourceV2AuthTypePASSWORD captures enum value "PASSWORD"
	DataSourceV2AuthTypePASSWORD string = "PASSWORD"

	// DataSourceV2AuthTypeTOKEN captures enum value "TOKEN"
	DataSourceV2AuthTypeTOKEN string = "TOKEN"
)

// prop value enum
func (m *DataSourceV2) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataSourceV2TypeAuthTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataSourceV2) validateAuthType(formats strfmt.Registry) error {

	if err := validate.Required("authType", "body", m.AuthType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

func (m *DataSourceV2) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataSourceV2) validateEdgeID(formats strfmt.Registry) error {

	if err := validate.Required("edgeId", "body", m.EdgeID); err != nil {
		return err
	}

	return nil
}

func (m *DataSourceV2) validateFieldsV2(formats strfmt.Registry) error {

	if err := validate.Required("fields", "body", m.FieldsV2); err != nil {
		return err
	}

	for i := 0; i < len(m.FieldsV2); i++ {
		if swag.IsZero(m.FieldsV2[i]) { // not required
			continue
		}

		if m.FieldsV2[i] != nil {
			if err := m.FieldsV2[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataSourceV2) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var dataSourceV2TypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MQTT","RTSP","GIGEVISION","OTHER","DATAINTERFACE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceV2TypeProtocolPropEnum = append(dataSourceV2TypeProtocolPropEnum, v)
	}
}

const (

	// DataSourceV2ProtocolMQTT captures enum value "MQTT"
	DataSourceV2ProtocolMQTT string = "MQTT"

	// DataSourceV2ProtocolRTSP captures enum value "RTSP"
	DataSourceV2ProtocolRTSP string = "RTSP"

	// DataSourceV2ProtocolGIGEVISION captures enum value "GIGEVISION"
	DataSourceV2ProtocolGIGEVISION string = "GIGEVISION"

	// DataSourceV2ProtocolOTHER captures enum value "OTHER"
	DataSourceV2ProtocolOTHER string = "OTHER"

	// DataSourceV2ProtocolDATAINTERFACE captures enum value "DATAINTERFACE"
	DataSourceV2ProtocolDATAINTERFACE string = "DATAINTERFACE"
)

// prop value enum
func (m *DataSourceV2) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataSourceV2TypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataSourceV2) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *DataSourceV2) validateSelectors(formats strfmt.Registry) error {

	if err := validate.Required("selectors", "body", m.Selectors); err != nil {
		return err
	}

	for i := 0; i < len(m.Selectors); i++ {
		if swag.IsZero(m.Selectors[i]) { // not required
			continue
		}

		if m.Selectors[i] != nil {
			if err := m.Selectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("selectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataSourceV2) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

var dataSourceV2TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sensor","Gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceV2TypeTypePropEnum = append(dataSourceV2TypeTypePropEnum, v)
	}
}

const (

	// DataSourceV2TypeSensor captures enum value "Sensor"
	DataSourceV2TypeSensor string = "Sensor"

	// DataSourceV2TypeGateway captures enum value "Gateway"
	DataSourceV2TypeGateway string = "Gateway"
)

// prop value enum
func (m *DataSourceV2) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataSourceV2TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataSourceV2) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DataSourceV2) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataSourceV2) validateIfcInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.IfcInfo) { // not required
		return nil
	}

	if m.IfcInfo != nil {
		if err := m.IfcInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ifcInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataSourceV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSourceV2) UnmarshalBinary(b []byte) error {
	var res DataSourceV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
