// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// LogCollectorStatus log collector status
// swagger:model LogCollectorStatus
type LogCollectorStatus string

const (

	// LogCollectorStatusACTIVE captures enum value "ACTIVE"
	LogCollectorStatusACTIVE LogCollectorStatus = "ACTIVE"

	// LogCollectorStatusSTOPPED captures enum value "STOPPED"
	LogCollectorStatusSTOPPED LogCollectorStatus = "STOPPED"

	// LogCollectorStatusFAILED captures enum value "FAILED"
	LogCollectorStatusFAILED LogCollectorStatus = "FAILED"
)

// for schema
var logCollectorStatusEnum []interface{}

func init() {
	var res []LogCollectorStatus
	if err := json.Unmarshal([]byte(`["ACTIVE","STOPPED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logCollectorStatusEnum = append(logCollectorStatusEnum, v)
	}
}

func (m LogCollectorStatus) validateLogCollectorStatusEnum(path, location string, value LogCollectorStatus) error {
	if err := validate.Enum(path, location, value, logCollectorStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this log collector status
func (m LogCollectorStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogCollectorStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
