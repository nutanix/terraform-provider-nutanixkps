// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExecuteEdgeUpgradeData ExecuteEdgeUpgradeData is object model for ExecuteEdgeUpgrades with data
// swagger:model ExecuteEdgeUpgradeData
type ExecuteEdgeUpgradeData struct {

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Docker login command
	// Required: true
	DockerLogin *string `json:"dockerLogin"`

	// EdgeID. ID of the specific edge to upgrade.
	// Required: true
	EdgeID *string `json:"edgeID"`

	// ID of the entity
	// Maximum character length is 64 for project, category, and runtime environment,
	// 36 for other entity types.
	ID string `json:"id,omitempty"`

	// Release for execute edge upgrade.
	// Required: true
	Release *string `json:"release"`

	// ntnx:ignore
	// Required: true
	TenantID *string `json:"tenantId"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// Data for the execute edge upgrade.
	// Required: true
	// Format: byte
	UpgradeData *strfmt.Base64 `json:"data"`

	// URL for the edge to get the upgrade from
	// Required: true
	UpgradeURL *string `json:"upgradeURL"`

	// ntnx:ignore
	// Version of entity, implemented using timestamp in nano seconds
	// This is set to float64 since JSON numbers are floating point
	// May lose precision due to truncation but should have milli-second precision
	Version float64 `json:"version,omitempty"`
}

// Validate validates this execute edge upgrade data
func (m *ExecuteEdgeUpgradeData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDockerLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecuteEdgeUpgradeData) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecuteEdgeUpgradeData) validateDockerLogin(formats strfmt.Registry) error {

	if err := validate.Required("dockerLogin", "body", m.DockerLogin); err != nil {
		return err
	}

	return nil
}

func (m *ExecuteEdgeUpgradeData) validateEdgeID(formats strfmt.Registry) error {

	if err := validate.Required("edgeID", "body", m.EdgeID); err != nil {
		return err
	}

	return nil
}

func (m *ExecuteEdgeUpgradeData) validateRelease(formats strfmt.Registry) error {

	if err := validate.Required("release", "body", m.Release); err != nil {
		return err
	}

	return nil
}

func (m *ExecuteEdgeUpgradeData) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *ExecuteEdgeUpgradeData) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecuteEdgeUpgradeData) validateUpgradeData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.UpgradeData); err != nil {
		return err
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *ExecuteEdgeUpgradeData) validateUpgradeURL(formats strfmt.Registry) error {

	if err := validate.Required("upgradeURL", "body", m.UpgradeURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecuteEdgeUpgradeData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecuteEdgeUpgradeData) UnmarshalBinary(b []byte) error {
	var res ExecuteEdgeUpgradeData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
