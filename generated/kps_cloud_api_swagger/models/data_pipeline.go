// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataPipeline DataPipeline is object model for data pipeline
//
// DataPipelines are fundamental building blocks for Karbon Platform Services data pipeline.
// swagger:model DataPipeline
type DataPipeline struct {

	// AWS region. Required if cloudType == AWS
	// Enum: [us-east-2 us-east-1 us-west-1 us-west-2 ap-northeast-1 ap-northeast-2 ap-northeast-3 ap-south-1 ap-southeast-1 ap-southeast-2 ca-central-1 cn-north-1 cn-northwest-1 eu-central-1 eu-west-1 eu-west-2 eu-west-3 sa-east-1]
	AWSCloudRegion string `json:"awsCloudRegion,omitempty"`

	// Type of the DataStream at AWS Cloud.
	// Required if cloudType == AWS
	// Enum: [Kinesis SQS S3 DynamoDB]
	AWSStreamType string `json:"awsStreamType,omitempty"`

	// Type of the DataStream at Azure Cloud.
	// Required if cloudType == Azure
	// Enum: [Blob]
	AZStreamType string `json:"azStreamType,omitempty"`

	// CloudCreds id.
	// Required if destination == Cloud
	CloudCredsID string `json:"cloudCredsId,omitempty"`

	// Cloud type, required if destination == Cloud
	// Enum: [AWS GCP Azure]
	CloudType string `json:"cloudType,omitempty"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Data Ifc endpoints connected to this datastream
	DataIfcEndpoints []*DataIfcEndpoint `json:"DataIfcEndpoints"`

	// Retention policy for this DataStream.
	// Multiple RetentionInfo are combined using AND semantics.
	// For example, retain data for 1 month AND up to 2 TB of data.
	// Required: true
	DataRetention []*RetentionInfo `json:"dataRetention"`

	// Data type of the DataStream.
	// For example, Temperature, Pressure, Image, Multiple, etc.
	// Required: true
	DataType *string `json:"dataType"`

	// The description of the DataStream
	Description string `json:"description,omitempty"`

	// Destination of the DataStream.
	// Either Edge or Cloud or DataInterface.
	// Required: true
	// Enum: [Edge Cloud DataInterface]
	Destination *string `json:"destination"`

	// Type of the DataStream at Edge.
	// Required if destination == Edge
	// Enum: [Kafka ElasticSearch MQTT DataDriver None]
	EdgeStreamType string `json:"edgeStreamType,omitempty"`

	// Whether to turn sampling on.
	// If true, then samplingInterval should be set as well.
	// Required: true
	EnableSampling *bool `json:"enableSampling"`

	// End point of datastream.
	// User specifies the endpoint.
	EndPoint string `json:"endPoint,omitempty"`

	// Endpoint URI
	// Derived from existing fields
	// required false
	EndPointURI string `json:"endPointURI,omitempty"`

	// GCP region. Required if cloudType == GCP
	// Enum: [northamerica-northeast1 us-central1 us-west1 us-east4 us-east1 southamerica-east1 europe-west1 europe-west2 europe-west3 europe-west4 asia-south1 asia-southeast1 asia-east1 asia-northeast1 australia-southeast1]
	GCPCloudRegion string `json:"gcpCloudRegion,omitempty"`

	// Type of the DataStream at GCP Cloud.
	// Required if cloudType == GCP
	// Enum: [PubSub CloudDatastore CloudSQL CloudStorage]
	GCPStreamType string `json:"gcpStreamType,omitempty"`

	// ID of the entity
	// Maximum character length is 64 for project, category, and runtime environment,
	// 36 for other entity types.
	ID string `json:"id,omitempty"`

	// Name of the DataStream.
	// This is the published output (Kafka topic) name.
	// Required: true
	Name *string `json:"name"`

	// The origin of the DataStream.
	// Either 'Data Source' or 'Data Stream'
	// Required: true
	// Enum: [Data Source Data Stream]
	Origin *string `json:"origin"`

	// If origin == 'Data Stream', then originId
	// can be used in place of originSelectors
	// to specify the origin data stream ID if the origin data stream is unique.
	OriginID string `json:"originId,omitempty"`

	// A list of CategoryInfo used as criteria
	// to filter sources applicable to this DataStream.
	// Required: true
	OriginSelectors []*CategoryInfo `json:"originSelectors"`

	// ID of parent project.
	// This should be required, but is not marked as such due to backward compatibility.
	ProjectID string `json:"projectId,omitempty"`

	// Sampling interval in seconds.
	// The sampling interval applies to each mqtt/kafka topic separately.
	SamplingInterval float64 `json:"samplingInterval,omitempty"`

	// Current size of the DataStream output in GB.
	// Required: true
	Size *float64 `json:"size"`

	// State of this entity
	State string `json:"state,omitempty"`

	// ntnx:ignore
	// Required: true
	TenantID *string `json:"tenantId"`

	// List of transformations (together with their args)
	// to apply to the origin data
	// to produce the destination data.
	// Could be empty if no transformation required.
	// Each entry is the id of the transformation Script to apply to input from origin
	// to produce output to destination.
	// Required: true
	TransformationArgsList []*TransformationArgs `json:"transformationArgsList"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// ntnx:ignore
	// Version of entity, implemented using timestamp in nano seconds
	// This is set to float64 since JSON numbers are floating point
	// May lose precision due to truncation but should have milli-second precision
	Version float64 `json:"version,omitempty"`

	// out data ifc
	OutDataIfc *DataSource `json:"outDataIfc,omitempty"`
}

// Validate validates this data pipeline
func (m *DataPipeline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAWSCloudRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAWSStreamType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAZStreamType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataIfcEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataRetention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeStreamType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableSampling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGCPCloudRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGCPStreamType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginSelectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransformationArgsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutDataIfc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataPipelineTypeAWSCloudRegionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["us-east-2","us-east-1","us-west-1","us-west-2","ap-northeast-1","ap-northeast-2","ap-northeast-3","ap-south-1","ap-southeast-1","ap-southeast-2","ca-central-1","cn-north-1","cn-northwest-1","eu-central-1","eu-west-1","eu-west-2","eu-west-3","sa-east-1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataPipelineTypeAWSCloudRegionPropEnum = append(dataPipelineTypeAWSCloudRegionPropEnum, v)
	}
}

const (

	// DataPipelineAWSCloudRegionUsEast2 captures enum value "us-east-2"
	DataPipelineAWSCloudRegionUsEast2 string = "us-east-2"

	// DataPipelineAWSCloudRegionUsEast1 captures enum value "us-east-1"
	DataPipelineAWSCloudRegionUsEast1 string = "us-east-1"

	// DataPipelineAWSCloudRegionUsWest1 captures enum value "us-west-1"
	DataPipelineAWSCloudRegionUsWest1 string = "us-west-1"

	// DataPipelineAWSCloudRegionUsWest2 captures enum value "us-west-2"
	DataPipelineAWSCloudRegionUsWest2 string = "us-west-2"

	// DataPipelineAWSCloudRegionApNortheast1 captures enum value "ap-northeast-1"
	DataPipelineAWSCloudRegionApNortheast1 string = "ap-northeast-1"

	// DataPipelineAWSCloudRegionApNortheast2 captures enum value "ap-northeast-2"
	DataPipelineAWSCloudRegionApNortheast2 string = "ap-northeast-2"

	// DataPipelineAWSCloudRegionApNortheast3 captures enum value "ap-northeast-3"
	DataPipelineAWSCloudRegionApNortheast3 string = "ap-northeast-3"

	// DataPipelineAWSCloudRegionApSouth1 captures enum value "ap-south-1"
	DataPipelineAWSCloudRegionApSouth1 string = "ap-south-1"

	// DataPipelineAWSCloudRegionApSoutheast1 captures enum value "ap-southeast-1"
	DataPipelineAWSCloudRegionApSoutheast1 string = "ap-southeast-1"

	// DataPipelineAWSCloudRegionApSoutheast2 captures enum value "ap-southeast-2"
	DataPipelineAWSCloudRegionApSoutheast2 string = "ap-southeast-2"

	// DataPipelineAWSCloudRegionCaCentral1 captures enum value "ca-central-1"
	DataPipelineAWSCloudRegionCaCentral1 string = "ca-central-1"

	// DataPipelineAWSCloudRegionCnNorth1 captures enum value "cn-north-1"
	DataPipelineAWSCloudRegionCnNorth1 string = "cn-north-1"

	// DataPipelineAWSCloudRegionCnNorthwest1 captures enum value "cn-northwest-1"
	DataPipelineAWSCloudRegionCnNorthwest1 string = "cn-northwest-1"

	// DataPipelineAWSCloudRegionEuCentral1 captures enum value "eu-central-1"
	DataPipelineAWSCloudRegionEuCentral1 string = "eu-central-1"

	// DataPipelineAWSCloudRegionEuWest1 captures enum value "eu-west-1"
	DataPipelineAWSCloudRegionEuWest1 string = "eu-west-1"

	// DataPipelineAWSCloudRegionEuWest2 captures enum value "eu-west-2"
	DataPipelineAWSCloudRegionEuWest2 string = "eu-west-2"

	// DataPipelineAWSCloudRegionEuWest3 captures enum value "eu-west-3"
	DataPipelineAWSCloudRegionEuWest3 string = "eu-west-3"

	// DataPipelineAWSCloudRegionSaEast1 captures enum value "sa-east-1"
	DataPipelineAWSCloudRegionSaEast1 string = "sa-east-1"
)

// prop value enum
func (m *DataPipeline) validateAWSCloudRegionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataPipelineTypeAWSCloudRegionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataPipeline) validateAWSCloudRegion(formats strfmt.Registry) error {

	if swag.IsZero(m.AWSCloudRegion) { // not required
		return nil
	}

	// value enum
	if err := m.validateAWSCloudRegionEnum("awsCloudRegion", "body", m.AWSCloudRegion); err != nil {
		return err
	}

	return nil
}

var dataPipelineTypeAWSStreamTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Kinesis","SQS","S3","DynamoDB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataPipelineTypeAWSStreamTypePropEnum = append(dataPipelineTypeAWSStreamTypePropEnum, v)
	}
}

const (

	// DataPipelineAWSStreamTypeKinesis captures enum value "Kinesis"
	DataPipelineAWSStreamTypeKinesis string = "Kinesis"

	// DataPipelineAWSStreamTypeSQS captures enum value "SQS"
	DataPipelineAWSStreamTypeSQS string = "SQS"

	// DataPipelineAWSStreamTypeS3 captures enum value "S3"
	DataPipelineAWSStreamTypeS3 string = "S3"

	// DataPipelineAWSStreamTypeDynamoDB captures enum value "DynamoDB"
	DataPipelineAWSStreamTypeDynamoDB string = "DynamoDB"
)

// prop value enum
func (m *DataPipeline) validateAWSStreamTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataPipelineTypeAWSStreamTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataPipeline) validateAWSStreamType(formats strfmt.Registry) error {

	if swag.IsZero(m.AWSStreamType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAWSStreamTypeEnum("awsStreamType", "body", m.AWSStreamType); err != nil {
		return err
	}

	return nil
}

var dataPipelineTypeAZStreamTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Blob"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataPipelineTypeAZStreamTypePropEnum = append(dataPipelineTypeAZStreamTypePropEnum, v)
	}
}

const (

	// DataPipelineAZStreamTypeBlob captures enum value "Blob"
	DataPipelineAZStreamTypeBlob string = "Blob"
)

// prop value enum
func (m *DataPipeline) validateAZStreamTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataPipelineTypeAZStreamTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataPipeline) validateAZStreamType(formats strfmt.Registry) error {

	if swag.IsZero(m.AZStreamType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAZStreamTypeEnum("azStreamType", "body", m.AZStreamType); err != nil {
		return err
	}

	return nil
}

var dataPipelineTypeCloudTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","GCP","Azure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataPipelineTypeCloudTypePropEnum = append(dataPipelineTypeCloudTypePropEnum, v)
	}
}

const (

	// DataPipelineCloudTypeAWS captures enum value "AWS"
	DataPipelineCloudTypeAWS string = "AWS"

	// DataPipelineCloudTypeGCP captures enum value "GCP"
	DataPipelineCloudTypeGCP string = "GCP"

	// DataPipelineCloudTypeAzure captures enum value "Azure"
	DataPipelineCloudTypeAzure string = "Azure"
)

// prop value enum
func (m *DataPipeline) validateCloudTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataPipelineTypeCloudTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataPipeline) validateCloudType(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudTypeEnum("cloudType", "body", m.CloudType); err != nil {
		return err
	}

	return nil
}

func (m *DataPipeline) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataPipeline) validateDataIfcEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.DataIfcEndpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.DataIfcEndpoints); i++ {
		if swag.IsZero(m.DataIfcEndpoints[i]) { // not required
			continue
		}

		if m.DataIfcEndpoints[i] != nil {
			if err := m.DataIfcEndpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DataIfcEndpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataPipeline) validateDataRetention(formats strfmt.Registry) error {

	if err := validate.Required("dataRetention", "body", m.DataRetention); err != nil {
		return err
	}

	for i := 0; i < len(m.DataRetention); i++ {
		if swag.IsZero(m.DataRetention[i]) { // not required
			continue
		}

		if m.DataRetention[i] != nil {
			if err := m.DataRetention[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataRetention" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataPipeline) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", m.DataType); err != nil {
		return err
	}

	return nil
}

var dataPipelineTypeDestinationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Edge","Cloud","DataInterface"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataPipelineTypeDestinationPropEnum = append(dataPipelineTypeDestinationPropEnum, v)
	}
}

const (

	// DataPipelineDestinationEdge captures enum value "Edge"
	DataPipelineDestinationEdge string = "Edge"

	// DataPipelineDestinationCloud captures enum value "Cloud"
	DataPipelineDestinationCloud string = "Cloud"

	// DataPipelineDestinationDataInterface captures enum value "DataInterface"
	DataPipelineDestinationDataInterface string = "DataInterface"
)

// prop value enum
func (m *DataPipeline) validateDestinationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataPipelineTypeDestinationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataPipeline) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	// value enum
	if err := m.validateDestinationEnum("destination", "body", *m.Destination); err != nil {
		return err
	}

	return nil
}

var dataPipelineTypeEdgeStreamTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Kafka","ElasticSearch","MQTT","DataDriver","None"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataPipelineTypeEdgeStreamTypePropEnum = append(dataPipelineTypeEdgeStreamTypePropEnum, v)
	}
}

const (

	// DataPipelineEdgeStreamTypeKafka captures enum value "Kafka"
	DataPipelineEdgeStreamTypeKafka string = "Kafka"

	// DataPipelineEdgeStreamTypeElasticSearch captures enum value "ElasticSearch"
	DataPipelineEdgeStreamTypeElasticSearch string = "ElasticSearch"

	// DataPipelineEdgeStreamTypeMQTT captures enum value "MQTT"
	DataPipelineEdgeStreamTypeMQTT string = "MQTT"

	// DataPipelineEdgeStreamTypeDataDriver captures enum value "DataDriver"
	DataPipelineEdgeStreamTypeDataDriver string = "DataDriver"

	// DataPipelineEdgeStreamTypeNone captures enum value "None"
	DataPipelineEdgeStreamTypeNone string = "None"
)

// prop value enum
func (m *DataPipeline) validateEdgeStreamTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataPipelineTypeEdgeStreamTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataPipeline) validateEdgeStreamType(formats strfmt.Registry) error {

	if swag.IsZero(m.EdgeStreamType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEdgeStreamTypeEnum("edgeStreamType", "body", m.EdgeStreamType); err != nil {
		return err
	}

	return nil
}

func (m *DataPipeline) validateEnableSampling(formats strfmt.Registry) error {

	if err := validate.Required("enableSampling", "body", m.EnableSampling); err != nil {
		return err
	}

	return nil
}

var dataPipelineTypeGCPCloudRegionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["northamerica-northeast1","us-central1","us-west1","us-east4","us-east1","southamerica-east1","europe-west1","europe-west2","europe-west3","europe-west4","asia-south1","asia-southeast1","asia-east1","asia-northeast1","australia-southeast1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataPipelineTypeGCPCloudRegionPropEnum = append(dataPipelineTypeGCPCloudRegionPropEnum, v)
	}
}

const (

	// DataPipelineGCPCloudRegionNorthamericaNortheast1 captures enum value "northamerica-northeast1"
	DataPipelineGCPCloudRegionNorthamericaNortheast1 string = "northamerica-northeast1"

	// DataPipelineGCPCloudRegionUsCentral1 captures enum value "us-central1"
	DataPipelineGCPCloudRegionUsCentral1 string = "us-central1"

	// DataPipelineGCPCloudRegionUsWest1 captures enum value "us-west1"
	DataPipelineGCPCloudRegionUsWest1 string = "us-west1"

	// DataPipelineGCPCloudRegionUsEast4 captures enum value "us-east4"
	DataPipelineGCPCloudRegionUsEast4 string = "us-east4"

	// DataPipelineGCPCloudRegionUsEast1 captures enum value "us-east1"
	DataPipelineGCPCloudRegionUsEast1 string = "us-east1"

	// DataPipelineGCPCloudRegionSouthamericaEast1 captures enum value "southamerica-east1"
	DataPipelineGCPCloudRegionSouthamericaEast1 string = "southamerica-east1"

	// DataPipelineGCPCloudRegionEuropeWest1 captures enum value "europe-west1"
	DataPipelineGCPCloudRegionEuropeWest1 string = "europe-west1"

	// DataPipelineGCPCloudRegionEuropeWest2 captures enum value "europe-west2"
	DataPipelineGCPCloudRegionEuropeWest2 string = "europe-west2"

	// DataPipelineGCPCloudRegionEuropeWest3 captures enum value "europe-west3"
	DataPipelineGCPCloudRegionEuropeWest3 string = "europe-west3"

	// DataPipelineGCPCloudRegionEuropeWest4 captures enum value "europe-west4"
	DataPipelineGCPCloudRegionEuropeWest4 string = "europe-west4"

	// DataPipelineGCPCloudRegionAsiaSouth1 captures enum value "asia-south1"
	DataPipelineGCPCloudRegionAsiaSouth1 string = "asia-south1"

	// DataPipelineGCPCloudRegionAsiaSoutheast1 captures enum value "asia-southeast1"
	DataPipelineGCPCloudRegionAsiaSoutheast1 string = "asia-southeast1"

	// DataPipelineGCPCloudRegionAsiaEast1 captures enum value "asia-east1"
	DataPipelineGCPCloudRegionAsiaEast1 string = "asia-east1"

	// DataPipelineGCPCloudRegionAsiaNortheast1 captures enum value "asia-northeast1"
	DataPipelineGCPCloudRegionAsiaNortheast1 string = "asia-northeast1"

	// DataPipelineGCPCloudRegionAustraliaSoutheast1 captures enum value "australia-southeast1"
	DataPipelineGCPCloudRegionAustraliaSoutheast1 string = "australia-southeast1"
)

// prop value enum
func (m *DataPipeline) validateGCPCloudRegionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataPipelineTypeGCPCloudRegionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataPipeline) validateGCPCloudRegion(formats strfmt.Registry) error {

	if swag.IsZero(m.GCPCloudRegion) { // not required
		return nil
	}

	// value enum
	if err := m.validateGCPCloudRegionEnum("gcpCloudRegion", "body", m.GCPCloudRegion); err != nil {
		return err
	}

	return nil
}

var dataPipelineTypeGCPStreamTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PubSub","CloudDatastore","CloudSQL","CloudStorage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataPipelineTypeGCPStreamTypePropEnum = append(dataPipelineTypeGCPStreamTypePropEnum, v)
	}
}

const (

	// DataPipelineGCPStreamTypePubSub captures enum value "PubSub"
	DataPipelineGCPStreamTypePubSub string = "PubSub"

	// DataPipelineGCPStreamTypeCloudDatastore captures enum value "CloudDatastore"
	DataPipelineGCPStreamTypeCloudDatastore string = "CloudDatastore"

	// DataPipelineGCPStreamTypeCloudSQL captures enum value "CloudSQL"
	DataPipelineGCPStreamTypeCloudSQL string = "CloudSQL"

	// DataPipelineGCPStreamTypeCloudStorage captures enum value "CloudStorage"
	DataPipelineGCPStreamTypeCloudStorage string = "CloudStorage"
)

// prop value enum
func (m *DataPipeline) validateGCPStreamTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataPipelineTypeGCPStreamTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataPipeline) validateGCPStreamType(formats strfmt.Registry) error {

	if swag.IsZero(m.GCPStreamType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGCPStreamTypeEnum("gcpStreamType", "body", m.GCPStreamType); err != nil {
		return err
	}

	return nil
}

func (m *DataPipeline) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var dataPipelineTypeOriginPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Data Source","Data Stream"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataPipelineTypeOriginPropEnum = append(dataPipelineTypeOriginPropEnum, v)
	}
}

const (

	// DataPipelineOriginDataSource captures enum value "Data Source"
	DataPipelineOriginDataSource string = "Data Source"

	// DataPipelineOriginDataStream captures enum value "Data Stream"
	DataPipelineOriginDataStream string = "Data Stream"
)

// prop value enum
func (m *DataPipeline) validateOriginEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataPipelineTypeOriginPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataPipeline) validateOrigin(formats strfmt.Registry) error {

	if err := validate.Required("origin", "body", m.Origin); err != nil {
		return err
	}

	// value enum
	if err := m.validateOriginEnum("origin", "body", *m.Origin); err != nil {
		return err
	}

	return nil
}

func (m *DataPipeline) validateOriginSelectors(formats strfmt.Registry) error {

	if err := validate.Required("originSelectors", "body", m.OriginSelectors); err != nil {
		return err
	}

	for i := 0; i < len(m.OriginSelectors); i++ {
		if swag.IsZero(m.OriginSelectors[i]) { // not required
			continue
		}

		if m.OriginSelectors[i] != nil {
			if err := m.OriginSelectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("originSelectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataPipeline) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *DataPipeline) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *DataPipeline) validateTransformationArgsList(formats strfmt.Registry) error {

	if err := validate.Required("transformationArgsList", "body", m.TransformationArgsList); err != nil {
		return err
	}

	for i := 0; i < len(m.TransformationArgsList); i++ {
		if swag.IsZero(m.TransformationArgsList[i]) { // not required
			continue
		}

		if m.TransformationArgsList[i] != nil {
			if err := m.TransformationArgsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transformationArgsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataPipeline) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataPipeline) validateOutDataIfc(formats strfmt.Registry) error {

	if swag.IsZero(m.OutDataIfc) { // not required
		return nil
	}

	if m.OutDataIfc != nil {
		if err := m.OutDataIfc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outDataIfc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataPipeline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataPipeline) UnmarshalBinary(b []byte) error {
	var res DataPipeline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
