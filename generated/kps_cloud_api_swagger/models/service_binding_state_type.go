// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ServiceBindingStateType service binding state type
// swagger:model ServiceBindingStateType
type ServiceBindingStateType string

const (

	// ServiceBindingStateTypePROVISIONING captures enum value "PROVISIONING"
	ServiceBindingStateTypePROVISIONING ServiceBindingStateType = "PROVISIONING"

	// ServiceBindingStateTypePROVISIONED captures enum value "PROVISIONED"
	ServiceBindingStateTypePROVISIONED ServiceBindingStateType = "PROVISIONED"

	// ServiceBindingStateTypeFAILED captures enum value "FAILED"
	ServiceBindingStateTypeFAILED ServiceBindingStateType = "FAILED"
)

// for schema
var serviceBindingStateTypeEnum []interface{}

func init() {
	var res []ServiceBindingStateType
	if err := json.Unmarshal([]byte(`["PROVISIONING","PROVISIONED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceBindingStateTypeEnum = append(serviceBindingStateTypeEnum, v)
	}
}

func (m ServiceBindingStateType) validateServiceBindingStateTypeEnum(path, location string, value ServiceBindingStateType) error {
	if err := validate.Enum(path, location, value, serviceBindingStateTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this service binding state type
func (m ServiceBindingStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceBindingStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
