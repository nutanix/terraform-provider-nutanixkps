// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContainerRegistryV2 ContainerRegistryV2 ContainerRegistry
// swagger:model ContainerRegistryV2
type ContainerRegistryV2 struct {

	// cloud profile info
	CloudProfileInfo *CloudProfileInfo `json:"CloudProfileInfo,omitempty"`

	// container registry info
	ContainerRegistryInfo *ContainerRegistryInfo `json:"ContainerRegistryInfo,omitempty"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Description for the container registry.
	Description string `json:"description,omitempty"`

	// ID of the entity
	// Maximum character length is 64 for project, category, and runtime environment,
	// 36 for other entity types.
	ID string `json:"id,omitempty"`

	// ntnx:ignore
	//
	// Internal Flag - encrypted - for internal migration use
	IFlagEncrypted bool `json:"iflagEncrypted,omitempty"`

	// Name for the container registry.
	// Required: true
	Name *string `json:"name"`

	// Container registry server URL.
	// For example, an Amazon AWS Elastic Container Registry (ECR) URL might be:
	// https://aws_account_id.dkr.ecr.region.amazonaws.com
	// Required: true
	Server *string `json:"server"`

	// ntnx:ignore
	// Required: true
	TenantID *string `json:"tenantId"`

	// Container registry type.
	// Required: true
	// Enum: [AWS GCP Azure ContainerRegistry]
	Type *string `json:"type"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// ntnx:ignore
	// Version of entity, implemented using timestamp in nano seconds
	// This is set to float64 since JSON numbers are floating point
	// May lose precision due to truncation but should have milli-second precision
	Version float64 `json:"version,omitempty"`
}

// Validate validates this container registry v2
func (m *ContainerRegistryV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProfileInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerRegistryInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerRegistryV2) validateCloudProfileInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudProfileInfo) { // not required
		return nil
	}

	if m.CloudProfileInfo != nil {
		if err := m.CloudProfileInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CloudProfileInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerRegistryV2) validateContainerRegistryInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainerRegistryInfo) { // not required
		return nil
	}

	if m.ContainerRegistryInfo != nil {
		if err := m.ContainerRegistryInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContainerRegistryInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerRegistryV2) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContainerRegistryV2) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ContainerRegistryV2) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	return nil
}

func (m *ContainerRegistryV2) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

var containerRegistryV2TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","GCP","Azure","ContainerRegistry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		containerRegistryV2TypeTypePropEnum = append(containerRegistryV2TypeTypePropEnum, v)
	}
}

const (

	// ContainerRegistryV2TypeAWS captures enum value "AWS"
	ContainerRegistryV2TypeAWS string = "AWS"

	// ContainerRegistryV2TypeGCP captures enum value "GCP"
	ContainerRegistryV2TypeGCP string = "GCP"

	// ContainerRegistryV2TypeAzure captures enum value "Azure"
	ContainerRegistryV2TypeAzure string = "Azure"

	// ContainerRegistryV2TypeContainerRegistry captures enum value "ContainerRegistry"
	ContainerRegistryV2TypeContainerRegistry string = "ContainerRegistry"
)

// prop value enum
func (m *ContainerRegistryV2) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, containerRegistryV2TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContainerRegistryV2) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ContainerRegistryV2) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerRegistryV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerRegistryV2) UnmarshalBinary(b []byte) error {
	var res ContainerRegistryV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
