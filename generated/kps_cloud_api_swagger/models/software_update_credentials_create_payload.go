// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SoftwareUpdateCredentialsCreatePayload SoftwareUpdateCredentialsCreatePayload is the payload for batch list REST response
// swagger:model SoftwareUpdateCredentialsCreatePayload
type SoftwareUpdateCredentialsCreatePayload struct {

	// batch ID
	// Required: true
	BatchID *string `json:"batchId"`

	// Details of the credentials
	Credentials map[string]string `json:"credentials,omitempty"`

	// release
	// Required: true
	Release *string `json:"release"`

	// access type
	// Required: true
	AccessType SoftwareUpdateCredentialsAccessType `json:"accessType"`
}

// Validate validates this software update credentials create payload
func (m *SoftwareUpdateCredentialsCreatePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareUpdateCredentialsCreatePayload) validateBatchID(formats strfmt.Registry) error {

	if err := validate.Required("batchId", "body", m.BatchID); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpdateCredentialsCreatePayload) validateRelease(formats strfmt.Registry) error {

	if err := validate.Required("release", "body", m.Release); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpdateCredentialsCreatePayload) validateAccessType(formats strfmt.Registry) error {

	if err := m.AccessType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accessType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareUpdateCredentialsCreatePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareUpdateCredentialsCreatePayload) UnmarshalBinary(b []byte) error {
	var res SoftwareUpdateCredentialsCreatePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
