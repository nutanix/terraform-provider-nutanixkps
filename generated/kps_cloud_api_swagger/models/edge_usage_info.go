// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgeUsageInfo EdgeUsageInfo is the DB object and object model for edgeinfo
//
// EdgeUsageInfo has edge information like the memory, storage and CPU usage
// swagger:model EdgeUsageInfo
type EdgeUsageInfo struct {

	// Edge CPU usage.
	CPUUsage string `json:"CPUUsage,omitempty"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Edge artifacts is a json object for passing edge ip and service ports
	EdgeArtifacts map[string]interface{} `json:"edgeArtifacts,omitempty"`

	// Edge build number.
	EdgeBuildNum string `json:"EdgeBuildNum,omitempty"`

	// ID of the edge this entity belongs to
	// Required: true
	EdgeID *string `json:"edgeId"`

	// Edge version.
	EdgeVersion string `json:"EdgeVersion,omitempty"`

	// Information about GPUs associated with the edge.
	GPUInfo string `json:"GPUInfo,omitempty"`

	// Edge GPU Usage.
	GPUUsage string `json:"GPUUsage,omitempty"`

	// ID of the entity
	// Maximum character length is 64 for project, category, and runtime environment,
	// 36 for other entity types.
	ID string `json:"id,omitempty"`

	// Edge Kubernetes version.
	KubeVersion string `json:"KubeVersion,omitempty"`

	// Free (available) edge memory in KB.
	MemoryFreeKB string `json:"MemoryFreeKB,omitempty"`

	// Number of CPUs assigned to the edge.
	NumCPU string `json:"NumCPU,omitempty"`

	// Edge OS version
	OSVersion string `json:"OSVersion,omitempty"`

	// Free (available) edge storage in KB.
	StorageFreeKB string `json:"StorageFreeKB,omitempty"`

	// ntnx:ignore
	// Required: true
	TenantID *string `json:"tenantId"`

	// Total edge memory in KB.
	TotalMemoryKB string `json:"TotalMemoryKB,omitempty"`

	// Total edge storage capacity in KB.
	TotalStorageKB string `json:"TotalStorageKB,omitempty"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// ntnx:ignore
	// Version of entity, implemented using timestamp in nano seconds
	// This is set to float64 since JSON numbers are floating point
	// May lose precision due to truncation but should have milli-second precision
	Version float64 `json:"version,omitempty"`
}

// Validate validates this edge usage info
func (m *EdgeUsageInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeUsageInfo) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EdgeUsageInfo) validateEdgeID(formats strfmt.Registry) error {

	if err := validate.Required("edgeId", "body", m.EdgeID); err != nil {
		return err
	}

	return nil
}

func (m *EdgeUsageInfo) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *EdgeUsageInfo) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeUsageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeUsageInfo) UnmarshalBinary(b []byte) error {
	var res EdgeUsageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
