// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppStatus AppStatus describes status for an application on one edge
// swagger:model AppStatus
type AppStatus struct {

	// image list
	ImageList []string `json:"imageList"`

	// pod metrics list
	PodMetricsList []PodMetrics `json:"podMetricsList"`

	// pod status list
	// Required: true
	PodStatusList []PodStatus `json:"podStatusList"`
}

// Validate validates this app status
func (m *AppStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePodMetricsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodStatusList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppStatus) validatePodMetricsList(formats strfmt.Registry) error {

	if swag.IsZero(m.PodMetricsList) { // not required
		return nil
	}

	for i := 0; i < len(m.PodMetricsList); i++ {

		if err := m.PodMetricsList[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podMetricsList" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AppStatus) validatePodStatusList(formats strfmt.Registry) error {

	if err := validate.Required("podStatusList", "body", m.PodStatusList); err != nil {
		return err
	}

	for i := 0; i < len(m.PodStatusList); i++ {

		if err := m.PodStatusList[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podStatusList" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppStatus) UnmarshalBinary(b []byte) error {
	var res AppStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
