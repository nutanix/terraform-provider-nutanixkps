// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogCollector LogCollector is object model for log collection flow
//
// LogCollectors allow to collect logs from multiple components and stream them to the cloud
// swagger:model LogCollector
type LogCollector struct {

	// CloudCreds id.
	// Destination id for the cloud (should match with the CloudDestinationType)
	// Required: true
	CloudCredsID *string `json:"cloudCredsID"`

	// A code to modify logs during collection
	// Log stream modifications (script source code)
	Code string `json:"code,omitempty"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// ID of the entity
	// Maximum character length is 64 for project, category, and runtime environment,
	// 36 for other entity types.
	ID string `json:"id,omitempty"`

	// Name of the LogCollector.
	// Visible by UI only
	// Required: true
	Name *string `json:"name"`

	// ID of parent project.
	// This should be required for PROJECT log collectors.
	ProjectID string `json:"projectId,omitempty"`

	// ntnx:ignore
	// Required: true
	TenantID *string `json:"tenantId"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// ntnx:ignore
	// Version of entity, implemented using timestamp in nano seconds
	// This is set to float64 since JSON numbers are floating point
	// May lose precision due to truncation but should have milli-second precision
	Version float64 `json:"version,omitempty"`

	// cloudwatch details
	CloudwatchDetails *LogCollectorCloudwatch `json:"cloudwatchDetails,omitempty"`

	// dest
	// Required: true
	Dest LogCollectorDestination `json:"dest"`

	// kinesis details
	KinesisDetails *LogCollectorKinesis `json:"kinesisDetails,omitempty"`

	// sources
	// Required: true
	Sources *LogCollectorSources `json:"sources"`

	// stackdriver details
	StackdriverDetails *LogCollectorStackdriver `json:"stackdriverDetails,omitempty"`

	// state
	// Required: true
	State LogCollectorStatus `json:"state"`

	// type
	// Required: true
	Type LogCollectorType `json:"type"`
}

// Validate validates this log collector
func (m *LogCollector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudCredsID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudwatchDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKinesisDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackdriverDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogCollector) validateCloudCredsID(formats strfmt.Registry) error {

	if err := validate.Required("cloudCredsID", "body", m.CloudCredsID); err != nil {
		return err
	}

	return nil
}

func (m *LogCollector) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LogCollector) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *LogCollector) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *LogCollector) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LogCollector) validateCloudwatchDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudwatchDetails) { // not required
		return nil
	}

	if m.CloudwatchDetails != nil {
		if err := m.CloudwatchDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudwatchDetails")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollector) validateDest(formats strfmt.Registry) error {

	if err := m.Dest.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dest")
		}
		return err
	}

	return nil
}

func (m *LogCollector) validateKinesisDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.KinesisDetails) { // not required
		return nil
	}

	if m.KinesisDetails != nil {
		if err := m.KinesisDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kinesisDetails")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollector) validateSources(formats strfmt.Registry) error {

	if err := validate.Required("sources", "body", m.Sources); err != nil {
		return err
	}

	if m.Sources != nil {
		if err := m.Sources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sources")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollector) validateStackdriverDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.StackdriverDetails) { // not required
		return nil
	}

	if m.StackdriverDetails != nil {
		if err := m.StackdriverDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stackdriverDetails")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollector) validateState(formats strfmt.Registry) error {

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *LogCollector) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogCollector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogCollector) UnmarshalBinary(b []byte) error {
	var res LogCollector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
