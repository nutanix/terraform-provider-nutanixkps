// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SoftwareUpdateCredentialsAccessType software update credentials access type
// swagger:model SoftwareUpdateCredentialsAccessType
type SoftwareUpdateCredentialsAccessType string

const (

	// SoftwareUpdateCredentialsAccessTypeAWS captures enum value "AWS"
	SoftwareUpdateCredentialsAccessTypeAWS SoftwareUpdateCredentialsAccessType = "AWS"

	// SoftwareUpdateCredentialsAccessTypeDOCKER captures enum value "DOCKER"
	SoftwareUpdateCredentialsAccessTypeDOCKER SoftwareUpdateCredentialsAccessType = "DOCKER"

	// SoftwareUpdateCredentialsAccessTypeAWSECR captures enum value "AWS_ECR"
	SoftwareUpdateCredentialsAccessTypeAWSECR SoftwareUpdateCredentialsAccessType = "AWS_ECR"
)

// for schema
var softwareUpdateCredentialsAccessTypeEnum []interface{}

func init() {
	var res []SoftwareUpdateCredentialsAccessType
	if err := json.Unmarshal([]byte(`["AWS","DOCKER","AWS_ECR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		softwareUpdateCredentialsAccessTypeEnum = append(softwareUpdateCredentialsAccessTypeEnum, v)
	}
}

func (m SoftwareUpdateCredentialsAccessType) validateSoftwareUpdateCredentialsAccessTypeEnum(path, location string, value SoftwareUpdateCredentialsAccessType) error {
	if err := validate.Enum(path, location, value, softwareUpdateCredentialsAccessTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this software update credentials access type
func (m SoftwareUpdateCredentialsAccessType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSoftwareUpdateCredentialsAccessTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
