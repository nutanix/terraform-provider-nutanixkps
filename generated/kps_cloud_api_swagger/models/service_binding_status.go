// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceBindingStatus ServiceBindingStatus holds the Service Binding result information
// swagger:model ServiceBindingStatus
type ServiceBindingStatus struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// svc binding ID
	// Required: true
	SvcBindingID *string `json:"svcBindingId"`

	// svc domain ID
	// Required: true
	SvcDomainID *string `json:"svcDomainId"`

	// svc instance ID
	SvcInstanceID string `json:"svcInstanceId,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// bind result
	BindResult *ServiceBindingResult `json:"bindResult,omitempty"`

	// state
	// Required: true
	State ServiceBindingStateType `json:"state"`
}

// Validate validates this service binding status
func (m *ServiceBindingStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcBindingID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcDomainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBindResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceBindingStatus) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceBindingStatus) validateSvcBindingID(formats strfmt.Registry) error {

	if err := validate.Required("svcBindingId", "body", m.SvcBindingID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceBindingStatus) validateSvcDomainID(formats strfmt.Registry) error {

	if err := validate.Required("svcDomainId", "body", m.SvcDomainID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceBindingStatus) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceBindingStatus) validateBindResult(formats strfmt.Registry) error {

	if swag.IsZero(m.BindResult) { // not required
		return nil
	}

	if m.BindResult != nil {
		if err := m.BindResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bindResult")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceBindingStatus) validateState(formats strfmt.Registry) error {

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceBindingStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceBindingStatus) UnmarshalBinary(b []byte) error {
	var res ServiceBindingStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
