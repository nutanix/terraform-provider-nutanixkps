// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataSourceIfcInfo DataSourceIfcInfo - metadata related to the datasource interface
// swagger:model DataSourceIfcInfo
type DataSourceIfcInfo struct {

	// Class of the data source
	// DataInterface or Legacy
	// Required: true
	// Enum: [DATAINTERFACE LEGACY]
	Class *string `json:"ifcClass"`

	// Driver from which this data source is derived.
	// Required: true
	DriverID *string `json:"ifcDriverId"`

	// The docker img that includes the data source
	// Required: true
	Img *string `json:"ifcImg"`

	// Kind of data source
	// IN, OUT, PIPE (bidirectional)
	// Required: true
	// Enum: [IN OUT PIPE]
	Kind *string `json:"ifcKind"`

	// Any ports that will be opened and used by this datasource
	Ports []*DataSourceIfcPorts `json:"ifcPorts"`

	// The project that contains this data source
	ProjectID string `json:"ifcProjectId,omitempty"`

	// Primary protocol that this data source implements
	// Required: true
	Protocol *string `json:"ifcProtocol"`
}

// Validate validates this data source ifc info
func (m *DataSourceIfcInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataSourceIfcInfoTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DATAINTERFACE","LEGACY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceIfcInfoTypeClassPropEnum = append(dataSourceIfcInfoTypeClassPropEnum, v)
	}
}

const (

	// DataSourceIfcInfoClassDATAINTERFACE captures enum value "DATAINTERFACE"
	DataSourceIfcInfoClassDATAINTERFACE string = "DATAINTERFACE"

	// DataSourceIfcInfoClassLEGACY captures enum value "LEGACY"
	DataSourceIfcInfoClassLEGACY string = "LEGACY"
)

// prop value enum
func (m *DataSourceIfcInfo) validateClassEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataSourceIfcInfoTypeClassPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataSourceIfcInfo) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("ifcClass", "body", m.Class); err != nil {
		return err
	}

	// value enum
	if err := m.validateClassEnum("ifcClass", "body", *m.Class); err != nil {
		return err
	}

	return nil
}

func (m *DataSourceIfcInfo) validateDriverID(formats strfmt.Registry) error {

	if err := validate.Required("ifcDriverId", "body", m.DriverID); err != nil {
		return err
	}

	return nil
}

func (m *DataSourceIfcInfo) validateImg(formats strfmt.Registry) error {

	if err := validate.Required("ifcImg", "body", m.Img); err != nil {
		return err
	}

	return nil
}

var dataSourceIfcInfoTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IN","OUT","PIPE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceIfcInfoTypeKindPropEnum = append(dataSourceIfcInfoTypeKindPropEnum, v)
	}
}

const (

	// DataSourceIfcInfoKindIN captures enum value "IN"
	DataSourceIfcInfoKindIN string = "IN"

	// DataSourceIfcInfoKindOUT captures enum value "OUT"
	DataSourceIfcInfoKindOUT string = "OUT"

	// DataSourceIfcInfoKindPIPE captures enum value "PIPE"
	DataSourceIfcInfoKindPIPE string = "PIPE"
)

// prop value enum
func (m *DataSourceIfcInfo) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataSourceIfcInfoTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataSourceIfcInfo) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("ifcKind", "body", m.Kind); err != nil {
		return err
	}

	// value enum
	if err := m.validateKindEnum("ifcKind", "body", *m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *DataSourceIfcInfo) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ifcPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataSourceIfcInfo) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("ifcProtocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataSourceIfcInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSourceIfcInfo) UnmarshalBinary(b []byte) error {
	var res DataSourceIfcInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
