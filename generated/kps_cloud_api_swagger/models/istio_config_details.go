// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IstioConfigDetails istio config details
// swagger:model IstioConfigDetails
type IstioConfigDetails struct {

	// object type
	ObjectType string `json:"objectType,omitempty"`

	// adapter
	Adapter *IstioAdapter `json:"adapter,omitempty"`

	// attribute manifest
	AttributeManifest *AttributeManifest `json:"attributeManifest,omitempty"`

	// authorization policy
	AuthorizationPolicy *AuthorizationPolicy `json:"authorizationPolicy,omitempty"`

	// cluster rbac config
	ClusterRbacConfig *ClusterRbacConfig `json:"clusterRbacConfig,omitempty"`

	// destination rule
	DestinationRule *DestinationRule `json:"destinationRule,omitempty"`

	// envoy filter
	EnvoyFilter *EnvoyFilter `json:"envoyFilter,omitempty"`

	// gateway
	Gateway *Gateway `json:"gateway,omitempty"`

	// handler
	Handler *IstioHandler `json:"handler,omitempty"`

	// http Api spec
	HTTPAPISpec *HTTPAPISpec `json:"httpApiSpec,omitempty"`

	// http Api spec binding
	HTTPAPISpecBinding *HTTPAPISpecBinding `json:"httpApiSpecBinding,omitempty"`

	// instance
	Instance *IstioInstance `json:"instance,omitempty"`

	// istio validation
	IstioValidation *IstioValidation `json:"istioValidation,omitempty"`

	// mesh policy
	MeshPolicy *MeshPolicy `json:"meshPolicy,omitempty"`

	// namespace
	Namespace *Namespace `json:"namespace,omitempty"`

	// peer authentication
	PeerAuthentication *PeerAuthentication `json:"peerAuthentication,omitempty"`

	// permissions
	Permissions *ResourcePermissions `json:"permissions,omitempty"`

	// policy
	Policy *Policy `json:"policy,omitempty"`

	// quota spec
	QuotaSpec *QuotaSpec `json:"quotaSpec,omitempty"`

	// quota spec binding
	QuotaSpecBinding *QuotaSpecBinding `json:"quotaSpecBinding,omitempty"`

	// rbac config
	RbacConfig *RbacConfig `json:"rbacConfig,omitempty"`

	// request authentication
	RequestAuthentication *RequestAuthentication `json:"requestAuthentication,omitempty"`

	// rule
	Rule *IstioRule `json:"rule,omitempty"`

	// service entry
	ServiceEntry *ServiceEntry `json:"serviceEntry,omitempty"`

	// service mesh policy
	ServiceMeshPolicy *ServiceMeshPolicy `json:"serviceMeshPolicy,omitempty"`

	// service mesh rbac config
	ServiceMeshRbacConfig *ServiceMeshRbacConfig `json:"serviceMeshRbacConfig,omitempty"`

	// service role
	ServiceRole *ServiceRole `json:"serviceRole,omitempty"`

	// service role binding
	ServiceRoleBinding *ServiceRoleBinding `json:"serviceRoleBinding,omitempty"`

	// sidecar
	Sidecar *Sidecar `json:"sidecar,omitempty"`

	// template
	Template *IstioTemplate `json:"template,omitempty"`

	// virtual service
	VirtualService *VirtualService `json:"virtualService,omitempty"`

	// workload entry
	WorkloadEntry *WorkloadEntry `json:"workloadEntry,omitempty"`
}

// Validate validates this istio config details
func (m *IstioConfigDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdapter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributeManifest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterRbacConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvoyFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPAPISpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPAPISpecBinding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIstioValidation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeshPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaSpecBinding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRbacConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceEntry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMeshPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMeshRbacConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRoleBinding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSidecar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadEntry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IstioConfigDetails) validateAdapter(formats strfmt.Registry) error {

	if swag.IsZero(m.Adapter) { // not required
		return nil
	}

	if m.Adapter != nil {
		if err := m.Adapter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adapter")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateAttributeManifest(formats strfmt.Registry) error {

	if swag.IsZero(m.AttributeManifest) { // not required
		return nil
	}

	if m.AttributeManifest != nil {
		if err := m.AttributeManifest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributeManifest")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateAuthorizationPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthorizationPolicy) { // not required
		return nil
	}

	if m.AuthorizationPolicy != nil {
		if err := m.AuthorizationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorizationPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateClusterRbacConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterRbacConfig) { // not required
		return nil
	}

	if m.ClusterRbacConfig != nil {
		if err := m.ClusterRbacConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterRbacConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateDestinationRule(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationRule) { // not required
		return nil
	}

	if m.DestinationRule != nil {
		if err := m.DestinationRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationRule")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateEnvoyFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvoyFilter) { // not required
		return nil
	}

	if m.EnvoyFilter != nil {
		if err := m.EnvoyFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("envoyFilter")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateGateway(formats strfmt.Registry) error {

	if swag.IsZero(m.Gateway) { // not required
		return nil
	}

	if m.Gateway != nil {
		if err := m.Gateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateHandler(formats strfmt.Registry) error {

	if swag.IsZero(m.Handler) { // not required
		return nil
	}

	if m.Handler != nil {
		if err := m.Handler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handler")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateHTTPAPISpec(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPAPISpec) { // not required
		return nil
	}

	if m.HTTPAPISpec != nil {
		if err := m.HTTPAPISpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("httpApiSpec")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateHTTPAPISpecBinding(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPAPISpecBinding) { // not required
		return nil
	}

	if m.HTTPAPISpecBinding != nil {
		if err := m.HTTPAPISpecBinding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("httpApiSpecBinding")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.Instance) { // not required
		return nil
	}

	if m.Instance != nil {
		if err := m.Instance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateIstioValidation(formats strfmt.Registry) error {

	if swag.IsZero(m.IstioValidation) { // not required
		return nil
	}

	if m.IstioValidation != nil {
		if err := m.IstioValidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("istioValidation")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateMeshPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.MeshPolicy) { // not required
		return nil
	}

	if m.MeshPolicy != nil {
		if err := m.MeshPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meshPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateNamespace(formats strfmt.Registry) error {

	if swag.IsZero(m.Namespace) { // not required
		return nil
	}

	if m.Namespace != nil {
		if err := m.Namespace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespace")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validatePeerAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.PeerAuthentication) { // not required
		return nil
	}

	if m.PeerAuthentication != nil {
		if err := m.PeerAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peerAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validatePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateQuotaSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.QuotaSpec) { // not required
		return nil
	}

	if m.QuotaSpec != nil {
		if err := m.QuotaSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quotaSpec")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateQuotaSpecBinding(formats strfmt.Registry) error {

	if swag.IsZero(m.QuotaSpecBinding) { // not required
		return nil
	}

	if m.QuotaSpecBinding != nil {
		if err := m.QuotaSpecBinding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quotaSpecBinding")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateRbacConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.RbacConfig) { // not required
		return nil
	}

	if m.RbacConfig != nil {
		if err := m.RbacConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rbacConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateRequestAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestAuthentication) { // not required
		return nil
	}

	if m.RequestAuthentication != nil {
		if err := m.RequestAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requestAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateRule(formats strfmt.Registry) error {

	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateServiceEntry(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceEntry) { // not required
		return nil
	}

	if m.ServiceEntry != nil {
		if err := m.ServiceEntry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceEntry")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateServiceMeshPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceMeshPolicy) { // not required
		return nil
	}

	if m.ServiceMeshPolicy != nil {
		if err := m.ServiceMeshPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceMeshPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateServiceMeshRbacConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceMeshRbacConfig) { // not required
		return nil
	}

	if m.ServiceMeshRbacConfig != nil {
		if err := m.ServiceMeshRbacConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceMeshRbacConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateServiceRole(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceRole) { // not required
		return nil
	}

	if m.ServiceRole != nil {
		if err := m.ServiceRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceRole")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateServiceRoleBinding(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceRoleBinding) { // not required
		return nil
	}

	if m.ServiceRoleBinding != nil {
		if err := m.ServiceRoleBinding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceRoleBinding")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateSidecar(formats strfmt.Registry) error {

	if swag.IsZero(m.Sidecar) { // not required
		return nil
	}

	if m.Sidecar != nil {
		if err := m.Sidecar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sidecar")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateVirtualService(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualService) { // not required
		return nil
	}

	if m.VirtualService != nil {
		if err := m.VirtualService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualService")
			}
			return err
		}
	}

	return nil
}

func (m *IstioConfigDetails) validateWorkloadEntry(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkloadEntry) { // not required
		return nil
	}

	if m.WorkloadEntry != nil {
		if err := m.WorkloadEntry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workloadEntry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IstioConfigDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IstioConfigDetails) UnmarshalBinary(b []byte) error {
	var res IstioConfigDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
