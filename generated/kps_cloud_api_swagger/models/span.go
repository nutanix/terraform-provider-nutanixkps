// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Span span
// swagger:model Span
type Span struct {

	// duration
	Duration uint64 `json:"duration,omitempty"`

	// flags
	Flags uint32 `json:"flags,omitempty"`

	// logs
	Logs []*Log `json:"logs"`

	// operation name
	OperationName string `json:"operationName,omitempty"`

	// references
	References []*Reference `json:"references"`

	// start time
	StartTime uint64 `json:"startTime,omitempty"`

	// tags
	Tags []*KeyValue `json:"tags"`

	// trace size
	TraceSize int64 `json:"traceSize,omitempty"`

	// warnings
	Warnings []string `json:"warnings"`

	// parent span ID
	ParentSpanID SpanID `json:"parentSpanID,omitempty"`

	// process
	Process *Process `json:"process,omitempty"`

	// process ID
	ProcessID ProcessID `json:"processID,omitempty"`

	// span ID
	SpanID SpanID `json:"spanID,omitempty"`

	// trace ID
	TraceID TraceID `json:"traceID,omitempty"`
}

// Validate validates this span
func (m *Span) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentSpanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Span) validateLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.Logs) { // not required
		return nil
	}

	for i := 0; i < len(m.Logs); i++ {
		if swag.IsZero(m.Logs[i]) { // not required
			continue
		}

		if m.Logs[i] != nil {
			if err := m.Logs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Span) validateReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.References) { // not required
		return nil
	}

	for i := 0; i < len(m.References); i++ {
		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {
			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Span) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Span) validateParentSpanID(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentSpanID) { // not required
		return nil
	}

	if err := m.ParentSpanID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parentSpanID")
		}
		return err
	}

	return nil
}

func (m *Span) validateProcess(formats strfmt.Registry) error {

	if swag.IsZero(m.Process) { // not required
		return nil
	}

	if m.Process != nil {
		if err := m.Process.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("process")
			}
			return err
		}
	}

	return nil
}

func (m *Span) validateProcessID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessID) { // not required
		return nil
	}

	if err := m.ProcessID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("processID")
		}
		return err
	}

	return nil
}

func (m *Span) validateSpanID(formats strfmt.Registry) error {

	if swag.IsZero(m.SpanID) { // not required
		return nil
	}

	if err := m.SpanID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("spanID")
		}
		return err
	}

	return nil
}

func (m *Span) validateTraceID(formats strfmt.Registry) error {

	if swag.IsZero(m.TraceID) { // not required
		return nil
	}

	if err := m.TraceID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("traceID")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Span) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Span) UnmarshalBinary(b []byte) error {
	var res Span
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
