// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditLogV2Filter AuditLogV2Filter is the audit log filter in QueryAuditLogsV2.
//
// StartTime is the later time (inclusive) going back to the earlier EndTime (exclusive)
// swagger:model AuditLogV2Filter
type AuditLogV2Filter struct {

	// Search for events by this earlier timestamp (inclusive).
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// from document
	FromDocument int64 `json:"fromDocument,omitempty"`

	// group by
	GroupBy string `json:"groupBy,omitempty"`

	// page size
	PageSize int64 `json:"pageSize,omitempty"`

	// scopes
	Scopes []string `json:"scopes"`

	// Search for events by this later timestamp (inclusive)
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// TenantID must be provided in order to search audit logs
	// Required: true
	TermsKeyValue map[string]AuditLogV2MultipleValues `json:"termsKeyValue"`
}

// Validate validates this audit log v2 filter
func (m *AuditLogV2Filter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermsKeyValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditLogV2Filter) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditLogV2Filter) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditLogV2Filter) validateTermsKeyValue(formats strfmt.Registry) error {

	for k := range m.TermsKeyValue {

		if err := validate.Required("termsKeyValue"+"."+k, "body", m.TermsKeyValue[k]); err != nil {
			return err
		}
		if val, ok := m.TermsKeyValue[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditLogV2Filter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditLogV2Filter) UnmarshalBinary(b []byte) error {
	var res AuditLogV2Filter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
