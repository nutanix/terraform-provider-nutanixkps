// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// EdgeInventoryDeltaPayload EdgeInventoryDeltaPayload is the payload used in get edge inventory delta
// HTTP POST call. This payload carries a snapshot of current inventory at the
// edge: For each entity type, it contains EntityVersionMetadata of each entity
// instance at the edge.
// swagger:model EdgeInventoryDeltaPayload
type EdgeInventoryDeltaPayload struct {

	// applications
	Applications []*EntityVersionMetadata `json:"Applications"`

	// categories
	Categories []*EntityVersionMetadata `json:"Categories"`

	// cloud profiles
	CloudProfiles []*EntityVersionMetadata `json:"CloudProfiles"`

	// container registries
	ContainerRegistries []*EntityVersionMetadata `json:"ContainerRegistries"`

	// data driver instances
	DataDriverInstances []*EntityVersionMetadata `json:"DataDriverInstances"`

	// data pipelines
	DataPipelines []*EntityVersionMetadata `json:"DataPipelines"`

	// data sources
	DataSources []*EntityVersionMetadata `json:"DataSources"`

	// functions
	Functions []*EntityVersionMetadata `json:"Functions"`

	// log collectors
	LogCollectors []*EntityVersionMetadata `json:"LogCollectors"`

	// m l models
	MLModels []*EntityVersionMetadata `json:"MLModels"`

	// project services
	ProjectServices []*EntityVersionMetadata `json:"ProjectServices"`

	// projects
	Projects []*EntityVersionMetadata `json:"Projects"`

	// runtime environments
	RuntimeEnvironments []*EntityVersionMetadata `json:"RuntimeEnvironments"`

	// software updates
	SoftwareUpdates []*EntityVersionMetadata `json:"SoftwareUpdates"`

	// svc bindings
	SvcBindings []*EntityVersionMetadata `json:"SvcBindings"`

	// svc instances
	SvcInstances []*EntityVersionMetadata `json:"SvcInstances"`
}

// Validate validates this edge inventory delta payload
func (m *EdgeInventoryDeltaPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerRegistries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataDriverInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataPipelines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogCollectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMLModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareUpdates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcInstances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeInventoryDeltaPayload) validateApplications(formats strfmt.Registry) error {

	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	for i := 0; i < len(m.Applications); i++ {
		if swag.IsZero(m.Applications[i]) { // not required
			continue
		}

		if m.Applications[i] != nil {
			if err := m.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for i := 0; i < len(m.Categories); i++ {
		if swag.IsZero(m.Categories[i]) { // not required
			continue
		}

		if m.Categories[i] != nil {
			if err := m.Categories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateCloudProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudProfiles); i++ {
		if swag.IsZero(m.CloudProfiles[i]) { // not required
			continue
		}

		if m.CloudProfiles[i] != nil {
			if err := m.CloudProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CloudProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateContainerRegistries(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainerRegistries) { // not required
		return nil
	}

	for i := 0; i < len(m.ContainerRegistries); i++ {
		if swag.IsZero(m.ContainerRegistries[i]) { // not required
			continue
		}

		if m.ContainerRegistries[i] != nil {
			if err := m.ContainerRegistries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ContainerRegistries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateDataDriverInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.DataDriverInstances) { // not required
		return nil
	}

	for i := 0; i < len(m.DataDriverInstances); i++ {
		if swag.IsZero(m.DataDriverInstances[i]) { // not required
			continue
		}

		if m.DataDriverInstances[i] != nil {
			if err := m.DataDriverInstances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DataDriverInstances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateDataPipelines(formats strfmt.Registry) error {

	if swag.IsZero(m.DataPipelines) { // not required
		return nil
	}

	for i := 0; i < len(m.DataPipelines); i++ {
		if swag.IsZero(m.DataPipelines[i]) { // not required
			continue
		}

		if m.DataPipelines[i] != nil {
			if err := m.DataPipelines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DataPipelines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateDataSources(formats strfmt.Registry) error {

	if swag.IsZero(m.DataSources) { // not required
		return nil
	}

	for i := 0; i < len(m.DataSources); i++ {
		if swag.IsZero(m.DataSources[i]) { // not required
			continue
		}

		if m.DataSources[i] != nil {
			if err := m.DataSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DataSources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateFunctions(formats strfmt.Registry) error {

	if swag.IsZero(m.Functions) { // not required
		return nil
	}

	for i := 0; i < len(m.Functions); i++ {
		if swag.IsZero(m.Functions[i]) { // not required
			continue
		}

		if m.Functions[i] != nil {
			if err := m.Functions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Functions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateLogCollectors(formats strfmt.Registry) error {

	if swag.IsZero(m.LogCollectors) { // not required
		return nil
	}

	for i := 0; i < len(m.LogCollectors); i++ {
		if swag.IsZero(m.LogCollectors[i]) { // not required
			continue
		}

		if m.LogCollectors[i] != nil {
			if err := m.LogCollectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LogCollectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateMLModels(formats strfmt.Registry) error {

	if swag.IsZero(m.MLModels) { // not required
		return nil
	}

	for i := 0; i < len(m.MLModels); i++ {
		if swag.IsZero(m.MLModels[i]) { // not required
			continue
		}

		if m.MLModels[i] != nil {
			if err := m.MLModels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MLModels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateProjectServices(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectServices) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectServices); i++ {
		if swag.IsZero(m.ProjectServices[i]) { // not required
			continue
		}

		if m.ProjectServices[i] != nil {
			if err := m.ProjectServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProjectServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateProjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateRuntimeEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.RuntimeEnvironments) { // not required
		return nil
	}

	for i := 0; i < len(m.RuntimeEnvironments); i++ {
		if swag.IsZero(m.RuntimeEnvironments[i]) { // not required
			continue
		}

		if m.RuntimeEnvironments[i] != nil {
			if err := m.RuntimeEnvironments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RuntimeEnvironments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateSoftwareUpdates(formats strfmt.Registry) error {

	if swag.IsZero(m.SoftwareUpdates) { // not required
		return nil
	}

	for i := 0; i < len(m.SoftwareUpdates); i++ {
		if swag.IsZero(m.SoftwareUpdates[i]) { // not required
			continue
		}

		if m.SoftwareUpdates[i] != nil {
			if err := m.SoftwareUpdates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SoftwareUpdates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateSvcBindings(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.SvcBindings); i++ {
		if swag.IsZero(m.SvcBindings[i]) { // not required
			continue
		}

		if m.SvcBindings[i] != nil {
			if err := m.SvcBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SvcBindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeInventoryDeltaPayload) validateSvcInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcInstances) { // not required
		return nil
	}

	for i := 0; i < len(m.SvcInstances); i++ {
		if swag.IsZero(m.SvcInstances[i]) { // not required
			continue
		}

		if m.SvcInstances[i] != nil {
			if err := m.SvcInstances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SvcInstances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeInventoryDeltaPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeInventoryDeltaPayload) UnmarshalBinary(b []byte) error {
	var res EdgeInventoryDeltaPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
