// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeInfo NodeInfo has node information like the memory, storage and CPU usage
// swagger:model NodeInfo
type NodeInfo struct {

	// Artifacts is a json object for passing node ip and service ports
	Artifacts map[string]interface{} `json:"artifacts,omitempty"`

	// Node CPU usage.
	CPUUsage string `json:"cpuUsage,omitempty"`

	// connected
	Connected bool `json:"connected,omitempty"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Information about GPUs associated with the node.
	GPUInfo string `json:"gpuInfo,omitempty"`

	// Node GPU Usage.
	GPUUsage string `json:"gpuUsage,omitempty"`

	// health bits
	HealthBits map[string]bool `json:"healthBits,omitempty"`

	// Deprecated. Use healthStatus instead
	Healthy bool `json:"healthy,omitempty"`

	// ID of the entity
	// Maximum character length is 64 for project, category, and runtime environment,
	// 36 for other entity types.
	ID string `json:"id,omitempty"`

	// Node Kubernetes version.
	KubeVersion string `json:"kubeVersion,omitempty"`

	// Free (available) node memory in KB.
	MemoryFreeKB string `json:"memoryFreeKB,omitempty"`

	// Node build number.
	NodeBuildNum string `json:"nodeBuildNum,omitempty"`

	// node ID
	NodeID string `json:"nodeId,omitempty"`

	// Node version.
	NodeVersion string `json:"nodeVersion,omitempty"`

	// Number of CPUs assigned to the node.
	NumCPU string `json:"numCpu,omitempty"`

	// Node OS version
	OSVersion string `json:"osVersion,omitempty"`

	// onboarded
	Onboarded bool `json:"onboarded,omitempty"`

	// Free (available) node storage in KB.
	StorageFreeKB string `json:"storageFreeKB,omitempty"`

	// ID of the service domain this entity belongs to
	// Required: true
	SvcDomainID *string `json:"svcDomainId"`

	// ntnx:ignore
	// Required: true
	TenantID *string `json:"tenantId"`

	// Total node memory in KB.
	TotalMemoryKB string `json:"totalMemoryKB,omitempty"`

	// Total node storage capacity in KB.
	TotalStorageKB string `json:"totalStorageKB,omitempty"`

	// ntnx:ignore
	// timestamp feature supported by DB
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// ntnx:ignore
	// Version of entity, implemented using timestamp in nano seconds
	// This is set to float64 since JSON numbers are floating point
	// May lose precision due to truncation but should have milli-second precision
	Version float64 `json:"version,omitempty"`

	// health status
	HealthStatus NodeHealthStatus `json:"healthStatus,omitempty"`
}

// Validate validates this node info
func (m *NodeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcDomainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeInfo) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NodeInfo) validateSvcDomainID(formats strfmt.Registry) error {

	if err := validate.Required("svcDomainId", "body", m.SvcDomainID); err != nil {
		return err
	}

	return nil
}

func (m *NodeInfo) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *NodeInfo) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NodeInfo) validateHealthStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	if err := m.HealthStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("healthStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeInfo) UnmarshalBinary(b []byte) error {
	var res NodeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
