// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ServiceDetails service details
// swagger:model ServiceDetails
type ServiceDetails struct {

	// additional details
	AdditionalDetails []*AdditionalItem `json:"additionalDetails"`

	// istio sidecar
	IstioSidecar bool `json:"istioSidecar,omitempty"`

	// destination rules
	DestinationRules *DestinationRules `json:"destinationRules,omitempty"`

	// endpoints
	Endpoints Endpoints `json:"endpoints,omitempty"`

	// health
	Health *ServiceHealth `json:"health,omitempty"`

	// namespace m TLS
	NamespaceMTLS *MTLSStatus `json:"namespaceMTLS,omitempty"`

	// service
	Service *Service `json:"service,omitempty"`

	// validations
	Validations IstioValidations `json:"validations,omitempty"`

	// virtual services
	VirtualServices *VirtualServices `json:"virtualServices,omitempty"`

	// workloads
	Workloads WorkloadOverviews `json:"workloads,omitempty"`
}

// Validate validates this service details
func (m *ServiceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceMTLS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDetails) validateAdditionalDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalDetails); i++ {
		if swag.IsZero(m.AdditionalDetails[i]) { // not required
			continue
		}

		if m.AdditionalDetails[i] != nil {
			if err := m.AdditionalDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDetails) validateDestinationRules(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationRules) { // not required
		return nil
	}

	if m.DestinationRules != nil {
		if err := m.DestinationRules.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationRules")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDetails) validateEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	if err := m.Endpoints.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endpoints")
		}
		return err
	}

	return nil
}

func (m *ServiceDetails) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDetails) validateNamespaceMTLS(formats strfmt.Registry) error {

	if swag.IsZero(m.NamespaceMTLS) { // not required
		return nil
	}

	if m.NamespaceMTLS != nil {
		if err := m.NamespaceMTLS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaceMTLS")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDetails) validateService(formats strfmt.Registry) error {

	if swag.IsZero(m.Service) { // not required
		return nil
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDetails) validateVirtualServices(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualServices) { // not required
		return nil
	}

	if m.VirtualServices != nil {
		if err := m.VirtualServices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualServices")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDetails) validateWorkloads(formats strfmt.Registry) error {

	if swag.IsZero(m.Workloads) { // not required
		return nil
	}

	if err := m.Workloads.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("workloads")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDetails) UnmarshalBinary(b []byte) error {
	var res ServiceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
