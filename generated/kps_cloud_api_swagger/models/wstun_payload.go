// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WstunPayload wstun payload
// swagger:model WstunPayload
type WstunPayload struct {

	// ntnx:ignore
	// optional: endpoint = ip:port, if empty, ssh is assumed
	Endpoint string `json:"endpoint,omitempty"`

	// expiration
	// Required: true
	Expiration *int64 `json:"expiration"`

	// port
	// Required: true
	Port *uint32 `json:"port"`

	// private key
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// public key
	// Required: true
	PublicKey *string `json:"publicKey"`

	// service domain ID
	// Required: true
	ServiceDomainID *string `json:"serviceDomainId"`

	// ntnx:ignore
	// optional: whether to skip TLS certification verification for endpoint,
	// only relevant when TLSEndpoint is true
	SkipCertVerification bool `json:"skipCertVerification,omitempty"`

	// ntnx:ignore
	// optional: whether the endpoint is TLS, only for non ssh
	TLSEndpoint bool `json:"tlsEndpoint,omitempty"`

	// tenant ID
	// Required: true
	TenantID *string `json:"tenantId"`

	// ntnx:ignore
	URL string `json:"url,omitempty"`
}

// Validate validates this wstun payload
func (m *WstunPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceDomainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WstunPayload) validateExpiration(formats strfmt.Registry) error {

	if err := validate.Required("expiration", "body", m.Expiration); err != nil {
		return err
	}

	return nil
}

func (m *WstunPayload) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *WstunPayload) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *WstunPayload) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

func (m *WstunPayload) validateServiceDomainID(formats strfmt.Registry) error {

	if err := validate.Required("serviceDomainId", "body", m.ServiceDomainID); err != nil {
		return err
	}

	return nil
}

func (m *WstunPayload) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WstunPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WstunPayload) UnmarshalBinary(b []byte) error {
	var res WstunPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
