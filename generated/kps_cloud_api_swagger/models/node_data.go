// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NodeData node data
// swagger:model NodeData
type NodeData struct {

	// app
	App string `json:"app,omitempty"`

	// dest services
	DestServices []*ServiceName `json:"destServices"`

	// has c b
	HasCB bool `json:"hasCB,omitempty"`

	// has missing s c
	HasMissingSC bool `json:"hasMissingSC,omitempty"`

	// has v s
	HasVS bool `json:"hasVS,omitempty"`

	// Cytoscape Fields
	ID string `json:"id,omitempty"`

	// is dead
	IsDead bool `json:"isDead,omitempty"`

	// is group
	IsGroup string `json:"isGroup,omitempty"`

	// is inaccessible
	IsInaccessible bool `json:"isInaccessible,omitempty"`

	// is misconfigured
	IsMisconfigured string `json:"isMisconfigured,omitempty"`

	// is outside
	IsOutside bool `json:"isOutside,omitempty"`

	// is root
	IsRoot bool `json:"isRoot,omitempty"`

	// is service entry
	IsServiceEntry string `json:"isServiceEntry,omitempty"`

	// is unused
	IsUnused bool `json:"isUnused,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// App Fields (not required by Cytoscape)
	NodeType string `json:"nodeType,omitempty"`

	// parent
	Parent string `json:"parent,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// traffic
	Traffic []*ProtocolTraffic `json:"traffic"`

	// version
	Version string `json:"version,omitempty"`

	// workload
	Workload string `json:"workload,omitempty"`
}

// Validate validates this node data
func (m *NodeData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraffic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeData) validateDestServices(formats strfmt.Registry) error {

	if swag.IsZero(m.DestServices) { // not required
		return nil
	}

	for i := 0; i < len(m.DestServices); i++ {
		if swag.IsZero(m.DestServices[i]) { // not required
			continue
		}

		if m.DestServices[i] != nil {
			if err := m.DestServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeData) validateTraffic(formats strfmt.Registry) error {

	if swag.IsZero(m.Traffic) { // not required
		return nil
	}

	for i := 0; i < len(m.Traffic); i++ {
		if swag.IsZero(m.Traffic[i]) { // not required
			continue
		}

		if m.Traffic[i] != nil {
			if err := m.Traffic[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traffic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeData) UnmarshalBinary(b []byte) error {
	var res NodeData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
