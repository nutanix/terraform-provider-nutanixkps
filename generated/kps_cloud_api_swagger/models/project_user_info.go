// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectUserInfo project user info
// swagger:model ProjectUserInfo
type ProjectUserInfo struct {

	// Valid values for Role are: PROJECT_ADMIN, PROJECT_USER
	// Required: true
	// Enum: [PROJECT_ADMIN PROJECT_USER]
	Role *string `json:"role"`

	// User Id to be added to the project
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this project user info
func (m *ProjectUserInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var projectUserInfoTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROJECT_ADMIN","PROJECT_USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectUserInfoTypeRolePropEnum = append(projectUserInfoTypeRolePropEnum, v)
	}
}

const (

	// ProjectUserInfoRolePROJECTADMIN captures enum value "PROJECT_ADMIN"
	ProjectUserInfoRolePROJECTADMIN string = "PROJECT_ADMIN"

	// ProjectUserInfoRolePROJECTUSER captures enum value "PROJECT_USER"
	ProjectUserInfoRolePROJECTUSER string = "PROJECT_USER"
)

// prop value enum
func (m *ProjectUserInfo) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, projectUserInfoTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectUserInfo) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

func (m *ProjectUserInfo) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectUserInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectUserInfo) UnmarshalBinary(b []byte) error {
	var res ProjectUserInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
