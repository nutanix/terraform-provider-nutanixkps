// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPServiceProxyCreateParamPayload HTTPServiceProxyCreateParamPayload holds the parameters for creating HTTP Service Proxy
// swagger:model HTTPServiceProxyCreateParamPayload
type HTTPServiceProxyCreateParamPayload struct {

	// By default, a rewrite rule will be put in place to rewrite service URL path base to /
	// set this flag to true to retain the URL path base.
	// Required: true
	DisableRewriteRules *bool `json:"disableRewriteRules"`

	// Duration of the http service proxy.
	// Required: true
	Duration *string `json:"duration"`

	// JSON object representation of HTTP headers to overwrite.
	// May be useful for (https) endpoint that require
	// specific Host field for example.
	Headers string `json:"headers,omitempty"`

	// ntnx:ignore
	ID string `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// project ID
	ProjectID string `json:"projectId,omitempty"`

	// service name
	// Required: true
	ServiceName *string `json:"serviceName"`

	// Namespace of the http service, required when TYPE = SYSTEM
	ServiceNamespace string `json:"serviceNamespace,omitempty"`

	// service port
	// Required: true
	ServicePort *int64 `json:"servicePort"`

	// Whether to setup basic auth to protect the endpoint
	// Required: true
	SetupBasicAuth *bool `json:"setupBasicAuth"`

	// Whether to setup DNS entry for this service.
	// Default is false. Might be useful for services
	// that do not work with URL path.
	// However, bear in mind it may take several minutes
	// for the DNS name to propagate/resolve.
	// Required: true
	SetupDNS *bool `json:"setupDNS"`

	// Whether to skip TLS certification verification for endpoint.
	// Only relevant when TLSEndpoint is true.
	// This should be set to true if the endpoint is using a self-signed certificate.
	// Required: true
	SkipCertVerification *bool `json:"skipCertVerification"`

	// ID of Service Domain to create the http service proxy
	// Required: true
	SvcDomainID *string `json:"svcDomainId"`

	// Whether the endpoint to proxy to is a TLS endpoint.
	// Required: true
	TLSEndpoint *bool `json:"tlsEndpoint"`

	// type
	// Required: true
	// Enum: [SYSTEM PROJECT CUSTOM]
	Type *string `json:"type"`
}

// Validate validates this HTTP service proxy create param payload
func (m *HTTPServiceProxyCreateParamPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisableRewriteRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetupBasicAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetupDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkipCertVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcDomainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateDisableRewriteRules(formats strfmt.Registry) error {

	if err := validate.Required("disableRewriteRules", "body", m.DisableRewriteRules); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateServicePort(formats strfmt.Registry) error {

	if err := validate.Required("servicePort", "body", m.ServicePort); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateSetupBasicAuth(formats strfmt.Registry) error {

	if err := validate.Required("setupBasicAuth", "body", m.SetupBasicAuth); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateSetupDNS(formats strfmt.Registry) error {

	if err := validate.Required("setupDNS", "body", m.SetupDNS); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateSkipCertVerification(formats strfmt.Registry) error {

	if err := validate.Required("skipCertVerification", "body", m.SkipCertVerification); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateSvcDomainID(formats strfmt.Registry) error {

	if err := validate.Required("svcDomainId", "body", m.SvcDomainID); err != nil {
		return err
	}

	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateTLSEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("tlsEndpoint", "body", m.TLSEndpoint); err != nil {
		return err
	}

	return nil
}

var httpServiceProxyCreateParamPayloadTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEM","PROJECT","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpServiceProxyCreateParamPayloadTypeTypePropEnum = append(httpServiceProxyCreateParamPayloadTypeTypePropEnum, v)
	}
}

const (

	// HTTPServiceProxyCreateParamPayloadTypeSYSTEM captures enum value "SYSTEM"
	HTTPServiceProxyCreateParamPayloadTypeSYSTEM string = "SYSTEM"

	// HTTPServiceProxyCreateParamPayloadTypePROJECT captures enum value "PROJECT"
	HTTPServiceProxyCreateParamPayloadTypePROJECT string = "PROJECT"

	// HTTPServiceProxyCreateParamPayloadTypeCUSTOM captures enum value "CUSTOM"
	HTTPServiceProxyCreateParamPayloadTypeCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *HTTPServiceProxyCreateParamPayload) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, httpServiceProxyCreateParamPayloadTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HTTPServiceProxyCreateParamPayload) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPServiceProxyCreateParamPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPServiceProxyCreateParamPayload) UnmarshalBinary(b []byte) error {
	var res HTTPServiceProxyCreateParamPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
