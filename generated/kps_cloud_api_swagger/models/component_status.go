// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComponentStatus component status
// swagger:model ComponentStatus
type ComponentStatus struct {

	// When true, the component is necessary for Istio to function. Otherwise, it is an addon
	// Required: true
	IsCore *bool `json:"isCore"`

	// The app label value of the Istio component
	// Required: true
	Name *string `json:"name"`

	// The status of a Istio component
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this component status
func (m *ComponentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsCore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentStatus) validateIsCore(formats strfmt.Registry) error {

	if err := validate.Required("isCore", "body", m.IsCore); err != nil {
		return err
	}

	return nil
}

func (m *ComponentStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ComponentStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComponentStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComponentStatus) UnmarshalBinary(b []byte) error {
	var res ComponentStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
