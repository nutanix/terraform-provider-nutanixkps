// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceBindingParam ServiceBindingParam holds the common parameters for creating Service Binding
// swagger:model ServiceBindingParam
type ServiceBindingParam struct {

	// description
	Description string `json:"description,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// parameters
	Parameters map[string]interface{} `json:"parameters,omitempty"`

	// svc class ID
	// Required: true
	SvcClassID *string `json:"svcClassId"`

	// bind resource
	BindResource *ServiceBindingResource `json:"bindResource,omitempty"`
}

// Validate validates this service binding param
func (m *ServiceBindingParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcClassID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBindResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceBindingParam) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ServiceBindingParam) validateSvcClassID(formats strfmt.Registry) error {

	if err := validate.Required("svcClassId", "body", m.SvcClassID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceBindingParam) validateBindResource(formats strfmt.Registry) error {

	if swag.IsZero(m.BindResource) { // not required
		return nil
	}

	if m.BindResource != nil {
		if err := m.BindResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bindResource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceBindingParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceBindingParam) UnmarshalBinary(b []byte) error {
	var res ServiceBindingParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
