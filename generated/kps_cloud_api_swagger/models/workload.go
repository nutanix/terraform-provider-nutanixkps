// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Workload Workload has the details of a workload
// swagger:model Workload
type Workload struct {

	// Additional details to display, such as configured annotations
	AdditionalDetails []*AdditionalItem `json:"additionalDetails"`

	// Define if Pods related to this Workload has the label App
	// Required: true
	AppLabel *bool `json:"appLabel"`

	// Number of available replicas
	// Required: true
	AvailableReplicas *int32 `json:"availableReplicas"`

	// Creation timestamp (in RFC3339 format)
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// Number of current replicas pods that matches controller selector labels
	// Required: true
	CurrentReplicas *int32 `json:"currentReplicas"`

	// Number of desired replicas defined by the user in the controller Spec
	// Required: true
	DesiredReplicas *int32 `json:"desiredReplicas"`

	// Define if Pods related to this Workload has an IstioSidecar deployed
	// Required: true
	IstioSidecar *bool `json:"istioSidecar"`

	// Workload labels
	Labels map[string]string `json:"labels,omitempty"`

	// Name of the workload
	// Required: true
	Name *string `json:"name"`

	// Number of current workload pods
	// Required: true
	PodCount *int64 `json:"podCount"`

	// Kubernetes ResourceVersion
	// Required: true
	ResourceVersion *string `json:"resourceVersion"`

	// Runtimes and associated dashboards
	Runtimes []*Runtime `json:"runtimes"`

	// Type of the workload
	// Required: true
	Type *string `json:"type"`

	// Define if Pods related to this Workload has the label Version
	// Required: true
	VersionLabel *bool `json:"versionLabel"`

	// additional detail sample
	AdditionalDetailSample *AdditionalItem `json:"additionalDetailSample,omitempty"`

	// pods
	Pods Pods `json:"pods,omitempty"`

	// services
	Services Services `json:"services,omitempty"`
}

// Validate validates this workload
func (m *Workload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableReplicas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentReplicas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredReplicas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIstioSidecar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalDetailSample(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workload) validateAdditionalDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalDetails); i++ {
		if swag.IsZero(m.AdditionalDetails[i]) { // not required
			continue
		}

		if m.AdditionalDetails[i] != nil {
			if err := m.AdditionalDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Workload) validateAppLabel(formats strfmt.Registry) error {

	if err := validate.Required("appLabel", "body", m.AppLabel); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validateAvailableReplicas(formats strfmt.Registry) error {

	if err := validate.Required("availableReplicas", "body", m.AvailableReplicas); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validateCurrentReplicas(formats strfmt.Registry) error {

	if err := validate.Required("currentReplicas", "body", m.CurrentReplicas); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validateDesiredReplicas(formats strfmt.Registry) error {

	if err := validate.Required("desiredReplicas", "body", m.DesiredReplicas); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validateIstioSidecar(formats strfmt.Registry) error {

	if err := validate.Required("istioSidecar", "body", m.IstioSidecar); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validatePodCount(formats strfmt.Registry) error {

	if err := validate.Required("podCount", "body", m.PodCount); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validateResourceVersion(formats strfmt.Registry) error {

	if err := validate.Required("resourceVersion", "body", m.ResourceVersion); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validateRuntimes(formats strfmt.Registry) error {

	if swag.IsZero(m.Runtimes) { // not required
		return nil
	}

	for i := 0; i < len(m.Runtimes); i++ {
		if swag.IsZero(m.Runtimes[i]) { // not required
			continue
		}

		if m.Runtimes[i] != nil {
			if err := m.Runtimes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runtimes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Workload) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validateVersionLabel(formats strfmt.Registry) error {

	if err := validate.Required("versionLabel", "body", m.VersionLabel); err != nil {
		return err
	}

	return nil
}

func (m *Workload) validateAdditionalDetailSample(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalDetailSample) { // not required
		return nil
	}

	if m.AdditionalDetailSample != nil {
		if err := m.AdditionalDetailSample.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalDetailSample")
			}
			return err
		}
	}

	return nil
}

func (m *Workload) validatePods(formats strfmt.Registry) error {

	if swag.IsZero(m.Pods) { // not required
		return nil
	}

	if err := m.Pods.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pods")
		}
		return err
	}

	return nil
}

func (m *Workload) validateServices(formats strfmt.Registry) error {

	if swag.IsZero(m.Services) { // not required
		return nil
	}

	if err := m.Services.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("services")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Workload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workload) UnmarshalBinary(b []byte) error {
	var res Workload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
