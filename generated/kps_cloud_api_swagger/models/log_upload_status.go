// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// LogUploadStatus log upload status
// swagger:model LogUploadStatus
type LogUploadStatus string

const (

	// LogUploadStatusPENDING captures enum value "PENDING"
	LogUploadStatusPENDING LogUploadStatus = "PENDING"

	// LogUploadStatusSUCCESS captures enum value "SUCCESS"
	LogUploadStatusSUCCESS LogUploadStatus = "SUCCESS"

	// LogUploadStatusFAILED captures enum value "FAILED"
	LogUploadStatusFAILED LogUploadStatus = "FAILED"

	// LogUploadStatusTIMEDOUT captures enum value "TIMEDOUT"
	LogUploadStatusTIMEDOUT LogUploadStatus = "TIMEDOUT"
)

// for schema
var logUploadStatusEnum []interface{}

func init() {
	var res []LogUploadStatus
	if err := json.Unmarshal([]byte(`["PENDING","SUCCESS","FAILED","TIMEDOUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logUploadStatusEnum = append(logUploadStatusEnum, v)
	}
}

func (m LogUploadStatus) validateLogUploadStatusEnum(path, location string, value LogUploadStatus) error {
	if err := validate.Enum(path, location, value, logUploadStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this log upload status
func (m LogUploadStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogUploadStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
