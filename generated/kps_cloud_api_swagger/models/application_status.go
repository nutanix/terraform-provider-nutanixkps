// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationStatus ApplicationStatus - the contents of an ApplicationStatus
// swagger:model ApplicationStatus
type ApplicationStatus struct {

	// application ID
	// Required: true
	ApplicationID *string `json:"applicationId"`

	// ntnx:ignore
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// edge ID
	// Required: true
	EdgeID *string `json:"edgeId"`

	// tenant ID
	// Required: true
	TenantID *string `json:"tenantId"`

	// ntnx:ignore
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// ntnx:ignore
	Version float64 `json:"version,omitempty"`

	// app status
	// Required: true
	AppStatus *AppStatus `json:"appStatus"`
}

// Validate validates this application status
func (m *ApplicationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationStatus) validateApplicationID(formats strfmt.Registry) error {

	if err := validate.Required("applicationId", "body", m.ApplicationID); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationStatus) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationStatus) validateEdgeID(formats strfmt.Registry) error {

	if err := validate.Required("edgeId", "body", m.EdgeID); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationStatus) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationStatus) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationStatus) validateAppStatus(formats strfmt.Registry) error {

	if err := validate.Required("appStatus", "body", m.AppStatus); err != nil {
		return err
	}

	if m.AppStatus != nil {
		if err := m.AppStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationStatus) UnmarshalBinary(b []byte) error {
	var res ApplicationStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
