{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "OpenAPI documentation for public facing Karbon Platform Services API\n\nThis API documentation is generated from source code\nusing go-swagger. Do not edit the generated kps_api.json\ndirectly!",
    "title": "Karbon Platform Services API reference.",
    "contact": {
      "name": "Karbon Platform Services API",
      "email": "karbon-platform-services-api@nutanix.com"
    },
    "license": {
      "name": "Copyright Nutanix Inc. All rights reserved"
    },
    "version": "1.0"
  },
  "host": "localhost",
  "paths": {
    "/v1.0/applications": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all applications.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Get all applications.",
        "operationId": "ApplicationListV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ApplicationListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create an application.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Create an application.",
        "operationId": "ApplicationCreateV2",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Describes the application creation request.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationV2"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/applications/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the application with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Get application by application ID.",
        "operationId": "ApplicationGetV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ApplicationGetResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a specific application with ID {id}.\nYou cannot change the project associated with the application or the application ID.\nYou can change all other attributes.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Update a specific application with ID {id}.",
        "operationId": "ApplicationUpdateV3",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationV2"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the application with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Delete application specified by the application ID.",
        "operationId": "ApplicationDeleteV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/applications/{id}/containers/{edgeId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Gets the containers of an application with the given ID {id} running on edge with id {edgeId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Get containers of an application specified by Application ID running on a specific edge.",
        "operationId": "GetApplicationContainers",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetApplicationContainersResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/applicationstatuses": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves status for all applications.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application_Status"
        ],
        "summary": "Get status for all applications.",
        "operationId": "ApplicationStatusListV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ApplicationStatusListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates an application status.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application_Status"
        ],
        "summary": "Create application status.  ntnx:ignore",
        "operationId": "ApplicationStatusCreateV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/applicationstatuses/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieve status for an application with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application_Status"
        ],
        "summary": "Get application status by application ID.",
        "operationId": "ApplicationStatusGetV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ApplicationStatusListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the application with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application_Status"
        ],
        "summary": "Delete an application by application ID.  ntnx:ignore",
        "operationId": "ApplicationStatusDeleteV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/auditlogs": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all audit logs for a tenant.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auditlog"
        ],
        "summary": "Lists audit logs. ntnx:ignore",
        "operationId": "AuditLogListV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Start",
            "description": "Start time for query. Format: yyyy-mm-dd hh:mm:ss, the hh:mm:ss part is optional.",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "End",
            "description": "End time for query. Format: yyyy-mm-dd hh:mm:ss, the hh:mm:ss part is optional.",
            "name": "end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AuditLogListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/auditlogs/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the audit log entries for the given request ID or date.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auditlog"
        ],
        "summary": "Get audit log by request ID or date. ntnx:ignore",
        "operationId": "AuditLogGetV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AuditLogGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/auditlogsV2": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will insert audit log for a tenant.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auditlog"
        ],
        "summary": "Inserts Audit logs (used internally). ntnx:ignore",
        "operationId": "InsertAuditLogV2",
        "parameters": [
          {
            "description": "This is events upsert request description",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuditLogV2InsertRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AuditLogV2ListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all audit logs matching the filter for a tenant.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auditlog"
        ],
        "summary": "Lists audit logs matching the provided filter.",
        "operationId": "QueryAuditLogsV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AuditLogV2ListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/categories": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all categories.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Category"
        ],
        "summary": "Get all categories.",
        "operationId": "CategoryListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CategoryListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a category.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Category"
        ],
        "summary": "Create a category.",
        "operationId": "CategoryCreateV2",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "A description of the category creation request.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/categories/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a category with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Category"
        ],
        "summary": "Get a category by its ID.",
        "operationId": "CategoryGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CategoryGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a category with the given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Category"
        ],
        "summary": "Update a category by its ID.",
        "operationId": "CategoryUpdateV3",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete the category with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Category"
        ],
        "summary": "Delete category.",
        "operationId": "CategoryDeleteV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/categoriesusage": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all categories usage.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Category"
        ],
        "summary": "Get all categories usage. ntnx:ignore",
        "operationId": "CategoryUsageList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CategoryUsageListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/categoriesusage/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves detailed usage of a category with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Category"
        ],
        "summary": "Get detailed usage of a category by its ID. ntnx:ignore",
        "operationId": "CategoryUsageGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CategoryUsageGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/certificates": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Certificates for devices requiring them.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Certificate"
        ],
        "summary": "Create certificates.",
        "operationId": "CertificatesCreateV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Certificates",
            "schema": {
              "$ref": "#/definitions/Certificates"
            }
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/cloudprofiles": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all cloud service provider profiles.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cloud_Profile"
        ],
        "summary": "Get all cloud service profiles.",
        "operationId": "CloudProfileList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CloudProfileListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a cloud service profile.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cloud_Profile"
        ],
        "summary": "Create a cloud profile.",
        "operationId": "CloudProfileCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "Description for the cloud profile.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/cloudprofiles/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a cloud service profile with a given ID {id}",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cloud_Profile"
        ],
        "summary": "Get a cloud profile according to profile ID.",
        "operationId": "CloudProfileGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CloudProfileGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update an existing cloud profile with a given ID {id}",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cloud_Profile"
        ],
        "summary": "Update a cloud profile by its ID.",
        "operationId": "CloudProfileUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a cloud service profile with the given ID {id}",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cloud_Profile"
        ],
        "summary": "Delete a cloud profile by its ID.",
        "operationId": "CloudProfileDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/containerregistries": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all container registry profiles.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Container_Registry"
        ],
        "summary": "Get container registry profiles.",
        "operationId": "ContainerRegistryListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ContainerRegistryListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a container registry profile.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Container_Registry"
        ],
        "summary": "Create a container registry profile.",
        "operationId": "ContainerRegistryCreateV2",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Describes the container registry profile.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContainerRegistryV2"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/containerregistries/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a container registry profile with a given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Container_Registry"
        ],
        "summary": "Get a container registry profile by profile ID.",
        "operationId": "ContainerRegistryGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ContainerRegistryGetResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a container registry profile.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Container_Registry"
        ],
        "summary": "Update a container registry profile.",
        "operationId": "ContainerRegistryUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContainerRegistryV2"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes a container registry profile with a given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Container_Registry"
        ],
        "summary": "Delete a container registry profile by profile ID.",
        "operationId": "ContainerRegistryDeleteV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datadriverclasses": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all data driver classes.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Class"
        ],
        "summary": "Get all data driver class. ntnx:ignore",
        "operationId": "DataDriverClassList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataDriverClassListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a data driver class.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Class"
        ],
        "summary": "Create a data driver class. ntnx:ignore",
        "operationId": "DataDriverClassCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Parameters and values used when creating or updating a data driver class",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataDriverClass"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datadriverclasses/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get a data driver class according to its given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Class"
        ],
        "summary": "Get a data driver class by ID. ntnx:ignore",
        "operationId": "DataDriverClassGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataDriverClassGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a data driver class.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Class"
        ],
        "summary": "Update a data driver class. ntnx:ignore",
        "operationId": "DataDriverClassUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "Parameters and values used when creating or updating a data driver class",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataDriverClass"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a data driver with a given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Class"
        ],
        "summary": "Delete a specific data driver class. ntnx:ignore",
        "operationId": "DataDriverClassDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datadriverconfigs": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get a data driver config parameters according to its given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Config"
        ],
        "summary": "Get a data driver config parameters by ID. ntnx:ignore",
        "operationId": "DataDriverConfigList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataDriverConfigListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a data driver config parameters.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Config"
        ],
        "summary": "Create a data driver config parameters. ntnx:ignore",
        "operationId": "DataDriverConfigCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Parameters and values used when creating or updating a data driver config",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataDriverConfig"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datadriverconfigs/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get a data driver config parameters according to its given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Config"
        ],
        "summary": "Get a data driver config parameters by ID. ntnx:ignore",
        "operationId": "DataDriverConfigGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataDriverConfigGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a data driver config parameters.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Config"
        ],
        "summary": "Update a data driver config parameters. ntnx:ignore",
        "operationId": "DataDriverConfigUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "Parameters and values used when creating or updating a data driver config",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataDriverConfig"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a data driver config parameters with a given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Config"
        ],
        "summary": "Delete a specific data driver config parameters. ntnx:ignore",
        "operationId": "DataDriverConfigDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datadriverinstances": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all data driver isntances.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Instance"
        ],
        "summary": "Get all data driver instances. ntnx:ignore",
        "operationId": "DataDriverInstancesList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataDriverInstanceListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a data driver instance.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Instance"
        ],
        "summary": "Create a data driver instance. ntnx:ignore",
        "operationId": "DataDriverInstanceCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Parameters and values used when creating or updating a data driver instance",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataDriverInstance"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datadriverinstances/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get a data driver instance according to its given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Instance"
        ],
        "summary": "Get a data driver instance by ID. ntnx:ignore",
        "operationId": "DataDriverInstanceGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataDriverInstanceGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a data driver instance.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Instance"
        ],
        "summary": "Update a data driver instance. ntnx:ignore",
        "operationId": "DataDriverInstanceUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "Parameters and values used when creating or updating a data driver instance",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataDriverInstance"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a data driver instance with a given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Driver_Instance"
        ],
        "summary": "Delete a specific data driver instance. ntnx:ignore",
        "operationId": "DataDriverInstanceDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datapipelines": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all data pipelines for a tenant.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Pipeline"
        ],
        "summary": "Gets data pipelines.",
        "operationId": "DataPipelineList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataPipelineListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a data pipeline.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Pipeline"
        ],
        "summary": "Creates a data pipeline.",
        "operationId": "DataPipelineCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is a data pipeline creation request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataPipeline"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datapipelines/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a data pipelines with a given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Pipeline"
        ],
        "summary": "Lists data pipeline by its ID.",
        "operationId": "DataPipelineGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataPipelineGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a data pipeline with a given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Pipeline"
        ],
        "summary": "Updates a data pipeline by its ID",
        "operationId": "DataPipelineUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataPipeline"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete the data pipeline with the given id {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Pipeline"
        ],
        "summary": "Deletes data pipeline by its ID.",
        "operationId": "DataPipelineDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datapipelines/{id}/containers/{edgeId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Gets the containers of a data pipeline with the given ID {id} running on edge with id {edgeId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Pipeline"
        ],
        "summary": "Get containers of a data pipeline specified by Datapipeline ID running on a specific edge.",
        "operationId": "GetDataPipelineContainers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetDataPipelineContainersResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datasources": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all data sources.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Source"
        ],
        "summary": "Get all data sources.",
        "operationId": "DataSourceListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataSourceListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a data source.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Source"
        ],
        "summary": "Create a data source.",
        "operationId": "DataSourceCreateV2",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is a datasources creation request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataSourceV2"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datasources/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get a data source according to its given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Source"
        ],
        "summary": "Get a data source according to its ID.",
        "operationId": "DataSourceGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataSourceGetResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a data source. You cannot update or change the edge associated with the data source by using this call.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Source"
        ],
        "summary": "Update a data source.",
        "operationId": "DataSourceUpdateV3",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataSourceV2"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a data source with a given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Source"
        ],
        "summary": "Delete a specific data source.",
        "operationId": "DataSourceDeleteV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/datasources/{id}/artifacts": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the artifacts after deploying the data source with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Source"
        ],
        "summary": "Get data source artifacts according to its ID.",
        "operationId": "DataSourceGetArtifactV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataSourceGetArtifactResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create data source artifact according to its given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Source"
        ],
        "summary": "Create data source artifact according to its ID. ntnx:ignore",
        "operationId": "DataSourceCreateArtifactV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "This is a data source artifact creation request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataSourceArtifact"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/dockerprofiles": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all DockerProfiles.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Container_Registry"
        ],
        "summary": "Get DockerProfiles. ntnx:ignore",
        "operationId": "DockerProfileListV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DockerProfileListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edgecluster/{id}/infraconfig": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a edgeCluster config with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Infra_Config"
        ],
        "summary": "Get a edgeCluster config by its ID. ntnx:ignore",
        "operationId": "InfraConfigGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/InfraConfigGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edgeinventorydelta": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the edge inventory delta: changes for any entity associated with the edge.\nEntities are projects, applications, data pipelines, functions, and so on.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge_Inventory_Delta"
        ],
        "summary": "Get the edge inventory delta. ntnx:ignore",
        "operationId": "GetEdgeInventoryDelta",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Payload",
            "description": "A description of the get inventory delta request.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EdgeInventoryDeltaPayload"
            }
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "EdgeID",
            "description": "ID of Edge to impersonate. Only applicable if called as infra admin.",
            "name": "edgeId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetEdgeInventoryDeltaResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edges": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all edges for a tenant.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge"
        ],
        "summary": "Get edges. ntnx:ignore",
        "operationId": "EdgeListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create an edge.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge"
        ],
        "summary": "Create edge. ntnx:ignore",
        "operationId": "EdgeCreateV2",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Parameters and values used when creating an edge",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EdgeV2"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edges/upgrade": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Upgrades the edge software.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge_Upgrade"
        ],
        "summary": "Upgrade the edge software. ntnx:ignore",
        "operationId": "ExecuteEdgeUpgradeV2",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is an execute edge upgrade request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecuteEdgeUpgrade"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edges/{edgeId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the edge with the given ID {edgeId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge"
        ],
        "summary": "Get edge by ID. ntnx:ignore",
        "operationId": "EdgeGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeGetResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the edge with the given ID  {edgeId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge"
        ],
        "summary": "Delete edge by ID. ntnx:ignore",
        "operationId": "EdgeDeleteV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edges/{edgeId}/datasources": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all data sources associated with a edge by its ID {edgeId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Source"
        ],
        "summary": "Get all data sources associated with an edge.",
        "operationId": "EdgeGetDatasourcesV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataSourceListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edges/{edgeId}/info": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Once installed, the Karbon Platform Services Service Domain software provides the service domain infrastructure.\n\nRetrieves all resource, build, and version details for a given service domain by ID.\nThe ID is the service domain serial number used when you added the service domain.\n\nThis request also requires an Authorization header which specifies your API key.\nThis example Python request is for a service domain with serial number 5f31b963-acac-4368-a157-0c7dc0d32000,\nwhere bearer_api_key is your actual API key.\n\nimport http.client\n\nconn = http.client.HTTPSConnection(\"karbon.nutanix.com\")\nheaders = { 'authorization': \"bearer_api_key\" }\nconn.request(\"GET\", \"//v1.0/edges/5f31b963-acac-4368-a157-0c7dc0d32000/info\", headers=headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge_Info"
        ],
        "summary": "Get all edge (service domain) information by edge ID. ntnx:ignore",
        "operationId": "EdgeInfoGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeInfoGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edges/{edgeId}/sensors": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all sensors for an edge by edge ID {edgeId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sensor"
        ],
        "summary": "Get edge sensors by edge ID. ntnx:ignore",
        "operationId": "EdgeGetSensorsV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SensorListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edges/{edgeId}/upgradecompatible": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves compatible software upgrades for the given edge ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge_Upgrade"
        ],
        "summary": "Lists compatible edge software upgrades by edge ID. ntnx:ignore",
        "operationId": "EdgeGetUpgradesV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeUpgradeCompatibleListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edges/{id}": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates an edge by its ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge"
        ],
        "summary": "Update edge by its ID. ntnx:ignore",
        "operationId": "EdgeUpdateV3",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EdgeV2"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edges/{id}/info": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Once installed, the Xi IoT edge software provides the service domain infrastructure.\n\nUpdate resource, build, and version details for a given service domain VM by ID.\nThe ID is the service domain serial number used when you added the service domain.\n\nThis request also requires an Authorization header which specifies your API key.\nIt returns the updated service domain information in JSON format.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge_Info"
        ],
        "summary": "Update edge resource, build, and version details for a given edge ID. ntnx:ignore",
        "operationId": "EdgeInfoUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EdgeUsageInfo"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edgescompatibleupgrades": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Lists all possible software upgrades that are available for all detected edges.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge_Upgrade"
        ],
        "summary": "Lists available edge software upgrades. ntnx:ignore",
        "operationId": "EdgeUpgradeListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeUpgradeListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/edgesinfo": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all edge resource, build, and version details.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge_Info"
        ],
        "summary": "Get edge resource, build, and version details. ntnx:ignore",
        "operationId": "EdgeInfoListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeInfoListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/events": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will insert/update events for a tenant.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Event"
        ],
        "summary": "Upserts events (used internally). ntnx:ignore",
        "operationId": "UpsertEventsV2",
        "parameters": [
          {
            "description": "This is events upsert request description",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventUpsertRequest"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EventListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all events matching the filter for a tenant.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Event"
        ],
        "summary": "Lists events matching the provided filter.",
        "operationId": "QueryEventsV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventFilterV2"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EventListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/functions": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all functions.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Function"
        ],
        "summary": "Get functions.",
        "operationId": "FunctionList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FunctionListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a function.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Function"
        ],
        "summary": "Create a function.",
        "operationId": "FunctionCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Describes the function creation request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Function"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/functions/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the function with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Function"
        ],
        "summary": "Get a function by its ID.",
        "operationId": "FunctionGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FunctionGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a function with the given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Function"
        ],
        "summary": "Update function by its ID",
        "operationId": "FunctionUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Function"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the function with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Function"
        ],
        "summary": "Delete a function by its ID.",
        "operationId": "FunctionDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/helm/apps": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a Helm Chart based Application.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Helm"
        ],
        "summary": "Create Helm Application.",
        "operationId": "HelmApplicationCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "file",
            "x-go-name": "Chart",
            "name": "chart",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-go-name": "Values",
            "name": "values",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Application",
            "name": "application",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/helm/apps/{id}": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a Helm Chart based Application.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Helm"
        ],
        "summary": "Update Helm Application.",
        "operationId": "HelmApplicationUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "file",
            "x-go-name": "Chart",
            "name": "chart",
            "in": "formData"
          },
          {
            "type": "file",
            "x-go-name": "Values",
            "name": "values",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Application",
            "name": "application",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/helm/template": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Run Helm Template to render Helm Chart.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Helm"
        ],
        "summary": "Run Helm Template.",
        "operationId": "HelmTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "file",
            "x-go-name": "Chart",
            "name": "chart",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-go-name": "Values",
            "name": "values",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Release",
            "name": "release",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Namespace",
            "name": "namespace",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HelmTemplateResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/helmapp": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a new helm chart based app and return the charts uuid.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Create a new helm chart based app. ntnx:ignore",
        "operationId": "HelmAppCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "file",
            "name": "Payload",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/helmapp/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the application with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Get application by application ID. ntnx:ignore",
        "operationId": "HelmAppGetYaml",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HelmAppGetYamlResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/helmapp/{id}/values": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Adds a values file to the helm chart identified by id.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Adds a values file to the helm chart identified by id. ntnx:ignore",
        "operationId": "HelmValuesCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "file",
            "name": "Payload",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/httpserviceproxies": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all HTTP service proxies.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "HTTPServiceProxy"
        ],
        "summary": "Get all HTTP service proxies.",
        "operationId": "HTTPServiceProxyList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Type",
            "description": "Type of the HTTP Service Proxy",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "description": "HTTP Service Proxy Project ID",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "HTTP Service Proxy Service Domain ID",
            "name": "svcDomainId",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of the HTTP Service Proxy",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ServiceName",
            "description": "ServiceName of the HTTP Service Proxy",
            "name": "serviceName",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ServiceNamespace",
            "description": "ServiceNamespace of the HTTP Service Proxy",
            "name": "serviceNamespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HTTPServiceProxyListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a HTTP service proxy.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "HTTPServiceProxy"
        ],
        "summary": "Create a HTTP service proxy.",
        "operationId": "HTTPServiceProxyCreate",
        "parameters": [
          {
            "x-go-name": "Payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HTTPServiceProxyCreateParamPayload"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HTTPServiceProxyCreateResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/httpserviceproxies/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a HTTP service proxy with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "HTTPServiceProxy"
        ],
        "summary": "Get a HTTP service proxy by its ID.",
        "operationId": "HTTPServiceProxyGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HTTPServiceProxyGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a HTTP service proxy with the given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "HTTPServiceProxy"
        ],
        "summary": "Update a HTTP service proxy by its ID.",
        "operationId": "HTTPServiceProxyUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HTTPServiceProxyUpdateParamPayload"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HTTPServiceProxyUpdateResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete the HTTP service proxy with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "HTTPServiceProxy"
        ],
        "summary": "Delete HTTP service proxy.",
        "operationId": "HTTPServiceProxyDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/isemailavailable": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Checks if the given email is available for create user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Check if the given email is available for create user. ntnx:ignore",
        "operationId": "IsEmailAvailable",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Email",
            "description": "Email to query for availability.",
            "name": "email",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IsEmailAvailableResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/k8sdashboard/{svcDomainId}/adminKubeConfig": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get Admin KubeConfig for kubectl. Caller must be infra admin.\nsvcDomainId is ID of service domain or kubernetes cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "K8sDashboard"
        ],
        "summary": "Get Admin KubeConfig for kubectl. ntnx:ignore",
        "operationId": "K8sDashboardGetAdminKubeConfig",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/K8sDashboardKubeConfigResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/k8sdashboard/{svcDomainId}/adminToken": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get Admin Token for Kubernetes Dashboard. Caller must be infra admin.\nsvcDomainId is ID of service domain or kubernetes cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "K8sDashboard"
        ],
        "summary": "Get Admin Token for Kubernetes Dashboard. ntnx:ignore",
        "operationId": "K8sDashboardGetAdminToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/K8sDashboardTokenResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/k8sdashboard/{svcDomainId}/userKubeConfig": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get User KubeConfig for kubectl.\nsvcDomainId is ID of service domain or kubernetes cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "K8sDashboard"
        ],
        "summary": "Get User KubeConfig for kubectl. ntnx:ignore",
        "operationId": "K8sDashboardGetUserKubeConfig",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/K8sDashboardKubeConfigResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/k8sdashboard/{svcDomainId}/userToken": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get User Token for Kubernetes Dashboard.\nsvcDomainId is ID of service domain or kubernetes cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "K8sDashboard"
        ],
        "summary": "Get User Token for Kubernetes Dashboard. ntnx:ignore",
        "operationId": "K8sDashboardGetUserToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/K8sDashboardTokenResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/k8sdashboard/{svcDomainId}/viewonlyKubeConfig": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get Viewonly KubeConfig for kubectl. Caller must have viewonly access.\nsvcDomainId is ID of service domain or kubernetes cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "K8sDashboard"
        ],
        "summary": "Get Viewonly KubeConfig for kubectl. ntnx:ignore",
        "operationId": "K8sDashboardGetViewonlyKubeConfig",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/K8sDashboardKubeConfigResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/k8sdashboard/{svcDomainId}/viewonlyToken": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get Viewonly Token for Kubernetes Dashboard. Caller must have viewonly access.\nsvcDomainId is ID of service domain or kubernetes cluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "K8sDashboard"
        ],
        "summary": "Get Viewonly Token for Kubernetes Dashboard. ntnx:ignore",
        "operationId": "K8sDashboardGetViewonlyToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/K8sDashboardTokenResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/k8sdashboard/{svcDomainId}/viewonlyUsers": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all kubernetes dashboard viewonly users associated with a Service Domain by its ID {svcDomainId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "K8sDashboard"
        ],
        "summary": "Get all kubernetes dashboard viewonly users associated with a Service Domain / Karbon Cluster. ntnx:ignore",
        "operationId": "K8sDashboardGetViewonlyUsers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/K8sDashboardViewonlyUserListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/k8sdashboard/{svcDomainId}/viewonlyUsersAdd": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Add kubernetes dashboard viewonly users to a Service Domain by its ID {svcDomainId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "K8sDashboard"
        ],
        "summary": "Add kubernetes dashboard viewonly users to a Service Domain / Karbon Cluster. ntnx:ignore",
        "operationId": "K8sDashboardAddViewonlyUsers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/K8sDashboardViewonlyUserParams"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/K8sDashboardViewonlyUserUpdateResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/k8sdashboard/{svcDomainId}/viewonlyUsersRemove": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Remove kubernetes dashboard viewonly users from a Service Domain by its ID {svcDomainId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "K8sDashboard"
        ],
        "summary": "Remove kubernetes dashboard viewonly users from a Service Domain / Karbon Cluster. ntnx:ignore",
        "operationId": "K8sDashboardRemoveViewonlyUsers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/K8sDashboardViewonlyUserParams"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/K8sDashboardViewonlyUserUpdateResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the status of Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "root",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/statusInfo"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/config": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the config of Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "getConfig",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/statusInfo"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/grafana": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get the grafana URL and other descriptors",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "grafanaInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/grafanaInfoResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/istio/permissions": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the caller permissions on new Istio Config objects",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "getPermissions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigPermissions"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/istio/status": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get the status of each components needed in the control plane",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "istioStatus",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioStatusResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/iter8": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to check if threescale adapter is present in the cluster and if user can write adapter config",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "getIter8",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8StatusResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/iter8/experiments": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch iter8 experiments for all namespaces user have access.\nUser can define a comman separated list of namespaces.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "iter8Experiments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8ExperimentsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/iter8/experiments/namespaces/{namespace}/name/{name}": {
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to delete   iter8 experiments",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "deleteIter8Experiments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The name param",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8StatusResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/iter8/experiments/{namespace}/name/{name}": {
      "patch": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to update new iter8 experiment (for abort purpose)",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "patchIter8Experiments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The name param",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8ExperimentGetDetailResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/iter8/metrics": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the analytics metrics",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "getIter8Metrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8StatusResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/iter8/namespaces/{namespace}/experiments": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to create new iter8 experiments for a given namespace.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "postIter8Experiments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8ExperimentGetDetailResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/iter8/namespaces/{namespace}/experiments/{name}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch iter8 experiments by namespace and name.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "getIter8Experiments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The name param",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8ExperimentGetDetailResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/jaeger": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get the jaeger URL and other descriptors",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "jaegerInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/jaegerInfoResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/mesh/tls": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get TLS status for the whole mesh",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "meshTls",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/meshTlsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the list of the available namespaces",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "namespaceList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceList"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/graph": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "The backing JSON for a namespaces graph.",
        "operationId": "graphNamespaces",
        "parameters": [
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [deadNode, istio, responseTime, securityPolicy, serviceEntry, sidecarsCheck, unusedNode].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "x-go-name": "Name",
            "description": "App box grouping characteristic. Available groupings: [app, none, version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for injecting the requested service node between source and destination nodes.",
            "name": "injectServiceNodes",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Comma-separated list of namespaces to include in the graph. The namespaces must be accessible to the client.",
            "name": "namespaces",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/applications/{app}/graph": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "The backing JSON for an app node detail graph. (supported graphTypes: app | versionedApp)",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "graphApp",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [deadNode, istio, responseTime, securityPolicy, serviceEntry, sidecarsCheck, unusedNode].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "x-go-name": "Name",
            "description": "App box grouping characteristic. Available groupings: [app, none, version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for injecting the requested service node between source and destination nodes.",
            "name": "injectServiceNodes",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/applications/{app}/versions/{version}/graph": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "The backing JSON for a versioned app node detail graph. (supported graphTypes: app | versionedApp)",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "graphAppVersion",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app version (label value).",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [deadNode, istio, responseTime, securityPolicy, serviceEntry, sidecarsCheck, unusedNode].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "x-go-name": "Name",
            "description": "App box grouping characteristic. Available groupings: [app, none, version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for injecting the requested service node between source and destination nodes.",
            "name": "injectServiceNodes",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/apps": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the list of apps for a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "appList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/appListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/apps/{app}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the app details",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "appDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/appDetails"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/apps/{app}/dashboard": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch dashboard to be displayed, related to a single app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "appDashboard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/apps/{app}/health": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get health associated to the given app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "appHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/appHealthResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/apps/{app}/metrics": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch metrics to be displayed, related to a single app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "appMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Filters metrics by the specified version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kialimetricsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/apps/{app}/overview": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the overview info of a given application",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "appOverview",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/appOverviewResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/customdashboard/{dashboard}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch a custom dashboard",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "customDashboard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The dashboard resource name.",
            "name": "dashboard",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "In custom dashboards, additional labels that are made available for grouping in the UI, regardless which aggregations are defined in the MonitoringDashboard CR",
            "name": "additionalLabels",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "In custom dashboards, labels filters to use when fetching metrics, formatted as key:value pairs. Ex: \"app:foo,version:bar\".",
            "name": "labelsFilters",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/health": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get health for all objects in the given namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "namespaceHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceAppHealthResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/istio": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the list of Istio Config of a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "istioConfigList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigList"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/istio/{object_type}": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to create an Istio object by using an Istio Config item",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "istioConfigCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^(gateways|virtualservices|destinationrules|serviceentries|rules|quotaspecs|quotaspecbindings)$",
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object type.",
            "name": "object_type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigDetailsResponse"
          },
          "201": {
            "$ref": "#/responses/istioConfigDetailsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/istio/{object_type}/{object}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the Istio Config of an Istio object",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "istioConfigDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object name.",
            "name": "object",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^(gateways|virtualservices|destinationrules|serviceentries|rules|quotaspecs|quotaspecbindings)$",
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object type.",
            "name": "object_type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigDetailsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to delete the Istio Config of an (arbitrary) Istio object",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "istioConfigDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object name.",
            "name": "object",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^(gateways|virtualservices|destinationrules|serviceentries|rules|quotaspecs|quotaspecbindings)$",
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object type.",
            "name": "object_type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "patch": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to update the Istio Config of an Istio object used for templates and adapters using Json Merge Patch strategy",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "istioConfigUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object name.",
            "name": "object",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^(gateways|virtualservices|destinationrules|serviceentries|rules|quotaspecs|quotaspecbindings)$",
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object type.",
            "name": "object_type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigDetailsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/metrics": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch metrics to be displayed, related to a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "namespaceMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kialimetricsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/overview": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the overview info of a given namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "namespaceOverview",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceOverviewResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/pods/{pod}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get pod details",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "podDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The pod name.",
            "name": "pod",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadDetails"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/pods/{pod}/logs": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get pod logs",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "podLogs",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The pod container name. Optional for single-container pod. Otherwise required.",
            "name": "container",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The pod name.",
            "name": "pod",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The start time for fetching logs. UNIX time in seconds. Default is all logs.",
            "name": "sinceTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadDetails"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/services": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the details of a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "serviceList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/services/{service}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the details of a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "serviceDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceDetailsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/services/{service}/dashboard": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch dashboard to be displayed, related to a single service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "serviceDashboard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/services/{service}/errortraces": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the number of traces in error for a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "errorTraces",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/errorTracesResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/services/{service}/graph": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "The backing JSON for a service node detail graph.",
        "operationId": "graphService",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [deadNode, istio, responseTime, securityPolicy, serviceEntry, sidecarsCheck, unusedNode].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "x-go-name": "Name",
            "description": "App box grouping characteristic. Available groupings: [app, none, version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/services/{service}/health": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get health associated to the given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "serviceHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceHealthResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/services/{service}/metrics": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch metrics to be displayed, related to a single service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "serviceMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Filters metrics by the specified version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kialimetricsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/services/{service}/overview": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the overview info of a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "serviceOverview",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceOverviewResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/services/{service}/spans": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get Jaeger spans for a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "spansList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/spansResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/services/{service}/traces": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get a specific trace of a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "tracesDetail",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tracesDetailResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/tls": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get TLS status for the given namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "namespaceTls",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceTlsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/validations": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get validation summary for all objects in the given namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "namespaceValidations",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceValidationSummaryResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/workloads": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the list of workloads for a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "workloadList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the workload details",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "workloadDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadDetails"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}/dashboard": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch dashboard to be displayed, related to a single workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "workloadDashboard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}/graph": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "The backing JSON for a workload node detail graph.",
        "operationId": "graphWorkload",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [deadNode, istio, responseTime, securityPolicy, serviceEntry, sidecarsCheck, unusedNode].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "x-go-name": "Name",
            "description": "App box grouping characteristic. Available groupings: [app, none, version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for injecting the requested service node between source and destination nodes.",
            "name": "injectServiceNodes",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}/health": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get health associated to the given workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "workloadHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadHealthResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}/metrics": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch metrics to be displayed, related to a single workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "workloadMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Filters metrics by the specified version.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kialimetricsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/namespaces/{namespace}/workloads/{workload}/overview": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the overview info of a given workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "workloadOverview",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadOverviewResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/status": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get the status of Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "operationId": "getStatus",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/statusInfo"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/threescale": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to check if threescale adapter is present in the cluster and if user can write adapter config",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "getThreeScaleInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/threeScaleInfoResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/threescale/handlers": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to fetch threescale handlers generated from Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "getThreeScaleHandlers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/threeScaleHandlersResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to create a new threescale handler+instance generated by Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "postThreeScaleHandlers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/threeScaleHandlersResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/threescale/handlers/{threescaleHandlerName}": {
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to delete an existing threescale handler+instance generated by Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "deleteThreeScaleHandler",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The ThreeScaleHandler name.",
            "name": "threescaleHandlerName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/threeScaleHandlersResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "patch": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to update an existing threescale handler generated by Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "patchThreeScaleHandler",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The ThreeScaleHandler name.",
            "name": "threescaleHandlerName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/threeScaleHandlersResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/threescale/namespaces/{namespace}/services": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to create a new threescale rule for a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "postThreeScaleService",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/threeScaleRuleResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kiali/threescale/namespaces/{namespace}/services/{service}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to get an existing threescale rule for a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "getThreeScaleService",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/threeScaleRuleResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to delete an existing threescale rule for a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "deleteThreeScaleService",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "patch": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Endpoint to update an existing threescale rule for a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Kiali"
        ],
        "summary": "ntnx:ignore",
        "operationId": "patchThreeScaleService",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "ID of ServiceDomain to access.",
            "name": "serviceDomain",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u0026lt;token\u003e, with \u0026lt;token\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/threeScaleRuleResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kubernetescluster-installer": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "\nGets the kubernetes cluster helm installer.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kubernetes_Cluster"
        ],
        "summary": "Get the kubernetes clusters helm installer.",
        "operationId": "KubernetesClusterInstaller",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/KubernetesClusterInstallerResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kubernetesclusters": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all kubernetes clusters.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kubernetes_Cluster"
        ],
        "summary": "Get all kubernetes clusters.",
        "operationId": "KubernetesClustersList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/KubernetesClustersListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a kubernetes cluster.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kubernetes_Cluster"
        ],
        "summary": "Create a kubernetes cluster.",
        "operationId": "KubernetesClustersCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Describes the kubernetes cluster creation request.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubernetesCluster"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kubernetesclusters/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kubernetes_Cluster"
        ],
        "summary": "Get single kubernetes cluster.",
        "operationId": "KubernetesClustersGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/KubernetesClustersGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a kubernetes cluster by its ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kubernetes_Cluster"
        ],
        "summary": "Update a kubernetes cluster by its ID.",
        "operationId": "KubernetesClustersUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubernetesCluster"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes a kubernetes cluster by its ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kubernetes_Cluster"
        ],
        "summary": "Delete a kubernetes cluster as specified by its ID.",
        "operationId": "KubernetesClustersDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/kubernetesclusters/{id}/handle": {
      "post": {
        "description": "Retrieves the certificate and private key for the kubernetes cluster by its given ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kubernetes_Cluster"
        ],
        "summary": "Retrieves the certificate and private key for the kubernetes cluster by its given ID. ntnx:ignore",
        "operationId": "KubernetesClustersHandle",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubernetesClusterHandlePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/KubernetesClustersHandleResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/login": {
      "post": {
        "description": "Lets the user log in.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Lets the user log in.",
        "operationId": "LoginCallV2",
        "parameters": [
          {
            "description": "This is a login credential",
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginResponseWrapper"
          },
          "401": {
            "$ref": "#/responses/LoginFailedError"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/login/logintoken": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Generates a login token equivalent to logging in.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Get a login token",
        "operationId": "LoginTokenV1",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "Info",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginResponseWrapper"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/login/shortlogintoken": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Generates a temporary login token valid for a short duration.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Generate a short login token.",
        "operationId": "ShortLoginTokenV1",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginResponseWrapper"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/applications": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieve all the application log entries.\nUse filter on edge ID and batch ID to get the application log specific to an edge and a batch.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log"
        ],
        "summary": "Lists application log entries.",
        "operationId": "ApplicationLogEntriesListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogEntriesListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/applications/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieve application log entries specific to an application.\nUse filter on edge ID and batch ID to get the application log specific to an edge and a batch.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log"
        ],
        "summary": "Lists applications log entries specific to an application.",
        "operationId": "ApplicationLogEntriesGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogEntriesListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/collector": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get log collectors information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "LogCollector"
        ],
        "summary": "Get configured log collectors in a system.",
        "operationId": "LogCollectorsList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogCollectorListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a log collector.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LogCollector"
        ],
        "summary": "Create a log collector.",
        "operationId": "LogCollectorCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Describes the log collector creation request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogCollector"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/collector/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get log collector information by ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "LogCollector"
        ],
        "summary": "Get information about log collector",
        "operationId": "LogCollectorGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogCollectorResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a log collector by ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LogCollector"
        ],
        "summary": "Update a log collector.",
        "operationId": "LogCollectorUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "Describes the log collector update request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogCollector"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a log collector by ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "LogCollector"
        ],
        "summary": "Delete a log collector.",
        "operationId": "LogCollectorDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/collector/{id}/start": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Start a log collector by ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "LogCollector"
        ],
        "summary": "Start a log collector.",
        "operationId": "LogCollectorStart",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/collector/{id}/stop": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Stop a log collector by ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "LogCollector"
        ],
        "summary": "Stop a log collector.",
        "operationId": "LogCollectorStop",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/edges": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieve all infrastructure log entries.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log"
        ],
        "summary": "Lists infrastructure log entries for edges.",
        "operationId": "EdgeLogEntriesListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogEntriesListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/edges/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieve infrastructure log entries specific to an edge.\nUse filter on batch ID to get logs entries specific to a batch.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log"
        ],
        "summary": "Lists infrastructure log entries for an edge.",
        "operationId": "EdgeLogEntriesGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogEntriesListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/entries": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieve all log entries.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log"
        ],
        "summary": "Lists log entries.",
        "operationId": "LogEntriesListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogEntriesListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/entries/{id}": {
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the log entry with the given id.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log"
        ],
        "summary": "Delete log entry by ID.",
        "operationId": "LogEntryDeleteV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/requestdownload": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Generates the log download URL.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log"
        ],
        "summary": "Request log download.",
        "operationId": "LogRequestDownloadV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestLogDownloadPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogRequestDownloadResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/requestupload": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Request edges to upload logs to cloud storage.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log"
        ],
        "summary": "Request log upload.",
        "operationId": "LogRequestUploadV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestLogUploadPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogRequestUploadResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/stream/endpoints": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get the endpoints to stream logs for a given container from an edge.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log"
        ],
        "summary": "Get the endpoints to stream logs for a given container from an edge.",
        "operationId": "LogStreamEndpoints",
        "parameters": [
          {
            "x-go-name": "Request",
            "description": "A description of the log streaming request.",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogStream"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogStreamEndpointsResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/logs/uploadcomplete": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Log upload complete as reported by an edge.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log"
        ],
        "summary": "Report log upload complete.  ntnx:ignore",
        "operationId": "LogUploadCompleteV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectResponseLogUploadComplete"
            }
          }
        ],
        "responses": {
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/mlmodels": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieve all machine learning models.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ML_Model"
        ],
        "summary": "Lists machine learning models.",
        "operationId": "MLModelList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from the login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MLModelListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a machine learning model.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ML_Model"
        ],
        "summary": "Create a machine learning model.",
        "operationId": "MLModelCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MLModelMetadata"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from the login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/mlmodels/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a machine learning model by its given ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ML_Model"
        ],
        "summary": "Get machine learning model by its ID.",
        "operationId": "MLModelGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from the login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MLModelGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a machine learning model by its given ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ML_Model"
        ],
        "summary": "Update a machine learning model by its ID.",
        "operationId": "MLModelUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MLModelMetadata"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from the login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes a machine learning model by its given ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ML_Model"
        ],
        "summary": "Delete a machine learning model  by its ID.",
        "operationId": "MLModelDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from the login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/mlmodels/{id}/versions": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a new version of the machine learning model by its given ID.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ML_Model"
        ],
        "summary": "Create a new version of the machine learning model by its ID.",
        "operationId": "MLModelVersionCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ModelVersion",
            "description": "Model version, a positive integer.",
            "name": "model_version",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Description",
            "description": "Model version description.",
            "name": "description",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from the login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "file",
            "name": "Payload",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/mlmodels/{id}/versions/{model_version}": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates the version of the machine learning model by machine learning model ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ML_Model"
        ],
        "summary": "Update the version of the machine learning model by its ID.",
        "operationId": "MLModelVersionUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ModelVersion",
            "description": "Model version, a positive integer.",
            "name": "model_version",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Description",
            "description": "Model version description.",
            "name": "description",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from the login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the version of the machine learning model by machine learning model ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ML_Model"
        ],
        "summary": "Delete the version of the machine learning model by its ID.",
        "operationId": "MLModelVersionDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ModelVersion",
            "description": "Model version, a positive integer.",
            "name": "model_version",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from the login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/mlmodels/{id}/versions/{model_version}/url": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a pre-signed URL for the machine learning model according to its ID and version.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ML_Model"
        ],
        "summary": "Get a pre-signed URL for the machine learning model according to its ID and version.",
        "operationId": "MLModelVersionURLGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ModelVersion",
            "description": "Model version, a positive integer.",
            "name": "model_version",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ExpirationDuration",
            "description": "Model URL expiration duration in minutes.",
            "name": "expiration_duration",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from the login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MLModelVersionURLGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/mlmodelstatuses": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves status for all ML models.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "MLModel_Status"
        ],
        "summary": "Get status for all ML models.",
        "operationId": "MLModelStatusList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MLModelStatusListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/mlmodelstatuses/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieve status for an ML model with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "MLModel_Status"
        ],
        "summary": "Get ML model status by model ID.",
        "operationId": "MLModelStatusGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MLModelStatusListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/nodebyserialnumber": {
      "post": {
        "description": "Retrieves the node according to the given serial number.\nYou can display the serial number by opening this URL in a browser.\nUse your service domain IP address: http://service-domain-ip-address:8080/v1/sn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a node as specified by its serial number. ntnx:ignore",
        "operationId": "NodeGetBySerialNumber",
        "responses": {
          "200": {
            "$ref": "#/responses/NodeGetBySerialNumberResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/nodeonboarded": {
      "post": {
        "description": "Updates the onboard info by node ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node"
        ],
        "summary": "Update node post onboard info.",
        "operationId": "NodeOnboarded",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NodeOnboardInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/nodes": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all service domain nodes for your account.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node"
        ],
        "summary": "Get all service domain nodes.",
        "operationId": "NodeList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NodeListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node"
        ],
        "summary": "Create a node.",
        "operationId": "NodeCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Parameters and values used when creating a node",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/nodes/{nodeId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the node with the given ID {nodeId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node"
        ],
        "summary": "Get a node as specified by node ID.",
        "operationId": "NodeGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "NodeID",
            "description": "ID for the node",
            "name": "nodeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NodeGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a node by its ID {nodeId}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node"
        ],
        "summary": "Update a node as specified by node ID.",
        "operationId": "NodeUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "NodeID",
            "description": "ID for the node",
            "name": "nodeId",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the node with the given ID  {nodeId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node"
        ],
        "summary": "Delete a node as specified by node ID.",
        "operationId": "NodeDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "NodeID",
            "description": "ID for the node",
            "name": "nodeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/nodesinfo": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all node resource, build, and version details.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node_Info"
        ],
        "summary": "Get node resource, build, and version details.",
        "operationId": "NodeInfoList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NodeInfoListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/nodesinfo/{nodeId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all node resource, build, and version details for a given node ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node_Info"
        ],
        "summary": "Get all node information by node ID.",
        "operationId": "NodeInfoGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "NodeID",
            "description": "ID for the node",
            "name": "nodeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NodeInfoGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update node resource, build, and version details for a given node ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node_Info"
        ],
        "summary": "Update node information by node ID.",
        "operationId": "NodeInfoUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "NodeID",
            "description": "ID for the node",
            "name": "nodeId",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "Describes parameters used to create or update a node",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NodeInfo"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/oauth2/authorize": {
      "get": {
        "description": "This will redirect the user to the oauth login page.\nNote: UI only API",
        "produces": [
          "application/html"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Login through MyNutanix. ntnx:ignore",
        "operationId": "OAuthAuthorizeCallV2",
        "responses": {
          "401": {
            "$ref": "#/responses/LoginFailedError"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/oauth2/token": {
      "post": {
        "description": "This will get the session token from the auth token.\nNote: UI only API",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Refresh token via MyNutanix. ntnx:ignore",
        "operationId": "OAuthTokenCallV2",
        "parameters": [
          {
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuthCodes"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginResponseWrapper"
          },
          "401": {
            "$ref": "#/responses/LoginFailedError"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all projects.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project"
        ],
        "summary": "Get projects.",
        "operationId": "ProjectListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a project.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project"
        ],
        "summary": "Create a project.",
        "operationId": "ProjectCreateV2",
        "parameters": [
          {
            "x-go-name": "Doc",
            "description": "Describes the project creation request.",
            "name": "doc",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{id}": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a project by its given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project"
        ],
        "summary": "Update a project by its ID.",
        "operationId": "ProjectUpdateV3",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Doc",
            "name": "doc",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes a project with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project"
        ],
        "summary": "Delete a project by ID.",
        "operationId": "ProjectDeleteV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the project by its given ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project"
        ],
        "summary": "Get project by its ID.",
        "operationId": "ProjectGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/applications": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all applications in a project with ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Get all applications in a project according to project ID.",
        "operationId": "ProjectGetApplicationsV2",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ApplicationListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/cloudprofiles": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all cloud service profiles for a project with a given ID {projectId}",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cloud_Profile"
        ],
        "summary": "Get cloud profiles according to project ID.",
        "operationId": "ProjectGetCloudProfiles",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CloudProfileListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/containerregistries": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all container registry profiles with a given ID {projectId}",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Container_Registry"
        ],
        "summary": "Get container registry profiles by project ID.",
        "operationId": "ProjectGetContainerRegistriesV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ContainerRegistryListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/datapipelines": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all data pipelines for a project with a given ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Pipeline"
        ],
        "summary": "Gets data pipelines for a project.",
        "operationId": "ProjectGetDataPipelines",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataPipelineListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/datasources": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all data sources associated with a project with a given ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Data_Source"
        ],
        "summary": "Get data sources for a project. ntnx:ignore",
        "operationId": "ProjectGetDatasourcesV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataSourceListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/dockerprofiles": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all DockerProfiles for a project by project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Container_Registry"
        ],
        "summary": "Get project DockerProfiles. ntnx:ignore",
        "operationId": "ProjectGetDockerProfilesV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DockerProfileListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/edges": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all edges for a project by project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge"
        ],
        "summary": "Get project edges by ID. ntnx:ignore",
        "operationId": "ProjectGetEdgesV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/edgesinfo": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all edge resource, build, and version details by project ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Edge_Info"
        ],
        "summary": "Get all edge information for a project by ID. ntnx:ignore",
        "operationId": "ProjectGetEdgesInfoV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeInfoListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/functions": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all functions according to a given project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Function"
        ],
        "summary": "Get functions by project ID.",
        "operationId": "ProjectGetFunctions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FunctionListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/mlmodels": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all machine learning models for a project by its given ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ML_Model"
        ],
        "summary": "Lists project machine learning models by project ID.",
        "operationId": "ProjectGetMLModels",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from the login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MLModelListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/nodes": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all service domain nodes for a project by project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node"
        ],
        "summary": "Get all service domain nodes associated with a project by project ID.",
        "operationId": "ProjectGetNodes",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NodeListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/nodesinfo": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all node resource, build, and version details by project ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node_Info"
        ],
        "summary": "Get all node information for a project by project ID.",
        "operationId": "ProjectGetNodesInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NodeInfoListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/runtimeenvironments": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all runtime environments for a project by a given project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Runtime_Environment"
        ],
        "summary": "Gets runtime environments for a project by project ID.",
        "operationId": "ProjectGetRuntimeEnvironments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuntimeEnvironmentListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/servicedomains": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all service domains for a project by project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Get all service domains associated with a project by project ID.",
        "operationId": "ProjectGetServiceDomains",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceDomainListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/servicedomainsinfo": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all service domain information for a project as specified by project ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain_Info"
        ],
        "summary": "Get all service domain information for a project as specified by project ID.",
        "operationId": "ProjectGetServiceDomainsInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceDomainInfoListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projects/{projectId}/users": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrievesall users for a project  by project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get project users. ntnx:ignore",
        "operationId": "ProjectGetUsersV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projectservices": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all applications.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project_Service"
        ],
        "summary": "Get all project services. ntnx:ignore",
        "operationId": "ProjectServiceList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectServiceListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a project service.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project_Service"
        ],
        "summary": "Create a project service. ntnx:ignore",
        "operationId": "ProjectServiceCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "Describes the edge service creation request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectService"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/projectservices/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the project service according to its ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project_Service"
        ],
        "summary": "Get project service by ID. ntnx:ignore",
        "operationId": "ProjectServiceGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectServiceGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a specific project service with ID {id}.\nYou cannot change the project associated with the project service or the project service ID.\nYou can change all other attributes.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project_Service"
        ],
        "summary": "Update a specific project service with ID {id}. ntnx:ignore",
        "operationId": "ProjectServiceUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectService"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the project service with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project_Service"
        ],
        "summary": "Delete project service specified by the project service ID. ntnx:ignore",
        "operationId": "ProjectServiceDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/proxy/*path": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Proxy HTTP API over websocket to Service Domain.\nThe path parameter should be of the form:\nhttp[s]/:svc_domain_id/path_of_http_service\nThe payload will be passed on to Service Domain.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Proxy"
        ],
        "summary": "Proxy HTTP API. ntnx:ignore",
        "operationId": "ProxyGetCall",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProxyCallPayload"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProxyCallResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Proxy HTTP API over websocket to Service Domain.\nThe path parameter should be of the form:\nhttp[s]/:svc_domain_id/path_of_http_service\nThe payload will be passed on to Service Domain.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Proxy"
        ],
        "summary": "Proxy HTTP API. ntnx:ignore",
        "operationId": "ProxyPutCall",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProxyCallPayload"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProxyCallResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Proxy HTTP API over websocket to Service Domain.\nThe path parameter should be of the form:\nhttp[s]/:svc_domain_id/path_of_http_service\nThe payload will be passed on to Service Domain.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Proxy"
        ],
        "summary": "Proxy HTTP API. ntnx:ignore",
        "operationId": "ProxyPostCall",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProxyCallPayload"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProxyCallResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Proxy HTTP API over websocket to Service Domain.\nThe path parameter should be of the form:\nhttp[s]/:svc_domain_id/path_of_http_service\nThe payload will be passed on to Service Domain.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Proxy"
        ],
        "summary": "Proxy HTTP API. ntnx:ignore",
        "operationId": "ProxyDeleteCall",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProxyCallPayload"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProxyCallResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/runtimeenvironments": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all runtime environments.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Runtime_Environment"
        ],
        "summary": "Get runtime environments.",
        "operationId": "RuntimeEnvironmentList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuntimeEnvironmentListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a runtime environment for functions.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Runtime_Environment"
        ],
        "summary": "Create a runtime environment for functions.",
        "operationId": "RuntimeEnvironmentCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Describes the runtime environment creation request.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuntimeEnvironment"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/runtimeenvironments/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a runtime environment with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Runtime_Environment"
        ],
        "summary": "Get a runtime environment by its ID.",
        "operationId": "RuntimeEnvironmentGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuntimeEnvironmentGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a function runtime environment by its given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Runtime_Environment"
        ],
        "summary": "Update the runtime environment by its ID.",
        "operationId": "RuntimeEnvironmentUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuntimeEnvironment"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete runtime environment according to its given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Runtime_Environment"
        ],
        "summary": "Delete a runtime environment by its ID.",
        "operationId": "RuntimeEnvironmentDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/sensors": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all sensors for a tenant.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sensor"
        ],
        "summary": "Get sensors. ntnx:ignore",
        "operationId": "SensorListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SensorListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a sensor.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sensor"
        ],
        "summary": "Create sensor. ntnx:ignore",
        "operationId": "SensorCreateV2",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is a sensor creation request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/sensors/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the sensor with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sensor"
        ],
        "summary": "Get sensor by ID. ntnx:ignore",
        "operationId": "SensorGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SensorGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a sensor by ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sensor"
        ],
        "summary": "Update a sensor by ID. ntnx:ignore",
        "operationId": "SensorUpdateV3",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the sensor with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sensor"
        ],
        "summary": "Delete sensor. ntnx:ignore",
        "operationId": "SensorDeleteV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicebindings": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "List Service Bindings",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Binding"
        ],
        "summary": "List Service Bindings.",
        "operationId": "ServiceBindingList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SvcClassID",
            "description": "Service Class ID",
            "name": "svcClassId",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "BindResourceType",
            "description": "Bind resource type",
            "name": "bindResourceType",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "BindResourceID",
            "description": "Bind resource ID",
            "name": "bindResourceId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceBindingListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a Service Binding",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Binding"
        ],
        "summary": "Create a Service Binding.",
        "operationId": "ServiceBindingCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceBindingParam"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicebindings/{svcBindingId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get a Service Binding",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Binding"
        ],
        "summary": "Get a Service Binding.",
        "operationId": "ServiceBindingGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcBindingID",
            "description": "Service Binding ID",
            "name": "svcBindingId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceBindingGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a Service Binding",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Binding"
        ],
        "summary": "Delete a Service Binding.",
        "operationId": "ServiceBindingDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcBindingID",
            "description": "Service Binding ID",
            "name": "svcBindingId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicebindings/{svcBindingId}/status": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get the status of Service Binding on Service Domains",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Binding"
        ],
        "summary": "Get the status of Service Binding.",
        "operationId": "ServiceBindingStatusList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcBindingID",
            "description": "Service Binding ID",
            "name": "svcBindingId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "Service Domain ID",
            "name": "svcDomainId",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SvcInstanceID",
            "description": "Service Instance ID",
            "name": "svcInstanceId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceBindingStatusListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/serviceclasses": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "List Service Classes",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Class"
        ],
        "summary": "List Service Classes.",
        "operationId": "ServiceClassList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Scope",
            "description": "Scope of the Service Class",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Type",
            "description": "Type of the Service Class",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SvcVersion",
            "description": "Version of the Service Class",
            "name": "svcVersion",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Tags",
            "description": "Tags on the Service Class",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceClassListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a Service Class",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Class"
        ],
        "summary": "Create a Service Class. ntnx:ignore",
        "operationId": "ServiceClassCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceClass"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/serviceclasses/{svcClassId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get a Service Class",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Class"
        ],
        "summary": "Get a Service Class.",
        "operationId": "ServiceClassGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcClassID",
            "description": "Service Class ID",
            "name": "svcClassId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceClassGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a Service Class",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Class"
        ],
        "summary": "Update a Service Class. ntnx:ignore",
        "operationId": "ServiceClassUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcClassID",
            "description": "Service Class ID",
            "name": "svcClassId",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceClass"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a Service Class",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Class"
        ],
        "summary": "Delete a Service Class. ntnx:ignore",
        "operationId": "ServiceClassDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcClassID",
            "description": "Service Class ID",
            "name": "svcClassId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomainhandle/{svcDomainId}": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the certificate and private key for the service domain by its given ID {svcDomainId}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Get service domain certificate. ntnx:ignore",
        "operationId": "ServiceDomainGetHandle",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceDomainGetHandlePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceDomainGetHandleResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomains": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all service domains associated with your account.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Get service domains.",
        "operationId": "ServiceDomainList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceDomainListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a service domain.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Create service domain.",
        "operationId": "ServiceDomainCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Parameters and values used when creating a service domain",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceDomain"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomains/{svcDomainId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the service domain with the given ID {svcDomainId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Get a service domain by its ID.",
        "operationId": "ServiceDomainGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceDomainGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a service domain by its ID {svcDomainId}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Update a service domain by its ID.",
        "operationId": "ServiceDomainUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceDomain"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the service domain with the given ID  {svcDomainId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Delete a service domain as specified by its ID.",
        "operationId": "ServiceDomainDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomains/{svcDomainId}/effectiveprofile": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the service domain effective profile with the given ID {svcDomainId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Get a service domain effective profile by ID.",
        "operationId": "ServiceDomainGetEffectiveProfile",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceDomainGetEffectiveProfileResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomains/{svcDomainId}/nodes": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Retrieves all nodes for a service domain by service domain ID {svcDomainId}.",
        "operationId": "ServiceDomainGetNodes",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NodeListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomains/{svcDomainId}/nodesinfo": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all nodes info for a service domain by service domain ID {svcDomainId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Get nodes info for a service domain by service domain ID.",
        "operationId": "ServiceDomainGetNodesInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NodeInfoListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomains/{svcDomainId}/storageprofiles": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all storage profiles for a service domain with a given ID {svcDomainId}",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage_Profile"
        ],
        "summary": "Get storage profiles according to service domain ID. ntnx:ignore",
        "operationId": "SvcDomainGetStorageProfiles",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StorageProfileListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a storage profile on the given service domain ID {svcDomainId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage_Profile"
        ],
        "summary": "Create a storage profile. ntnx:ignore",
        "operationId": "StorageProfileCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "Description for the storage profile.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StorageProfile"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomains/{svcDomainId}/storageprofiles/{id}": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update the storage profile with {id} on the given service domain ID {svcDomainId}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage_Profile"
        ],
        "summary": "Update storage profile. ntnx:ignore",
        "operationId": "StorageProfileUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StorageProfile"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomainsetcertlock": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Set service domain certificate lock.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain"
        ],
        "summary": "Set service domain certificate lock. ntnx:ignore",
        "operationId": "ServiceDomainSetCertLock",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EdgeCertLockParam"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomainsinfo": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all service domain additional information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain_Info"
        ],
        "summary": "Get service domain additional information like artifacts.",
        "operationId": "ServiceDomainInfoList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceDomainInfoListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/servicedomainsinfo/{svcDomainId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all service domain additional information for a given service domain ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain_Info"
        ],
        "summary": "Get all service domain information by service domain ID.",
        "operationId": "ServiceDomainInfoGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceDomainInfoGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update service domain additional information for a given service domain ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Domain_Info"
        ],
        "summary": "Update service domain information by service domain ID.",
        "operationId": "ServiceDomainInfoUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "ID for the service domain",
            "name": "svcDomainId",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "Describes parameters used to create or update a ServiceDomainInfo",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceDomainInfo"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/serviceinstances": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "List Service Instances",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Instance"
        ],
        "summary": "List Service Instances.",
        "operationId": "ServiceInstanceList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Scope",
            "description": "Scope of the Service Class",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Type",
            "description": "Type of the Service Class",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SvcVersion",
            "description": "Version of the Service Class",
            "name": "svcVersion",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SvcClassID",
            "description": "Service Class ID",
            "name": "svcClassId",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ScopeID",
            "description": "Service Class scope ID",
            "name": "scopeId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceInstanceListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a Service Instance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Instance"
        ],
        "summary": "Create a Service Instance.",
        "operationId": "ServiceInstanceCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInstanceParam"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/serviceinstances/{svcInstanceId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get a Service Instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Instance"
        ],
        "summary": "Get a Service Instance.",
        "operationId": "ServiceInstanceGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcInstanceID",
            "description": "Service Instance ID",
            "name": "svcInstanceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceInstanceGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a Service Instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Instance"
        ],
        "summary": "Update a Service Instance.",
        "operationId": "ServiceInstanceUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcInstanceID",
            "description": "Service Instance ID",
            "name": "svcInstanceId",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInstanceParam"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a Service Instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Instance"
        ],
        "summary": "Delete a Service Instance.",
        "operationId": "ServiceInstanceDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcInstanceID",
            "description": "Service Instance ID",
            "name": "svcInstanceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/serviceinstances/{svcInstanceId}/status": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get the status of the Service Instance on Service Domains",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service_Instance"
        ],
        "summary": "Get the status of the Service Instance.",
        "operationId": "ServiceInstanceStatusList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SvcInstanceID",
            "description": "Service Instance ID",
            "name": "svcInstanceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "name": "svcDomainId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceInstanceStatusListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/services": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves service information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Service"
        ],
        "summary": "Get services. ntnx:ignore",
        "operationId": "ServiceList",
        "responses": {
          "200": {
            "$ref": "#/responses/ServiceListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/setupsshtunneling": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Configure SSH tunneling to the service domain.\nRequirements to use this feature:\nMinimum service domain version of 1.15.0.\nRemote SSH tunneling feature and CLI access are enabled per account.\nService domain profile has SSH enabled.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSH"
        ],
        "summary": "Configure SSH tunneling to the service domain.",
        "operationId": "SetupSSHTunneling",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "SSH Tunneling setup request param",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WstunRequest"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SetupSSHTunnelingResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/credentials": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves credentials to download software update files.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Get credentials to download software update files. ntnx:ignore",
        "operationId": "SoftwareUpdateCredentialsCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SoftwareUpdateCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareUpdateCredentialsCreateResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/downloads": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves progress details about each download operation for all in-progress or completed downloads.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Get progress details for all download operations. ntnx:ignore",
        "operationId": "SoftwareDownloadBatchList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareUpdateBatchListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Starts a software download on the selected list of service domains.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Starts a software download on the selected list of service domains. ntnx:ignore",
        "operationId": "SoftwareDownloadCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SoftwareDownloadCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/downloads/{batchId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves progress details about a download operation as specified by its download batch ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Get the batch in software download phase. ntnx:ignore",
        "operationId": "SoftwareDownloadBatchGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "BatchID",
            "description": "ID for the batch",
            "name": "batchId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareUpdateBatchGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates an existing software download batch.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Updates an existing software download batch. ntnx:ignore",
        "operationId": "SoftwareDownloadUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "BatchID",
            "description": "ID for the batch",
            "name": "batchId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SoftwareDownloadUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/downloads/{batchId}/servicedomains": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all the service domains in the software download batch.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Get all the service domains in the software download batch. ntnx:ignore",
        "operationId": "SoftwareDownloadServiceDomainList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "BatchID",
            "description": "ID for the batch",
            "name": "batchId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareUpdateServiceDomainListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/downloads/{batchId}/states": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates the state of an existing software download operation. The only reportable states are DOWNLOADING, DOWNLOAD_FAILED, DOWNLOAD_CANCELLED and DOWNLOADED.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Updates the state of an existing software download. ntnx:ignore",
        "operationId": "SoftwareDownloadStateUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "BatchID",
            "description": "ID for the batch",
            "name": "batchId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SoftwareUpdateState"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareUpdateStateResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/releases": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all the software releases available.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Get all the available software releases. ntnx:ignore",
        "operationId": "SoftwareReleaseList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareReleaseListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/releases/{release}/downloaded-servicedomains": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all the service domains with the release downloaded.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Get all service domains that have downloaded available software releases. ntnx:ignore",
        "operationId": "SoftwareDownloadedServiceDomainList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Release",
            "description": "release",
            "name": "release",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareDownloadedServiceDomainListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/servicedomains": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all the service domains and batches.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Get all the service domains and batches. ntnx:ignore",
        "operationId": "SoftwareUpdateServiceDomainList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SvcDomainID",
            "description": "Service Domain ID",
            "name": "svcDomainId",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Type",
            "description": "Software DOWNLOAD/UPGRADE",
            "name": "type",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "IsLatestBatch",
            "description": "Fetch only latest batches",
            "name": "isLatestBatch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareUpdateServiceDomainListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/upgrades": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all the batches in software upgrade phase.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Get all the batches in software upgrade phase. ntnx:ignore",
        "operationId": "SoftwareUpgradeBatchList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareUpdateBatchListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Starts a software upgrade on the selected list of service domains.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Starts a software upgrade on the selected list of service domains. ntnx:ignore",
        "operationId": "SoftwareUpgradeCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SoftwareUpgradeCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/upgrades/{batchId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the batch in software upgrade phase.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Get the batch in software upgrade phase. ntnx:ignore",
        "operationId": "SoftwareUpgradeBatchGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "BatchID",
            "description": "ID for the batch",
            "name": "batchId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareUpdateBatchGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates the state of an existing software upgrade.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Updates the state of an existing software upgrade. ntnx:ignore",
        "operationId": "SoftwareUpgradeUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "BatchID",
            "description": "ID for the batch",
            "name": "batchId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SoftwareUpgradeUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/upgrades/{batchId}/servicedomains": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all the service domains in the software upgrade batch.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Get all the service domains in the software upgrade batch. ntnx:ignore",
        "operationId": "SoftwareUpgradeServiceDomainList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "BatchID",
            "description": "ID for the batch",
            "name": "batchId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareUpdateServiceDomainListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/softwareupdates/upgrades/{batchId}/states": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates the state of an existing software upgrade. The only reportable states are UPDATING, UPDATE_FAILED and UPDATED.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Software_Update"
        ],
        "summary": "Updates the state of an existing software upgrade. ntnx:ignore",
        "operationId": "SoftwareUpgradeStateUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "BatchID",
            "description": "ID for the batch",
            "name": "batchId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SoftwareUpdateState"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SoftwareUpdateStateResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/teardownsshtunneling": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Shut down SSH tunneling to the service domain. Disables SSH tunneling, including current open sessions.",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "SSH"
        ],
        "summary": "Disable service domain SSH tunneling.",
        "operationId": "TeardownSSHTunneling",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "SSH Tunneling teardown request param",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WstunTeardownRequest"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TeardownSSHTunnelingResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/tenant": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves metadata for the current tenant.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant"
        ],
        "summary": "Get tenant info. ntnx:ignore",
        "operationId": "TenantGet",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TenantGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/tenantprops/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves properties for the tenant with the given ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant_Props"
        ],
        "summary": "Get tenant properties by tenant ID. ntnx:ignore",
        "operationId": "TenantPropsGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TenantPropsGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates properties for the tenant with the given ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant_Props"
        ],
        "summary": "Update tenant properties by tenant ID. ntnx:ignore",
        "operationId": "TenantPropsUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TenantProps"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes properties for the tenant with the given ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant_Props"
        ],
        "summary": "Delete tenant properties by tenant ID. ntnx:ignore",
        "operationId": "TenantPropsDeleteV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/tenants": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a tenant by a privileged user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant"
        ],
        "summary": "Create a tenant. ntnx:ignore",
        "operationId": "TenantCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/tenants/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Gets the tenant with the ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant"
        ],
        "summary": "Get tenant with the ID. ntnx:ignore",
        "operationId": "TenantGetByID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TenantGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes a tenant by a privileged user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant"
        ],
        "summary": "Delete a tenant. ntnx:ignore",
        "operationId": "TenantDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/userapitokens": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the API tokens info for the current user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_API_Token"
        ],
        "summary": "Get current user API tokens.",
        "operationId": "UserApiTokenGet",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserApiTokenListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a user API token.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_API_Token"
        ],
        "summary": "Create a user API token.",
        "operationId": "UserApiTokenCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserApiTokenCreatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserApiTokenCreateResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/userapitokens/{id}": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update the API token with the given id. Must be current user or infra admin.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_API_Token"
        ],
        "summary": "Update user API token.",
        "operationId": "UserApiTokenUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserApiToken"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the API token with the given id for the current user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_API_Token"
        ],
        "summary": "Delete current user API token.",
        "operationId": "UserApiTokenDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/userapitokensall": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the API tokens info for all users. Must be infra admin for this to work.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_API_Token"
        ],
        "summary": "Get all user API tokens.",
        "operationId": "UserApiTokenList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserApiTokenListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/userprops/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the properties for the user with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_Props"
        ],
        "summary": "Get user properties. ntnx:ignore",
        "operationId": "UserPropsGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserPropsGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates the properties of the user with the given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_Props"
        ],
        "summary": "Update user properties by ID. ntnx:ignore",
        "operationId": "UserPropsUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProps"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the properties for the user with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_Props"
        ],
        "summary": "Delete user properties by ID. ntnx:ignore",
        "operationId": "UserPropsDeleteV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/userpublickey": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the public key for the current user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_Public_Key"
        ],
        "summary": "Get current user public key.",
        "operationId": "UserPublicKeyGet",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserPublicKeyGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Upserts the public key of the current user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_Public_Key"
        ],
        "summary": "Upsert current user public key.",
        "operationId": "UserPublicKeyUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPublicKeyUpdatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the public key for the current user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_Public_Key"
        ],
        "summary": "Delete current user public key.",
        "operationId": "UserPublicKeyDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/userpublickeyall": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the public keys for all users.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User_Public_Key"
        ],
        "summary": "Get all user public keys.",
        "operationId": "UserPublicKeyList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserPublicKeyListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/users": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all users for a tenant.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get users. ntnx:ignore",
        "operationId": "UserListV2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserListResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Create user. ntnx:ignore",
        "operationId": "UserCreateV2",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is a user creation request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1.0/users/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a user with the given id {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get user by ID. ntnx:ignore",
        "operationId": "UserGetV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a user with a given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Update user with a given ID. ntnx:ignore",
        "operationId": "UserUpdateV3",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the user with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Delete user by ID. ntnx:ignore",
        "operationId": "UserDeleteV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponseV2"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/application": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update an existing application.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update an application. ntnx:ignore",
        "operationId": "ApplicationUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create an application.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create an application. ntnx:ignore",
        "operationId": "ApplicationCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Describes the application creation request.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/application/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the application according to its ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Get application by application ID. ntnx:ignore",
        "operationId": "ApplicationGet",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ApplicationGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a specific application with ID {id}.\nYou cannot change the project associated with the application or the application ID.\nYou can change all other attributes.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update an application specified by its ID. ntnx:ignore",
        "operationId": "ApplicationUpdateV2",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the application with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete application specified by the application ID. ntnx:ignore",
        "operationId": "ApplicationDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/applications": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all applications.",
        "produces": [
          "application/json"
        ],
        "summary": "Get all applications. ntnx:ignore",
        "operationId": "ApplicationList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ApplicationListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/applications/{id}/render/{edgeId}": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Render application template with the given ID {id} running on edge with id {edgeId}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Application"
        ],
        "summary": "Render Application ID running on a specific edge. ntnx:ignore",
        "operationId": "RenderApplication",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RenderApplicationPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RenderApplicationResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/applicationstatus": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves status for all applications.",
        "produces": [
          "application/json"
        ],
        "summary": "Get applications status. ntnx:ignore",
        "operationId": "ApplicationStatusList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ApplicationStatusListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates an application status.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create application status. ntnx:ignore",
        "operationId": "ApplicationStatusCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/applicationstatus/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieve status for an application with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get application status by application ID. ntnx:ignore",
        "operationId": "ApplicationStatusGet",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ApplicationStatusListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the application with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete an application by application ID. ntnx:ignore",
        "operationId": "ApplicationStatusDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/auditlogs": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all audit logs for a tenant.",
        "produces": [
          "application/json"
        ],
        "summary": "Lists audit logs. ntnx:ignore",
        "operationId": "AuditLogList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageIndex",
            "description": "0-based index of the page to fetch results.",
            "name": "pageIndex",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Item count of each page.",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Start",
            "description": "Start time for query. Format: yyyy-mm-dd hh:mm:ss, the hh:mm:ss part is optional.",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "End",
            "description": "End time for query. Format: yyyy-mm-dd hh:mm:ss, the hh:mm:ss part is optional.",
            "name": "end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AuditLogListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/auditlogs/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the audit log entries for the given request ID or date.",
        "produces": [
          "application/json"
        ],
        "summary": "Get audit log by request ID | date. ntnx:ignore",
        "operationId": "AuditLogGet",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AuditLogGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/categories": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all categories.",
        "produces": [
          "application/json"
        ],
        "summary": "Get all categories. ntnx:ignore",
        "operationId": "CategoryList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CategoryListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a category.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update a category. ntnx:ignore",
        "operationId": "CategoryUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a category.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a category. ntnx:ignore",
        "operationId": "CategoryCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "A description of the category creation request.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/categories/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a category with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a category by its ID. ntnx:ignore",
        "operationId": "CategoryGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CategoryGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a category.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update category. ntnx:ignore",
        "operationId": "CategoryUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a category with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete a category by its ID. ntnx:ignore",
        "operationId": "CategoryDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/certificates": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Certificates for devices requiring them.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create certificates. ntnx:ignore",
        "operationId": "CertificatesCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Certificates",
            "schema": {
              "$ref": "#/definitions/Certificates"
            }
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/cloudcreds": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all cloud service provider profiles.",
        "produces": [
          "application/json"
        ],
        "summary": "Get all cloud service profiles. ntnx:ignore",
        "operationId": "CloudCredsList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CloudCredsListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update an existing cloud profile.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update a cloud profile. ntnx:ignore",
        "operationId": "CloudCredsUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudCreds"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a cloud service profile.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a cloud profile. ntnx:ignore",
        "operationId": "CloudCredsCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Description for the cloud profile.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudCreds"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/cloudcreds/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a cloud service profile with a given ID {id}",
        "produces": [
          "application/json"
        ],
        "summary": "Get a cloud profile according to profile ID. ntnx:ignore",
        "operationId": "CloudCredsGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CloudCredsGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update an existing cloud profile with a given ID {id}",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update a cloud profile by its ID. ntnx:ignore",
        "operationId": "CloudCredsUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudCreds"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a cloud service profile with the given ID {id}",
        "produces": [
          "application/json"
        ],
        "summary": "Delete a cloud profile by its ID. ntnx:ignore",
        "operationId": "CloudCredsDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/common/aggregates": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Performs and returns the results of the aggregate query.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Perform an aggregate query. ntnx:ignore",
        "operationId": "CommonAggregates",
        "parameters": [
          {
            "name": "AggregateSpec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AggregateSpec"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CommonAggregatesResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/common/nestedAggregates": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Performs and returns the results of the nested aggregate query.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Perform a nested aggregate query. ntnx:ignore",
        "operationId": "CommonNestedAggregates",
        "parameters": [
          {
            "name": "AggregateSpec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NestedAggregateSpec"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CommonNestedAggregatesResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/containerregistries": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all container registry profiles.",
        "produces": [
          "application/json"
        ],
        "summary": "Get container registry profiles. ntnx:ignore",
        "operationId": "ContainerRegistryList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ContainerRegistryListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a container registry profile.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a container registry profile. ntnx:ignore",
        "operationId": "ContainerRegistryCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Describes the container registry profile.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContainerRegistry"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/containerregistries/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a container registry profile with a given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a container registry profile by profile ID. ntnx:ignore",
        "operationId": "ContainerRegistryGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ContainerRegistryGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a container registry profile.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update a container registry profile. ntnx:ignore",
        "operationId": "ContainerRegistryUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContainerRegistryV2"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes a container registry profile with a given ID {id}.\n\nThis will delete the containerregistries with the given id.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete a container registry profile by profile ID. ntnx:ignore",
        "operationId": "ContainerRegistryDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/datasources": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all data sources.",
        "produces": [
          "application/json"
        ],
        "summary": "Get all data sources. ntnx:ignore",
        "operationId": "DataSourceList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataSourceListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a data source. You cannot update or change the edge associated with the data source by using this call.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update a data source. ntnx:ignore",
        "operationId": "DataSourceUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataSource"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a data source.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a data source. ntnx:ignore",
        "operationId": "DataSourceCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is a data source creation request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataSource"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/datasources/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Get the data source according to its given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get the data source according to its ID. ntnx:ignore",
        "operationId": "DataSourceGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataSourceGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a data source. You cannot update or change the edge associated with the data source by using this call.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update a data source. ntnx:ignore",
        "operationId": "DataSourceUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataSource"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete a data source with a given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete a specific data source. ntnx:ignore",
        "operationId": "DataSourceDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/datastreams": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all data pipelines for a tenant.",
        "produces": [
          "application/json"
        ],
        "summary": "Gets data pipelines. ntnx:ignore",
        "operationId": "DataStreamList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataStreamListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a data pipeline.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Updates a data pipeline. ntnx:ignore",
        "operationId": "DataStreamUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataStream"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a data pipeline.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Creates a data pipeline. ntnx:ignore",
        "operationId": "DataStreamCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is a datastream creation request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataStream"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/datastreams/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a data pipelines with a given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Gets data pipeline by its ID. ntnx:ignore",
        "operationId": "DataStreamGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataStreamGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a data pipeline.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Updates a data pipeline. ntnx:ignore",
        "operationId": "DataStreamUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataStream"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will delete the data pipeline with the given id.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete data pipeline. ntnx:ignore",
        "operationId": "DataStreamDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/dockerprofiles": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all DockerProfiles for a tenant.",
        "produces": [
          "application/json"
        ],
        "summary": "Get DockerProfiles. ntnx:ignore",
        "operationId": "DockerProfileList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DockerProfileListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a dockerprofiles.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update dockerprofile. ntnx:ignore",
        "operationId": "DockerProfileUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DockerProfile"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a dockerprofile.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create dockerprofiles. ntnx:ignore",
        "operationId": "DockerProfileCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is a DockerProfile creation request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DockerProfile"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/dockerprofiles/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves dockerProfiles with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get dockerprofiles. ntnx:ignore",
        "operationId": "DockerProfileGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DockerProfileGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a dockerprofiles by ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update dockerprofiles. ntnx:ignore",
        "operationId": "DockerProfileUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DockerProfile"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the dockerprofiles with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete dockerprofiles. ntnx:ignore",
        "operationId": "DockerProfileDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edgebyserialnumber": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the edge according to the given serial number.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get edge by serial number. ntnx:ignore",
        "operationId": "EdgeGetBySerialNumber",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "JSON { serialNumber: string }",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SerialNumberPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeGetBySerialNumberResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edgehandle/{edgeId}": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the certificate and private key for the edge by its given ID {edgeId}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get edge certification. ntnx:ignore",
        "operationId": "EdgeGetHandle",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetHandlePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeGetHandleResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edges": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all edges for a tenant.",
        "produces": [
          "application/json"
        ],
        "summary": "Get edges. ntnx:ignore",
        "operationId": "EdgeList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates an edge.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update an edge. ntnx:ignore",
        "operationId": "EdgeUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Edge"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates an edge.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create edge. ntnx:ignore",
        "operationId": "EdgeCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Parameters and values used when creating an edge",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Edge"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edges/upgrade": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Upgrades the edge software.",
        "produces": [
          "application/json"
        ],
        "summary": "Upgrade the edge software. ntnx:ignore",
        "operationId": "ExecuteEdgeUpgrade",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is an execute edge upgrade request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecuteEdgeUpgrade"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edges/{edgeId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the edge with the given ID {edgeId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get edge by ID. ntnx:ignore",
        "operationId": "EdgeGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the edge with the given ID {edgeId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete edge by ID. ntnx:ignore",
        "operationId": "EdgeDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edges/{edgeId}/datasources": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all data sources associated with with a edge by its ID {edgeId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get all data sources associated with an edge. ntnx:ignore",
        "operationId": "EdgeGetDatasources",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataSourceListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edges/{edgeId}/info": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all edge resource, build, and version details for a given edge ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Get all edge information by edge ID. ntnx:ignore",
        "operationId": "EdgeInfoGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeInfoGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edges/{edgeId}/sensors": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all sensors for an edge by edge ID {edgeId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get edge sensors by edge ID. ntnx:ignore",
        "operationId": "EdgeGetSensors",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SensorListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edges/{edgeId}/upgradecompatible": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves compatible software upgrades for the given edge ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Lists compatible edge software upgrades by edge ID. ntnx:ignore",
        "operationId": "EdgeGetUpgrades",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EdgeID",
            "description": "ID for the edge",
            "name": "edgeId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeUpgradeCompatibleListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edges/{id}": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates an edge.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update edge. ntnx:ignore",
        "operationId": "EdgeUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Edge"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edges/{id}/info": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update edge resource, build, and version details for a given edge ID.\n\nOnce installed, the Karbon Platform Services Service Domain software provides the service domain infrastructure.\n\nUpdate resource, build, and version details for a given service domain by ID.\nThe ID is the service domain serial number used when you added the service domain.\n\nThis request also requires an Authorization header which specifies your API key.",
        "produces": [
          "application/json"
        ],
        "summary": "Update edge information by edge ID. ntnx:ignore",
        "operationId": "EdgeInfoUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EdgeUsageInfo"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edgesCompatibleUpgrades": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves available edge software upgrades.",
        "produces": [
          "application/json"
        ],
        "summary": "Lists available edge software upgrades. ntnx:ignore",
        "operationId": "EdgeUpgradeList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeUpgradeListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/edgesInfo": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all edge resource, build, and version details.",
        "produces": [
          "application/json"
        ],
        "summary": "Get edge resource, build, and version details. ntnx:ignore",
        "operationId": "EdgeInfoList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeInfoListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/events": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will insert/update events for a tenant.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Upserts events (used internally). ntnx:ignore",
        "operationId": "UpsertEvents",
        "parameters": [
          {
            "description": "This is events upsert request description",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventUpsertRequest"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EventListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all events matching the filter for a tenant.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Lists events. ntnx:ignore",
        "operationId": "QueryEvents",
        "parameters": [
          {
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventFilter"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EventListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/login": {
      "post": {
        "description": "Lets the user log in.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Login user. ntnx:ignore",
        "operationId": "LoginCall",
        "parameters": [
          {
            "description": "This is a login credential",
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginResponseWrapper"
          },
          "401": {
            "$ref": "#/responses/LoginFailedError"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/logs/entries": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieve all log entries.",
        "produces": [
          "application/json"
        ],
        "summary": "Lists log entries. ntnx:ignore",
        "operationId": "LogEntriesList",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogEntriesListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/logs/entries/{id}": {
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the log entry with the given id.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete log entry by ID. ntnx:ignore",
        "operationId": "LogEntryDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/logs/requestDownload": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Generates the log download URL.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Request log download. ntnx:ignore",
        "operationId": "LogRequestDownload",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestLogDownloadPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogRequestDownloadResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/logs/requestUpload": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Request edges to upload logs to S3.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Request log upload. ntnx:ignore",
        "operationId": "LogRequestUpload",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestLogUploadPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LogRequestUploadResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/logs/upload": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Upload log - for edge testing.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Upload Log. ntnx:ignore",
        "operationId": "LogUpload",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestLogUpload"
            }
          }
        ],
        "responses": {
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/logs/uploadComplete": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Edge will use this API to notify log upload complete.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Report log upload complete. ntnx:ignore",
        "operationId": "LogUploadComplete",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectResponseLogUploadComplete"
            }
          }
        ],
        "responses": {
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/oauth2/authorize": {
      "get": {
        "description": "This will redirect the user to the oauth login page.\nNote: UI only API",
        "produces": [
          "application/html"
        ],
        "summary": "Login via MyNutanix. ntnx:ignore",
        "operationId": "OAuthAuthorizeCall",
        "responses": {
          "401": {
            "$ref": "#/responses/LoginFailedError"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/oauth2/token": {
      "post": {
        "description": "This will get the session token from the auth token.\nNote: UI only API",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Refresh token via MyNutanix. ntnx:ignore",
        "operationId": "OAuthTokenCall",
        "parameters": [
          {
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuthCodes"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginResponseWrapper"
          },
          "401": {
            "$ref": "#/responses/LoginFailedError"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all projects.",
        "produces": [
          "application/json"
        ],
        "summary": "Get projects. ntnx:ignore",
        "operationId": "ProjectList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates projects.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update projects. ntnx:ignore",
        "operationId": "ProjectUpdate",
        "parameters": [
          {
            "x-go-name": "Doc",
            "name": "doc",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a project.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a project. ntnx:ignore",
        "operationId": "ProjectCreate",
        "parameters": [
          {
            "x-go-name": "Doc",
            "description": "Describes the project creation request.",
            "name": "doc",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{id}": {
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a project by its given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update a project by its ID. ntnx:ignore",
        "operationId": "ProjectUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Doc",
            "name": "doc",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes a project with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete a project by ID. ntnx:ignore",
        "operationId": "ProjectDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the project by its given ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get project by its ID. ntnx:ignore",
        "operationId": "ProjectGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/applications": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all applications in a project with ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get all applications in a project according to project ID. ntnx:ignore",
        "operationId": "ProjectGetApplications",
        "parameters": [
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ApplicationListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/cloudcreds": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all cloud service profiles for a project with a given ID {projectId}",
        "produces": [
          "application/json"
        ],
        "summary": "Get cloud profiles according to project ID. ntnx:ignore",
        "operationId": "ProjectGetCloudCreds",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CloudCredsListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/containerregistries": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all container registry profiles with a given ID {projectId}",
        "produces": [
          "application/json"
        ],
        "summary": "Get container registry profiles by project ID. ntnx:ignore",
        "operationId": "ProjectGetContainerRegistries",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ContainerRegistryListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/datasources": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a list of all data sources associated with a project with a given ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get data sources for a project. ntnx:ignore",
        "operationId": "ProjectGetDatasources",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataSourceListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/datastreams": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all data pipelines for a project of a tenant.",
        "produces": [
          "application/json"
        ],
        "summary": "Gets data pipelines for a project. ntnx:ignore",
        "operationId": "ProjectGetDataStreams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataStreamListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/dockerprofiles": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all DockerProfiles for a project by project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get project DockerProfiles. ntnx:ignore",
        "operationId": "ProjectGetDockerProfiles",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DockerProfileListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/edges": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all edges for a project by project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get project edges by ID. ntnx:ignore",
        "operationId": "ProjectGetEdges",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/edgesinfo": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all edge resource, build, and version details by project ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Get all edge information for a project by ID. ntnx:ignore",
        "operationId": "ProjectGetEdgesInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EdgeInfoListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/scriptruntimes": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all function runtime environments for a project by a given project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Gets function runtime environments for a project by ID. ntnx:ignore",
        "operationId": "ProjectGetScriptRuntimes",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ScriptRuntimeListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/scripts": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will retrieve all scripts for a project.",
        "produces": [
          "application/json"
        ],
        "summary": "Get project scripts. ntnx:ignore",
        "operationId": "ProjectGetScripts",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ScriptListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/projects/{projectId}/users": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all users for a project by project ID {projectId}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get project users by project ID. ntnx:ignore",
        "operationId": "ProjectGetUsers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID for the project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/scriptruntimes": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all function runtime environments.\n\nRetrieves all script runtimes.",
        "produces": [
          "application/json"
        ],
        "summary": "Gets a function runtime environments. ntnx:ignore",
        "operationId": "ScriptRuntimeList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ScriptRuntimeListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a script runtime.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update script runtime. ntnx:ignore",
        "operationId": "ScriptRuntimeUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScriptRuntime"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Create a script runtime.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create script runtime. ntnx:ignore",
        "operationId": "ScriptRuntimeCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Describes the script runtime creation request.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScriptRuntime"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/scriptruntimes/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the function for a runtime by a given function ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a function for a runtime by function ID. ntnx:ignore",
        "operationId": "ScriptRuntimeGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ScriptRuntimeGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Update a script runtime.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update script runtime. ntnx:ignore",
        "operationId": "ScriptRuntimeUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScriptRuntime"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Delete runtime environment according to its given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete script runtime. ntnx:ignore",
        "operationId": "ScriptRuntimeDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/scripts": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will retrieve all scripts for a tenant.",
        "produces": [
          "application/json"
        ],
        "summary": "Get scripts. ntnx:ignore",
        "operationId": "ScriptList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ScriptListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will update a script.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update script. ntnx:ignore",
        "operationId": "ScriptUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will create a script.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create script. ntnx:ignore",
        "operationId": "ScriptCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Describes the script creation request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/scripts/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will get the script with the given id.",
        "produces": [
          "application/json"
        ],
        "summary": "Get script. ntnx:ignore",
        "operationId": "ScriptGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ScriptGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will update a script.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update script. ntnx:ignore",
        "operationId": "ScriptUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "This will delete the script with the given id.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete script. ntnx:ignore",
        "operationId": "ScriptDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/sensors": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all sensors for a tenant.",
        "produces": [
          "application/json"
        ],
        "summary": "Get sensors. ntnx:ignore",
        "operationId": "SensorList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SensorListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a sensor.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update sensor. ntnx:ignore",
        "operationId": "SensorUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a sensor.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create sensor. ntnx:ignore",
        "operationId": "SensorCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is a sensor creation request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/sensors/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the sensor with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get sensor by ID. ntnx:ignore",
        "operationId": "SensorGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SensorGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a sensor.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update sensor. ntnx:ignore",
        "operationId": "SensorUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the sensor with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete sensor by ID. ntnx:ignore",
        "operationId": "SensorDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/tenantprops/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves properties for the tenant with the given ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Get tenant properties by tenant ID. ntnx:ignore",
        "operationId": "TenantPropsGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TenantPropsGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates properties for the tenant with the given ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update tenant properties by tenant ID. ntnx:ignore",
        "operationId": "TenantPropsUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TenantProps"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes properties for the tenant with the given ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete tenant properties by tenant ID. ntnx:ignore",
        "operationId": "TenantPropsDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/userprops/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves the properties for the user with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get user properties. ntnx:ignore",
        "operationId": "UserPropsGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserPropsGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates the properties of the user with the given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update user properties by ID. ntnx:ignore",
        "operationId": "UserPropsUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProps"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the properties for the user with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete user properties by user ID. ntnx:ignore",
        "operationId": "UserPropsDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves all users for a tenant.",
        "produces": [
          "application/json"
        ],
        "summary": "Get users. ntnx:ignore",
        "operationId": "UserList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrderBy",
            "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Specify result filter. Format is similar to a SQL WHERE clause. For example,\nto filter object by name with prefix foo, use: name LIKE 'foo%'.\nSupported filter keys are the same as order by keys.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserListResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update user. ntnx:ignore",
        "operationId": "UserUpdate",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create user. ntnx:ignore",
        "operationId": "UserCreate",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "This is a user creation request description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Retrieves a user with the given id {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Get user. ntnx:ignore",
        "operationId": "UserGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserGetResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates a user with a given ID {id}.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update user with a given ID. ntnx:ignore",
        "operationId": "UserUpdateV2",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes the user with the given ID {id}.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete user by ID. ntnx:ignore",
        "operationId": "UserDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ID of the entity",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Format: Bearer \u003ctoken\u003e, with \u003ctoken\u003e from login API response.",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDocumentResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        }
      }
    },
    "/v1/wsdocs/OnCreateDataDriverInstance": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateDataDriverInstance message.",
        "operationId": "WsMessagingOnCreateDataDriverInstance",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataDriverInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/OnUpdateDataDriverInstance": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateDataDriverInstance message.",
        "operationId": "WsMessagingOnUpdateDataDriverInstance",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataDriverInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/application-status": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for application-status message.",
        "operationId": "WsMessagingReportAppStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/executeEdgeUpgrade": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for executeEdgeUpgrade message.",
        "operationId": "WsMessagingOnCreateExecuteEdgeUpgrade",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseExecuteEdgeUpgrade"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/getNotificationTopics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for getNotificationTopics message.",
        "operationId": "WsMessagingGetNotificationTopics",
        "responses": {
          "200": {
            "$ref": "#/responses/NotificationTopicsWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/httpProxy": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for httpProxy message.",
        "operationId": "WsMessagingHTTPProxy",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HTTPProxyResponse"
          }
        }
      }
    },
    "/v1/wsdocs/logStream": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for logStream message.",
        "operationId": "WsMessagingLogStream",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseLogStream"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/logUpload": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for logUpload message.",
        "operationId": "WsMessagingLogUpload",
        "parameters": [
          {
            "x-go-name": "Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestLogUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/logUploadComplete": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for logUploadComplete message.",
        "operationId": "WsMessagingLogUploadComplete",
        "parameters": [
          {
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectResponseLogUploadComplete"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateApplication": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateApplication message.",
        "operationId": "WsMessagingOnCreateApplication",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseApplication"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateCategory": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateCategory message.",
        "operationId": "WsMessagingOnCreateCategory",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateCloudCreds": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateCloudCreds message.",
        "operationId": "WsMessagingOnCreateCloudCreds",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseCloudCreds"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateDataSource": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateDataSource message.",
        "operationId": "WsMessagingOnCreateDataSource",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseDataSource"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateDataStream": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateDataStream message.",
        "operationId": "WsMessagingOnCreateDataStream",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseDataStream"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateDockerProfile": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateDockerProfile message.",
        "operationId": "WsMessagingOnCreateDockerProfile",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseDockerProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateLogCollector": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateLogCollector message.",
        "operationId": "WsMessagingOnCreateLogCollector",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseLogCollector"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateMLModel": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateMLModel message.",
        "operationId": "WsMessagingOnCreateMLModel",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseMLModel"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateProject": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateProject message.",
        "operationId": "WsMessagingOnCreateProject",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseProject"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateProjectService": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateProjectService message.",
        "operationId": "WsMessagingOnCreateProjectService",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseProjectService"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateScript": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateScript message.",
        "operationId": "WsMessagingOnCreateScript",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseScript"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateScriptRuntime": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateScriptRuntime message.",
        "operationId": "WsMessagingOnCreateScriptRuntime",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseScriptRuntime"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onCreateSoftwareUpdate": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onCreateServiceBinding message.",
        "operationId": "WsMessagingOnCreateServiceBinding",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseServiceBinding"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteApplication": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteApplication message.",
        "operationId": "WsMessagingOnDeleteApplication",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteCategory": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteCategory message.",
        "operationId": "WsMessagingOnDeleteCategory",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteCloudCreds": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteCloudCreds message.",
        "operationId": "WsMessagingOnDeleteCloudCreds",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteDataDriverInstance": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteDataDriverInstance message.",
        "operationId": "WsMessagingOnDeleteDataDriverInstance",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteDataSource": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteDataSource message.",
        "operationId": "WsMessagingOnDeleteDataSource",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteDataStream": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteDataStream message.",
        "operationId": "WsMessagingOnDeleteDataStream",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteDockerProfile": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteDockerProfile message.",
        "operationId": "WsMessagingOnDeleteDockerProfile",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteEdge": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteEdge message.",
        "operationId": "WsMessagingOnDeleteEdge",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteLogCollector": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteLogCollector message.",
        "operationId": "WsMessagingOnDeleteLogCollector",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteMLModel": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteMLModel message.",
        "operationId": "WsMessagingOnDeleteMLModel",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteProject": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteProject message.",
        "operationId": "WsMessagingOnDeleteProject",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteProjectService": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteProjectService message.",
        "operationId": "WsMessagingOnDeleteProjectService",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteScript": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteScript message.",
        "operationId": "WsMessagingOnDeleteScript",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteScriptRuntime": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteScriptRuntime message.",
        "operationId": "WsMessagingOnDeleteScriptRuntime",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteServiceBinding": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteServiceBinding message.",
        "operationId": "WsMessagingOnDeleteServiceBinding",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onDeleteServiceInstance": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onDeleteServiceInstance message.",
        "operationId": "WsMessagingOnDeleteServiceInstance",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onGetApplicationContainers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onGetApplicationContainers message.",
        "operationId": "WsMessagingOnGetApplicationContainers",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseApplicationContainers"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onGetDataPipelineContainers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onGetDataPipelineContainers message.",
        "operationId": "WsMessagingOnGetDataPipelineContainers",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseDataPipelineContainers"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateApplication": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateApplication message.",
        "operationId": "WsMessagingOnUpdateApplication",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseApplication"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateCategory": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateCategory message.",
        "operationId": "WsMessagingOnUpdateCategory",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateCloudCreds": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateCloudCreds message.",
        "operationId": "WsMessagingOnUpdateCloudCreds",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseCloudCreds"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateDataSource": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateDataSource message.",
        "operationId": "WsMessagingOnUpdateDataSource",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseDataSource"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateDataStream": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateDataStream message.",
        "operationId": "WsMessagingOnUpdateDataStream",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseDataStream"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateEdge": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateEdge message.",
        "operationId": "WsMessagingOnUpdateEdge",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseEdge"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateLogCollector": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateLogCollector message.",
        "operationId": "WsMessagingOnUpdateLogCollector",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseLogCollector"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateMLModel": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateMLModel message.",
        "operationId": "WsMessagingOnUpdateMLModel",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseMLModel"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateProject": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateProject message.",
        "operationId": "WsMessagingOnUpdateProject",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseProject"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateProjectService": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateProjectService message.",
        "operationId": "WsMessagingOnUpdateProjectService",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseProjectService"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateScript": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateScript message.",
        "operationId": "WsMessagingOnUpdateScript",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseScript"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateScriptRuntime": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateScriptRuntime message.",
        "operationId": "WsMessagingOnUpdateScriptRuntime",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseScriptRuntime"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/onUpdateSoftwareUpdate": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateServiceInstance message.",
        "operationId": "WsMessagingOnUpdateServiceInstance",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseServiceInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/reportEdge": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for reportEdge message.",
        "operationId": "WsMessagingReportEdge",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseEdge"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseEdgeWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/reportEdgeInfo": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for reportEdgeInfo message.",
        "operationId": "WsMessagingReportEdgeInfo",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseEdgeInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseEdgeWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/reportSensors": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for reportSensors message.",
        "operationId": "WsMessagingReportSensors",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportSensorsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/setupSSHTunneling": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for setupSSHTunneling message.",
        "operationId": "WsMessagingSetupSSHTunneling",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestSetupSSHTunneling"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/v1/wsdocs/teardownSSHTunneling": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for teardownSSHTunneling message.",
        "operationId": "WsMessagingTeardownSSHTunneling",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestTeardownSSHTunneling"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    },
    "/wsdocs/onUpdateDockerProfile": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Document websocket request / response payload for onUpdateDockerProfile message.",
        "operationId": "WsMessagingOnUpdateDockerProfile",
        "parameters": [
          {
            "x-go-name": "Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectRequestBaseDockerProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseBaseWrapper"
          }
        }
      }
    }
  },
  "definitions": {
    "AIInferencingRuntime": {
      "type": "object",
      "title": "AIInferencingRuntime defines the framework type and accelerator device.",
      "properties": {
        "AcceleratorDevice": {
          "type": "string",
          "enum": [
            "CPU",
            "GPU"
          ]
        },
        "FrameworkType": {
          "type": "string",
          "enum": [
            "TensorFlow1.13.1",
            "TensorFlow2.1.0"
          ]
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AIInferencingServiceProfile": {
      "type": "object",
      "title": "AIInferencingServiceProfile has configuration setting for different framework types.",
      "properties": {
        "Enable": {
          "type": "boolean"
        },
        "Runtime": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AIInferencingRuntime"
          }
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "APIErrorPayload": {
      "description": "The error message",
      "type": "object",
      "required": [
        "statusCode",
        "errorCode",
        "message"
      ],
      "properties": {
        "errorCode": {
          "description": "Karbon Platform Services API error code",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ErrorCode"
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "x-go-name": "Message"
        },
        "statusCode": {
          "description": "HTTP status code for the response",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusCode"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AWSCredential": {
      "type": "object",
      "title": "AWSCredential - AWS access key and secret credentials.",
      "required": [
        "accessKey",
        "secret"
      ],
      "properties": {
        "accessKey": {
          "description": "Provide the AWS Access Key Id for programmatic access to the AWS services",
          "type": "string",
          "x-go-name": "AccessKey"
        },
        "secret": {
          "description": "Provide the AWS Secret Key for programmatic access to the AWS services",
          "type": "string",
          "x-go-name": "Secret"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AZCredential": {
      "type": "object",
      "title": "AZCredential - Azure credentials.",
      "required": [
        "storageAccountName",
        "storageKey"
      ],
      "properties": {
        "storageAccountName": {
          "description": "Azure storage account name and access key. \nWhen you create a storage account, Azure generates 2 access keys. Provide the primary access key here. ",
          "type": "string",
          "x-go-name": "StorageAccountName"
        },
        "storageKey": {
          "type": "string",
          "x-go-name": "StorageKey"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AdditionalItem": {
      "type": "object",
      "properties": {
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Address": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string",
          "x-go-name": "IP"
        },
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Addresses": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Address"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "AggregateInfo": {
      "description": "AggregateInfo is aggregate query response item",
      "type": "object",
      "required": [
        "doc_count",
        "key"
      ],
      "properties": {
        "doc_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DocCount"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AggregateSpec": {
      "description": "AggregateSpec is payload for common aggregate request\nin: body",
      "type": "object",
      "required": [
        "type",
        "field"
      ],
      "properties": {
        "field": {
          "type": "string",
          "x-go-name": "Field"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Aggregation": {
      "description": "Aggregation is the model representing label's allowed aggregation, transformed from aggregation in MonitoringDashboard k8s resource",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-package": "github.com/kiali/k-charted/model"
    },
    "App": {
      "type": "object",
      "required": [
        "namespace",
        "name",
        "workloads",
        "serviceNames"
      ],
      "properties": {
        "name": {
          "description": "Name of the application",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "runtimes": {
          "description": "Runtimes and associated dashboards",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Runtime"
          },
          "x-go-name": "Runtimes"
        },
        "serviceNames": {
          "description": "List of service names linked with an application",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ServiceNames"
        },
        "workloads": {
          "description": "Workloads for a given application",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadItem"
          },
          "x-go-name": "Workloads"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "AppHealth": {
      "description": "AppHealth contains aggregated health from various sources, for a given app",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/RequestHealth"
        },
        "workloadStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadStatus"
          },
          "x-go-name": "WorkloadStatuses"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "AppList": {
      "type": "object",
      "required": [
        "namespace",
        "applications"
      ],
      "properties": {
        "applications": {
          "description": "Applications for a given namespace",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppListItem"
          },
          "x-go-name": "Apps"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "AppListItem": {
      "description": "AppListItem has the necessary information to display the console app list",
      "type": "object",
      "required": [
        "name",
        "istioSidecar"
      ],
      "properties": {
        "istioSidecar": {
          "description": "Define if all Pods related to the Workloads of this app has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "labels": {
          "description": "Labels for App",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the application",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "AppOverview": {
      "type": "object",
      "properties": {
        "detail": {
          "$ref": "#/definitions/App"
        },
        "health": {
          "$ref": "#/definitions/AppHealth"
        },
        "inbound": {
          "$ref": "#/definitions/DashboardResponse"
        },
        "outbound": {
          "$ref": "#/definitions/DashboardResponse"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "AppStatus": {
      "description": "AppStatus describes status for an application on one edge",
      "type": "object",
      "required": [
        "podStatusList"
      ],
      "properties": {
        "imageList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ImageList"
        },
        "podMetricsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PodMetrics"
          },
          "x-go-name": "PodMetricsList"
        },
        "podStatusList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PodStatus"
          },
          "x-go-name": "PodStatusList"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Application": {
      "description": "Application - the contents of an Application",
      "type": "object",
      "required": [
        "tenantId",
        "name",
        "projectId",
        "yamlData"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dataIfcEndpoints": {
          "description": "DataIfcEndpoints is a list of endpoints exposed to an application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataIfcEndpoint"
          },
          "x-go-name": "DataIfcEndpoints",
          "example": "DataIfcEndpoint{Name: \"test_topic\", ID: \"data-interface-uuid\"}}"
        },
        "description": {
          "description": "A description of the application.\nMaximum length of 200 characters.",
          "type": "string",
          "x-go-name": "Description"
        },
        "edgeIds": {
          "description": "Edges listed according to ID where the application is deployed.\nOnly relevant if the parent project EdgeSelectorType value is set to Explicit.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeIDs"
        },
        "edgeSelectors": {
          "description": "Select edges according to CategoryInfo.\nOnly relevant if the parent project EdgeSelectorType value is set to Category.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "EdgeSelectors"
        },
        "excludeEdgeIds": {
          "description": "Edges to be excluded from the application deployment.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ExcludeEdgeIDs"
        },
        "helmMetadata": {
          "$ref": "#/definitions/HelmAppMetadata"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "The application name.\nMaximum length of 200 characters.",
          "type": "string",
          "x-go-name": "Name",
          "example": "FaceFeed"
        },
        "onlyPrePullOnUpdate": {
          "description": "Only pre-pull images on service domains w/o doing an actual update.\nService domain which have not yet deployed the app will deploy\napplication like usual.\nUpdate will commence once this flag is unset.",
          "type": "boolean",
          "x-go-name": "OnlyPrePullOnUpdate"
        },
        "originSelectors": {
          "description": "OriginSelectors is the list of CategoryInfo used as criteria\nto feed data into applications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "OriginSelectors"
        },
        "packagingType": {
          "description": "PackagingType vanilla or helm, nil = vanilla",
          "type": "string",
          "x-go-name": "PackagingType"
        },
        "projectId": {
          "description": "Parent project ID.\nNot required (to maintain backward compatibility).",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "state": {
          "description": "State of this entity",
          "type": "string",
          "x-go-name": "State"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        },
        "yamlData": {
          "description": "The YAML content for the application.",
          "type": "string",
          "x-go-name": "YamlData"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ApplicationContainers": {
      "description": "ApplicationContainers encapsulates the container names\nfor a specific application on a specific edge.",
      "type": "object",
      "properties": {
        "applicationId": {
          "type": "string",
          "x-go-name": "ApplicationID"
        },
        "containerNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ContainerNames"
        },
        "edgeId": {
          "type": "string",
          "x-go-name": "EdgeID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ApplicationContainersBaseObject": {
      "description": "ApplicationContainersBaseObject - appID and edgeID for which the containers will\nlisted.",
      "type": "object",
      "properties": {
        "applicationId": {
          "type": "string",
          "x-go-name": "ApplicationID"
        },
        "edgeId": {
          "type": "string",
          "x-go-name": "EdgeID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ApplicationListResponsePayload": {
      "description": "payload for ApplicationListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of applications",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationV2"
          },
          "x-go-name": "ApplicationListV2"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ApplicationStatus": {
      "description": "ApplicationStatus - the contents of an ApplicationStatus",
      "type": "object",
      "required": [
        "tenantId",
        "edgeId",
        "applicationId",
        "appStatus"
      ],
      "properties": {
        "appStatus": {
          "$ref": "#/definitions/AppStatus"
        },
        "applicationId": {
          "type": "string",
          "x-go-name": "ApplicationID"
        },
        "createdAt": {
          "description": "ntnx:ignore",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "edgeId": {
          "type": "string",
          "x-go-name": "EdgeID"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ApplicationStatusListPayload": {
      "description": "payload for ApplicationStatusListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of application statuses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationStatus"
          },
          "x-go-name": "ApplicationStatusList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ApplicationV2": {
      "description": "ApplicationV2 - the contents of an application",
      "type": "object",
      "required": [
        "tenantId",
        "name",
        "projectId",
        "appManifest"
      ],
      "properties": {
        "appManifest": {
          "description": "The kubernetes manifest for the application in YAML format.",
          "type": "string",
          "x-go-name": "AppManifest"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dataIfcEndpoints": {
          "description": "DataIfcEndpoints is a list of endpoints exposed to an application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataIfcEndpoint"
          },
          "x-go-name": "DataIfcEndpoints",
          "example": "DataIfcEndpoint{Name: \"test_topic\", ID: \"data-interface-uuid\"}}"
        },
        "description": {
          "description": "A description of the application.\nMaximum length of 200 characters.",
          "type": "string",
          "x-go-name": "Description"
        },
        "edgeIds": {
          "description": "Edges listed according to ID where the application is deployed.\nOnly relevant if the parent project EdgeSelectorType value is set to Explicit.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeIDs"
        },
        "edgeSelectors": {
          "description": "Select edges according to CategoryInfo.\nOnly relevant if the parent project EdgeSelectorType value is set to Category.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "EdgeSelectors"
        },
        "excludeEdgeIds": {
          "description": "Edges to be excluded from the application deployment.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ExcludeEdgeIDs"
        },
        "helmMetadata": {
          "$ref": "#/definitions/HelmAppMetadata"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "The application name.\nMaximum length of 200 characters.",
          "type": "string",
          "x-go-name": "Name",
          "example": "FaceFeed"
        },
        "onlyPrePullOnUpdate": {
          "description": "Only pre-pull images on service domains w/o doing an actual update.\nService domain which have not yet deployed the app will deploy\napplication like usual.\nUpdate will commence once this flag is unset.",
          "type": "boolean",
          "x-go-name": "OnlyPrePullOnUpdate"
        },
        "originSelectors": {
          "description": "OriginSelectors is the list of CategoryInfo used as criteria\nto feed data into applications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "OriginSelectors"
        },
        "packagingType": {
          "description": "PackagingType vanilla or helm, nil = vanilla",
          "type": "string",
          "x-go-name": "PackagingType"
        },
        "projectId": {
          "description": "Parent project ID.\nNot required (to maintain backward compatibility).",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "state": {
          "description": "State of this entity",
          "type": "string",
          "x-go-name": "State"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AuditLog": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "edgeIds": {
          "type": "string",
          "x-go-name": "EdgeIDs"
        },
        "hostname": {
          "type": "string",
          "x-go-name": "Hostname"
        },
        "requestHeader": {
          "type": "string",
          "x-go-name": "RequestHeader"
        },
        "requestId": {
          "type": "string",
          "x-go-name": "RequestID"
        },
        "requestMethod": {
          "type": "string",
          "x-go-name": "RequestMethod"
        },
        "requestPayload": {
          "type": "string",
          "x-go-name": "RequestPayload"
        },
        "requestUrl": {
          "type": "string",
          "x-go-name": "RequestURL"
        },
        "responseCode": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ResponseCode"
        },
        "responseLength": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ResponseLength"
        },
        "responseMessage": {
          "type": "string",
          "x-go-name": "ResponseMessage"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartedAt"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "timeMs": {
          "type": "number",
          "format": "float",
          "x-go-name": "TimeMS"
        },
        "userEmail": {
          "type": "string",
          "x-go-name": "UserEmail"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AuditLogListResponsePayload": {
      "description": "payload for AuditLogListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of audit logs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLog"
          },
          "x-go-name": "AuditLogList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AuditLogV2": {
      "description": "AuditLogV2 is the object model for audit log",
      "type": "object",
      "properties": {
        "modifierID": {
          "type": "string",
          "x-go-name": "ModifierID"
        },
        "modifierName": {
          "type": "string",
          "x-go-name": "ModifierName"
        },
        "modifierRole": {
          "type": "string",
          "x-go-name": "ModifierRole"
        },
        "operation": {
          "type": "string",
          "x-go-name": "Operation"
        },
        "operationType": {
          "type": "string",
          "x-go-name": "OperationType"
        },
        "payload": {
          "type": "string",
          "x-go-name": "Payload"
        },
        "projectID": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "projectName": {
          "type": "string",
          "x-go-name": "ProjectName"
        },
        "resourceID": {
          "type": "string",
          "x-go-name": "ResourceID"
        },
        "resourceName": {
          "type": "string",
          "x-go-name": "ResourceName"
        },
        "resourceType": {
          "type": "string",
          "x-go-name": "ResourceType"
        },
        "scope": {
          "type": "string",
          "x-go-name": "Scope"
        },
        "serviceDomainID": {
          "type": "string",
          "x-go-name": "ServiceDomainID"
        },
        "serviceDomainName": {
          "type": "string",
          "x-go-name": "ServiceDomainName"
        },
        "tenantID": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AuditLogV2Filter": {
      "description": "StartTime is the later time (inclusive) going back to the earlier EndTime (exclusive)",
      "type": "object",
      "title": "AuditLogV2Filter is the audit log filter in QueryAuditLogsV2.",
      "required": [
        "termsKeyValue"
      ],
      "properties": {
        "endTime": {
          "description": "Search for events by this earlier timestamp (inclusive).",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndTime"
        },
        "fromDocument": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FromDocument"
        },
        "groupBy": {
          "type": "string",
          "x-go-name": "GroupBy"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Scopes"
        },
        "startTime": {
          "description": "Search for events by this later timestamp (inclusive)",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartTime"
        },
        "termsKeyValue": {
          "description": "TenantID must be provided in order to search audit logs",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AuditLogV2MultipleValues"
          },
          "x-go-name": "TermsKeyValue"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AuditLogV2InsertRequest": {
      "description": "AuditLogV2InsertRequest is the request payload for InsertAuditLogV2",
      "type": "object",
      "properties": {
        "auditlog": {
          "$ref": "#/definitions/AuditLogV2"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AuditLogV2MultipleValues": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Values"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "AuditLogsV2InsertRequest": {
      "description": "AuditLogsV2InsertRequest is the request payload for InsertAuditLogsV2",
      "type": "object",
      "properties": {
        "auditlogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogV2"
          },
          "x-go-name": "AuditLogs"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Category": {
      "description": "Similar to labels for Kubernetes.\nCategory logically groups edges, data sources, and other items.\nApplying a category to an entity applies any values and attributes associated with the category to the entity.",
      "type": "object",
      "title": "Category is object model for Category.",
      "required": [
        "tenantId",
        "name",
        "purpose",
        "values"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Unique category name.",
          "type": "string",
          "x-go-name": "Name",
          "example": "Airport, Terminal, Floor, Environment, Department, and so on."
        },
        "purpose": {
          "description": "Purpose of the category.",
          "type": "string",
          "x-go-name": "Purpose"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Values"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CategoryDetailUsageInfo": {
      "description": "CategoryDetailUsageInfo captures category usage info details",
      "type": "object",
      "required": [
        "id",
        "usageMap"
      ],
      "properties": {
        "id": {
          "description": "ID of the category",
          "type": "string",
          "x-go-name": "ID"
        },
        "usageMap": {
          "description": "UsageMap map of category value to its usage",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CategoryUsage"
          },
          "x-go-name": "UsageMap"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CategoryInfo": {
      "type": "object",
      "title": "CategoryInfo - a choice of a value from a category.",
      "required": [
        "id",
        "value"
      ],
      "properties": {
        "id": {
          "description": "The category ID.",
          "type": "string",
          "x-go-name": "ID",
          "example": "the ID for the Airport category."
        },
        "value": {
          "description": "An allowed value to choose for the category.",
          "type": "string",
          "x-go-name": "Value",
          "example": "SFO, SJC, LAX, and so on."
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CategoryListResponsePayload": {
      "description": "payload for CategoryListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of categories",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          },
          "x-go-name": "CategoryList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CategoryUsage": {
      "description": "CategoryUsage captures usage for a category or category value",
      "type": "object",
      "required": [
        "edgeIds",
        "projectIds",
        "applicationIds",
        "dataPipelineIds",
        "dataSourceIds"
      ],
      "properties": {
        "applicationIds": {
          "description": "IDs of applications using this category",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ApplicationIDs"
        },
        "dataPipelineIds": {
          "description": "IDs of data pipelines using this category",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DataPipelineIDs"
        },
        "dataSourceIds": {
          "description": "IDs of data sources using this category",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DataSourceIDs"
        },
        "edgeIds": {
          "description": "IDs of edges using this category",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeIDs"
        },
        "projectIds": {
          "description": "IDs of projects using this category",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ProjectIDs"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CategoryUsageInfo": {
      "description": "CategoryUsageInfo captures usage info for a category",
      "type": "object",
      "required": [
        "edgeIds",
        "projectIds",
        "applicationIds",
        "dataPipelineIds",
        "dataSourceIds",
        "id"
      ],
      "properties": {
        "applicationIds": {
          "description": "IDs of applications using this category",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ApplicationIDs"
        },
        "dataPipelineIds": {
          "description": "IDs of data pipelines using this category",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DataPipelineIDs"
        },
        "dataSourceIds": {
          "description": "IDs of data sources using this category",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DataSourceIDs"
        },
        "edgeIds": {
          "description": "IDs of edges using this category",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeIDs"
        },
        "id": {
          "description": "ID of the category",
          "type": "string",
          "x-go-name": "ID"
        },
        "projectIds": {
          "description": "IDs of projects using this category",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ProjectIDs"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Certificates": {
      "description": "Certificates is DB and object model for a device's certificates",
      "type": "object",
      "required": [
        "certificate",
        "privateKey",
        "CACertificate"
      ],
      "properties": {
        "CACertificate": {
          "description": "Root CA certificate that signed the device certificate.",
          "type": "string"
        },
        "certificate": {
          "description": "Certificate for a device.",
          "type": "string",
          "x-go-name": "Certificate"
        },
        "privateKey": {
          "description": "Encrypted private key corresponding to the certificate.",
          "type": "string",
          "x-go-name": "PrivateKey"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Chart": {
      "description": "Chart is the model representing a custom chart, transformed from charts in MonitoringDashboard k8s resource",
      "type": "object",
      "properties": {
        "chartType": {
          "type": "string",
          "x-go-name": "ChartType"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "max": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max"
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SampleStream"
          },
          "x-go-name": "Metrics"
        },
        "min": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Min"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "spans": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Spans"
        },
        "startCollapsed": {
          "type": "boolean",
          "x-go-name": "StartCollapsed"
        },
        "unit": {
          "type": "string",
          "x-go-name": "Unit"
        }
      },
      "x-go-package": "github.com/kiali/k-charted/model"
    },
    "CloudCreds": {
      "type": "object",
      "title": "CloudCreds is the object model for cloud credentials.",
      "required": [
        "tenantId",
        "name",
        "type",
        "description"
      ],
      "properties": {
        "awsCredential": {
          "$ref": "#/definitions/AWSCredential"
        },
        "azCredential": {
          "$ref": "#/definitions/AZCredential"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Describes the cloud service profile.",
          "type": "string",
          "x-go-name": "Description"
        },
        "gcpCredential": {
          "$ref": "#/definitions/GCPCredential"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "iflagEncrypted": {
          "description": "ntnx:ignore\n\nInternal Flag - encrypted - for internal migration use",
          "type": "boolean",
          "x-go-name": "IFlagEncrypted"
        },
        "name": {
          "description": "Name for the cloud profile.",
          "type": "string",
          "x-go-name": "Name"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Cloud type for this cloud profile. \nSet value to one of the following: AWS, GCP, Azure",
          "type": "string",
          "enum": [
            "AWS",
            "GCP",
            "Azure"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CloudCredsListResponsePayload": {
      "description": "payload for CloudCredsListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of cloud profiles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudCreds"
          },
          "x-go-name": "CloudCredsList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CloudProfile": {
      "type": "object",
      "title": "CloudProfile is the object model for cloud credentials.",
      "required": [
        "tenantId",
        "name",
        "type",
        "description"
      ],
      "properties": {
        "awsCredential": {
          "$ref": "#/definitions/AWSCredential"
        },
        "azCredential": {
          "$ref": "#/definitions/AZCredential"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Describes the cloud service profile.",
          "type": "string",
          "x-go-name": "Description"
        },
        "gcpCredential": {
          "$ref": "#/definitions/GCPCredential"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "iflagEncrypted": {
          "description": "ntnx:ignore\n\nInternal Flag - encrypted - for internal migration use",
          "type": "boolean",
          "x-go-name": "IFlagEncrypted"
        },
        "name": {
          "description": "Name for the cloud profile.",
          "type": "string",
          "x-go-name": "Name"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Cloud type for this cloud profile. \nSet value to one of the following: AWS, GCP, Azure",
          "type": "string",
          "enum": [
            "AWS",
            "GCP",
            "Azure"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CloudProfileInfo": {
      "type": "object",
      "required": [
        "cloudCredsID"
      ],
      "properties": {
        "cloudCredsID": {
          "type": "string",
          "x-go-name": "CloudCredsID"
        },
        "email": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "Email"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CloudProfileListResponsePayload": {
      "description": "payload for CloudProfileListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of cloud profiles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudProfile"
          },
          "x-go-name": "CloudProfileList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ClusterConfig": {
      "description": "ClusterConfig is the cluster config information",
      "type": "object",
      "required": [
        "floatingIP"
      ],
      "properties": {
        "floatingIP": {
          "description": "floatingIp is the floating IP for the cluster",
          "type": "string",
          "x-go-name": "FloatingIP",
          "example": "10.8.4.12"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ClusterRbacConfig": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/ClusterRbacConfigSpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ClusterRbacConfigSpec": {
      "type": "object",
      "properties": {
        "exclusion": {
          "type": "object",
          "x-go-name": "Exclusion"
        },
        "inclusion": {
          "type": "object",
          "x-go-name": "Inclusion"
        },
        "mode": {
          "type": "object",
          "x-go-name": "Mode"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ClusterRbacConfigs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ClusterRbacConfig"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ComponentStatus": {
      "type": "object",
      "required": [
        "name",
        "status",
        "isCore"
      ],
      "properties": {
        "isCore": {
          "description": "When true, the component is necessary for Istio to function. Otherwise, it is an addon",
          "type": "boolean",
          "x-go-name": "IsCore",
          "example": true
        },
        "name": {
          "description": "The app label value of the Istio component",
          "type": "string",
          "x-go-name": "Name",
          "example": "istio-ingressgateway"
        },
        "status": {
          "description": "The status of a Istio component",
          "type": "string",
          "x-go-name": "Status",
          "example": "Not Found"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ContainerInfo": {
      "description": "ContainerInfo holds container name and image",
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ContainerRegistry": {
      "description": "ContainerRegistry is the object model for ContainerRegistry",
      "type": "object",
      "required": [
        "tenantId",
        "name",
        "type",
        "server"
      ],
      "properties": {
        "cloudCredsID": {
          "description": "Existing cloud profile to use with the container registry profile.\n\nRequired if Type == AWS || Type == GCP",
          "type": "string",
          "x-go-name": "CloudCredsID"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Description for the container registry profile.",
          "type": "string",
          "x-go-name": "Description"
        },
        "email": {
          "description": "Email address to associate with the container registry profile.\n\nRequired for container registry profiles.",
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "iflagEncrypted": {
          "description": "ntnx:ignore\n\nInternal Flag - encrypted - for internal migration use",
          "type": "boolean",
          "x-go-name": "IFlagEncrypted"
        },
        "name": {
          "description": "Name for the container registry profile.",
          "type": "string",
          "x-go-name": "Name"
        },
        "pwd": {
          "description": "Password for the container registry profile.\n\nRequired for container registry profiles.",
          "type": "string",
          "x-go-name": "Pwd"
        },
        "server": {
          "description": "Provide a server URL to the container registry in the format used by your cloud provider.\nFor example, an Amazon AWS Elastic Container Registry (ECR) URL might be:\nhttps://aws_account_id.dkr.ecr.region.amazonaws.com",
          "type": "string",
          "x-go-name": "Server"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Container registry profile type.",
          "type": "string",
          "enum": [
            "AWS",
            "GCP",
            "Azure",
            "ContainerRegistry"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "userName": {
          "description": "Cloud profile user name for use with the container registry profile.\n\nRequired for container registry profiles.",
          "type": "string",
          "x-go-name": "UserName"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ContainerRegistryInfo": {
      "type": "object",
      "required": [
        "userName",
        "pwd",
        "email"
      ],
      "properties": {
        "email": {
          "description": "Email address for the container registry profile user.",
          "type": "string",
          "x-go-name": "Email"
        },
        "pwd": {
          "description": "Password for the container registry profile.",
          "type": "string",
          "x-go-name": "Pwd"
        },
        "userName": {
          "description": "User name for the container registry profile.",
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ContainerRegistryListPayload": {
      "description": "payload for ContainerRegistryListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of container registries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerRegistryV2"
          },
          "x-go-name": "ContainerRegistryListV2"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ContainerRegistryV2": {
      "description": "ContainerRegistryV2 ContainerRegistry",
      "type": "object",
      "required": [
        "tenantId",
        "name",
        "type",
        "server"
      ],
      "properties": {
        "CloudProfileInfo": {
          "$ref": "#/definitions/CloudProfileInfo"
        },
        "ContainerRegistryInfo": {
          "$ref": "#/definitions/ContainerRegistryInfo"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Description for the container registry.",
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "iflagEncrypted": {
          "description": "ntnx:ignore\n\nInternal Flag - encrypted - for internal migration use",
          "type": "boolean",
          "x-go-name": "IFlagEncrypted"
        },
        "name": {
          "description": "Name for the container registry.",
          "type": "string",
          "x-go-name": "Name"
        },
        "server": {
          "description": "Container registry server URL.\nFor example, an Amazon AWS Elastic Container Registry (ECR) URL might be:\nhttps://aws_account_id.dkr.ecr.region.amazonaws.com",
          "type": "string",
          "x-go-name": "Server"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Container registry type.",
          "type": "string",
          "enum": [
            "AWS",
            "GCP",
            "Azure",
            "ContainerRegistry"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CreateDocumentResponse": {
      "description": "CreateDocumentResponse - create document response struct",
      "type": "object",
      "required": [
        "_id"
      ],
      "properties": {
        "_id": {
          "description": "ID of the created entity",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "CreateDocumentResponseV2": {
      "description": "CreateDocumentResponseV2 - create document response struct",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the created entity",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Credential": {
      "description": "Credential is used for login payload",
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DashboardRef": {
      "description": "DashboardRef holds template name and title for a custom dashboard",
      "type": "object",
      "properties": {
        "template": {
          "type": "string",
          "x-go-name": "Template"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/kiali/k-charted/model"
    },
    "DashboardResponse": {
      "description": "Dashboard response model",
      "type": "object",
      "properties": {
        "Body": {
          "$ref": "#/definitions/MonitoringDashboard"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "DataDriverClass": {
      "description": "A data driver class represents a logical IoT Data Source/Sink integration.",
      "type": "object",
      "title": "DataDriverClass is object model for data driver class",
      "required": [
        "tenantId",
        "name",
        "driverVersion",
        "type",
        "yamlData"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "driverVersion": {
          "description": "Externa lversion of a data driver.\nIt is possible to have multiple data drivers with the same name, but different versions.",
          "type": "string",
          "x-go-name": "DataDriverVersion"
        },
        "dynamicParameterSchema": {
          "$ref": "#/definitions/DataDriverParametersSchema"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "minSvcDomainVersion": {
          "type": "string",
          "x-go-name": "MinSvcDomainVersion"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "staticParameterSchema": {
          "$ref": "#/definitions/DataDriverParametersSchema"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "$ref": "#/definitions/DataDriverClassType"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        },
        "yamlData": {
          "description": "The YAML content for the application.",
          "type": "string",
          "x-go-name": "YamlData"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataDriverClassListResponsePayload": {
      "description": "payload for DataDriverClassListResponsePayload",
      "type": "object",
      "title": "DataDriverClassListResponsePayload is a data driver class listing payload",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of data driver classes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataDriverClass"
          },
          "x-go-name": "ListOfDataDrivers"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataDriverClassType": {
      "type": "string",
      "enum": [
        "SOURCE",
        "SINK"
      ]
    },
    "DataDriverConfig": {
      "description": "A dynamic instance config represents a logical Data Source/Sink integration's dynamic configuration.",
      "type": "object",
      "title": "DataDriverConfig is object model for data driver instance's dynamic configuration",
      "required": [
        "tenantId",
        "name",
        "dataDriverInstanceID"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dataDriverInstanceID": {
          "type": "string",
          "x-go-name": "DataDriverInstanceID"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "edgeIds": {
          "description": "Edges listed according to ID where the data driver config is deployed.\nOnly relevant if the parent project EdgeSelectorType value is set to Explicit.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeIDs"
        },
        "edgeSelectors": {
          "description": "Select edges according to CategoryInfo.\nOnly relevant if the parent project EdgeSelectorType value is set to Category.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "EdgeSelectors"
        },
        "excludeEdgeIds": {
          "description": "Edges to be excluded from the data driver config deployment.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ExcludeEdgeIDs"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "labels": {
          "description": "A list of Category labels for this data driver config.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "parameters": {
          "$ref": "#/definitions/DataDriverParametersValues"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataDriverConfigListResponsePayload": {
      "description": "payload for DataDriverConfigListResponsePayload",
      "type": "object",
      "title": "DataDriverConfigListResponsePayload is a data driver config listing payload",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of data driver configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataDriverConfig"
          },
          "x-go-name": "ListOfDataDriverInstancesConfigs"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataDriverInstance": {
      "description": "A data driver instance represents a logical IoT Data Source/Sink integration.",
      "type": "object",
      "title": "DataDriverInstance is object model for data driver instance",
      "required": [
        "tenantId",
        "name",
        "dataDriverClassID",
        "projectId"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dataDriverClassID": {
          "type": "string",
          "x-go-name": "DataDriverClassID"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "projectId": {
          "description": "ID of parent project.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "staticParameters": {
          "$ref": "#/definitions/DataDriverParametersValues"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataDriverInstanceInventory": {
      "description": "DataDriverInstanceInventory is used as a websocket payload for Data Driver Instance",
      "type": "object",
      "required": [
        "tenantId",
        "doc",
        "class",
        "yamlData",
        "config"
      ],
      "properties": {
        "class": {
          "$ref": "#/definitions/DataDriverClass"
        },
        "config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataDriverConfig"
          },
          "x-go-name": "ListOfDataDriverConfigs"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "doc": {
          "$ref": "#/definitions/DataDriverInstance"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        },
        "yamlData": {
          "type": "string",
          "x-go-name": "YamlData"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataDriverInstanceListResponsePayload": {
      "description": "payload for DataDriverInstanceListResponsePayload",
      "type": "object",
      "title": "DataDriverInstanceListResponsePayload is a data driver instance listing payload",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of data driver instances",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataDriverInstance"
          },
          "x-go-name": "ListOfDetaDriverInstances"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataDriverParametersSchema": {
      "description": "DataDriverParametersSchema is the type of the data driver class parameters schema (JSON schema object)",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataDriverParametersValues": {
      "description": "DataDriverParametersValues is the type for the data driver class parameter values",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataIfcEndpoint": {
      "description": "DataIfcEndpoint is the endpoint within a given data Ifc",
      "type": "object",
      "required": [
        "id",
        "name",
        "value"
      ],
      "properties": {
        "id": {
          "description": "ID is the UUID of the data Src/Ifc",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name is the name of the field within the data Src/Ifc.\nThis defines invariant between data ifc and application.\nIf an application is associated w/ a given data ifc field name, that field\nname cannot be removed from the data ifc until application is no longer the consumer of the\nfield.",
          "type": "string",
          "x-go-name": "Name",
          "example": "\"temperature\""
        },
        "value": {
          "description": "Value is the name of the endpoint within the data Src/Ifc. This could be a topic name or bucket name, etc.\nArtifacts of a data Ifc be affected by this.",
          "type": "string",
          "x-go-name": "Value",
          "example": "It could an HLS out Ifc would append this to the last part"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataPipeline": {
      "description": "DataPipelines are fundamental building blocks for Karbon Platform Services data pipeline.",
      "type": "object",
      "title": "DataPipeline is object model for data pipeline",
      "required": [
        "tenantId",
        "name",
        "dataType",
        "origin",
        "originSelectors",
        "destination",
        "size",
        "enableSampling",
        "transformationArgsList",
        "dataRetention"
      ],
      "properties": {
        "DataIfcEndpoints": {
          "description": "Data Ifc endpoints connected to this datastream",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataIfcEndpoint"
          }
        },
        "awsCloudRegion": {
          "description": "AWS region. Required if cloudType == AWS",
          "type": "string",
          "enum": [
            "us-east-2",
            "us-east-1",
            "us-west-1",
            "us-west-2",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ca-central-1",
            "cn-north-1",
            "cn-northwest-1",
            "eu-central-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "sa-east-1"
          ],
          "x-go-name": "AWSCloudRegion"
        },
        "awsStreamType": {
          "description": "Type of the DataStream at AWS Cloud.\nRequired if cloudType == AWS",
          "type": "string",
          "enum": [
            "Kinesis",
            "SQS",
            "S3",
            "DynamoDB"
          ],
          "x-go-name": "AWSStreamType"
        },
        "azStreamType": {
          "description": "Type of the DataStream at Azure Cloud.\nRequired if cloudType == Azure",
          "type": "string",
          "enum": [
            "Blob"
          ],
          "x-go-name": "AZStreamType"
        },
        "cloudCredsId": {
          "description": "CloudCreds id.\nRequired if destination == Cloud",
          "type": "string",
          "x-go-name": "CloudCredsID"
        },
        "cloudType": {
          "description": "Cloud type, required if destination == Cloud",
          "type": "string",
          "enum": [
            "AWS",
            "GCP",
            "Azure"
          ],
          "x-go-name": "CloudType"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dataRetention": {
          "description": "Retention policy for this DataStream.\nMultiple RetentionInfo are combined using AND semantics.\nFor example, retain data for 1 month AND up to 2 TB of data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionInfo"
          },
          "x-go-name": "DataRetention"
        },
        "dataType": {
          "description": "Data type of the DataStream.\nFor example, Temperature, Pressure, Image, Multiple, etc.",
          "type": "string",
          "x-go-name": "DataType"
        },
        "description": {
          "description": "The description of the DataStream",
          "type": "string",
          "x-go-name": "Description"
        },
        "destination": {
          "description": "Destination of the DataStream.\nEither Edge or Cloud or DataInterface.",
          "type": "string",
          "enum": [
            "Edge",
            "Cloud",
            "DataInterface"
          ],
          "x-go-name": "Destination"
        },
        "edgeStreamType": {
          "description": "Type of the DataStream at Edge.\nRequired if destination == Edge",
          "type": "string",
          "enum": [
            "Kafka",
            "ElasticSearch",
            "MQTT",
            "DataDriver",
            "None"
          ],
          "x-go-name": "EdgeStreamType"
        },
        "enableSampling": {
          "description": "Whether to turn sampling on.\nIf true, then samplingInterval should be set as well.",
          "type": "boolean",
          "x-go-name": "EnableSampling"
        },
        "endPoint": {
          "description": "End point of datastream.\nUser specifies the endpoint.",
          "type": "string",
          "x-go-name": "EndPoint"
        },
        "endPointURI": {
          "description": "Endpoint URI\nDerived from existing fields\nrequired false",
          "type": "string",
          "x-go-name": "EndPointURI"
        },
        "gcpCloudRegion": {
          "description": "GCP region. Required if cloudType == GCP",
          "type": "string",
          "enum": [
            "northamerica-northeast1",
            "us-central1",
            "us-west1",
            "us-east4",
            "us-east1",
            "southamerica-east1",
            "europe-west1",
            "europe-west2",
            "europe-west3",
            "europe-west4",
            "asia-south1",
            "asia-southeast1",
            "asia-east1",
            "asia-northeast1",
            "australia-southeast1"
          ],
          "x-go-name": "GCPCloudRegion"
        },
        "gcpStreamType": {
          "description": "Type of the DataStream at GCP Cloud.\nRequired if cloudType == GCP",
          "type": "string",
          "enum": [
            "PubSub",
            "CloudDatastore",
            "CloudSQL",
            "CloudStorage"
          ],
          "x-go-name": "GCPStreamType"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name of the DataStream.\nThis is the published output (Kafka topic) name.",
          "type": "string",
          "x-go-name": "Name"
        },
        "origin": {
          "description": "The origin of the DataStream.\nEither 'Data Source' or 'Data Stream'",
          "type": "string",
          "enum": [
            "Data Source",
            "Data Stream"
          ],
          "x-go-name": "Origin"
        },
        "originId": {
          "description": "If origin == 'Data Stream', then originId\ncan be used in place of originSelectors\nto specify the origin data stream ID if the origin data stream is unique.",
          "type": "string",
          "x-go-name": "OriginID"
        },
        "originSelectors": {
          "description": "A list of CategoryInfo used as criteria\nto filter sources applicable to this DataStream.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "OriginSelectors"
        },
        "outDataIfc": {
          "$ref": "#/definitions/DataSource"
        },
        "projectId": {
          "description": "ID of parent project.\nThis should be required, but is not marked as such due to backward compatibility.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "samplingInterval": {
          "description": "Sampling interval in seconds.\nThe sampling interval applies to each mqtt/kafka topic separately.",
          "type": "number",
          "format": "double",
          "x-go-name": "SamplingInterval"
        },
        "size": {
          "description": "Current size of the DataStream output in GB.",
          "type": "number",
          "format": "double",
          "x-go-name": "Size"
        },
        "state": {
          "description": "State of this entity",
          "type": "string",
          "x-go-name": "State"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "transformationArgsList": {
          "description": "List of transformations (together with their args)\nto apply to the origin data\nto produce the destination data.\nCould be empty if no transformation required.\nEach entry is the id of the transformation Script to apply to input from origin\nto produce output to destination.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransformationArgs"
          },
          "x-go-name": "TransformationArgsList"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataPipelineContainers": {
      "description": "DataPipelineContainers encapsulates the container names\nfor a specific data pipeline on a specific edge.",
      "type": "object",
      "properties": {
        "containerNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ContainerNames"
        },
        "dataPipelineId": {
          "type": "string",
          "x-go-name": "DataPipelineID"
        },
        "edgeId": {
          "type": "string",
          "x-go-name": "EdgeID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataPipelineContainersBaseObject": {
      "description": "DataPipelineContainersBaseObject - dataPipelineId and edgeID for which the\ncontainers will listed.",
      "type": "object",
      "properties": {
        "dataPipelineId": {
          "type": "string",
          "x-go-name": "DataPipelineID"
        },
        "edgeId": {
          "type": "string",
          "x-go-name": "EdgeID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataPipelineListPayload": {
      "description": "payload for DataPipelineListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of data pipelines",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataPipeline"
          },
          "x-go-name": "DataPipelineList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataSource": {
      "description": "A data source represents a logical IoT Sensor or Gateway.\nNote: This grouping is a construct to store meta information\nfor sensors. Defining a data source does not cause\nthe topic message to flow into the Karbon Platform Services Service Domain (for example, NATS or Kafka).\nYou must create a data pipeline to enable that flow.",
      "type": "object",
      "title": "Data source is an object model for data source",
      "required": [
        "tenantId",
        "edgeId",
        "name",
        "type",
        "connection",
        "selectors",
        "protocol",
        "authType",
        "fields"
      ],
      "properties": {
        "authType": {
          "description": "Authentication type used by the sensor.",
          "type": "string",
          "enum": [
            "CERTIFICATE",
            "PASSWORD",
            "TOKEN"
          ],
          "x-go-name": "AuthType"
        },
        "connection": {
          "description": "Sensor connection type:\nSecure or Unsecure",
          "type": "string",
          "enum": [
            "Secure",
            "Unsecure"
          ],
          "x-go-name": "Connection"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "edgeId": {
          "description": "ID of the edge this entity belongs to",
          "type": "string",
          "x-go-name": "EdgeID"
        },
        "fields": {
          "description": "User defined fields to extract data from the topic payload.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceFieldInfo"
          },
          "x-go-name": "Fields"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "ifcInfo": {
          "$ref": "#/definitions/DataSourceIfcInfo"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "protocol": {
          "description": "Protocol used by the Sensor.",
          "type": "string",
          "enum": [
            "MQTT",
            "RTSP",
            "GIGEVISION",
            "DATAINTERFACE"
          ],
          "x-go-name": "Protocol"
        },
        "selectors": {
          "description": "A list of DataSourceFieldSelector users assigned to the data source.\nAllows a user to use Category selectors to identify the\ndata pipeline source.\nSelectors with different category IDs are combined with the AND operator,\nwhile selectors with the same category ID are combined with the OR operator.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceFieldSelector"
          },
          "x-go-name": "Selectors"
        },
        "sensorModel": {
          "description": "ntnx:ignore\n\nSensor model\nAs we cannot currently detect sensor capability,\nwe need a list of supported sensorModel values\nwhich maps to a predefined sensor payload format.",
          "type": "string",
          "x-go-name": "SensorModel"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Data source type:\nSensor or Gateway",
          "type": "string",
          "enum": [
            "Sensor",
            "Gateway"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataSourceArtifact": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Data"
        },
        "dataSourceId": {
          "type": "string",
          "x-go-name": "DataSourceID"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataSourceFieldInfo": {
      "description": "A field represents specific information within a data source topic payload.\nA topic payload may contain multiple fields.\nThe user defines fields extractable from a topic\nby specifying DataSourceFieldInfo for each field of a data source in the user interface.\nThe fieldType for a field is used to extract the field value from the topic payload.",
      "type": "object",
      "title": "DataSourceFieldInfo - data source field info struct",
      "required": [
        "name",
        "fieldType",
        "mqttTopic"
      ],
      "properties": {
        "fieldType": {
          "description": "Data type for the field.\nFor example, Temperature, Pressure, Custom, and so on.\nSpecify Custom for the entire topic payload. No special extraction is performed.\nWhen you specify Custom, Karbon Platform Services might not perform intelligent operations automatically\nwhen you specify other fields like Temperature.\nIn the future custom extraction functions\nfor each field might be allowed.\nDataSource dataType is derived from fieldType of all fields in the data source.",
          "type": "string",
          "x-go-name": "FieldType"
        },
        "mqttTopic": {
          "description": "Topic for the field.\nThe topic specified depends on the protocol in the data source. Specify the mqqtTopic for the MQTT protocol.\nFor the RTSP protocol, the topic is the server endpoint or named protocol stream in the RSTP URL.",
          "type": "string",
          "x-go-name": "MQTTTopic"
        },
        "name": {
          "description": "A unique name within the the data source.",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataSourceFieldInfoV2": {
      "description": "A field represents specific information within a data source topic payload.\nA topic payload may contain multiple fields.\nThe user defines fields extractable from a topic\nby specifying DataSourceFieldInfo for each field of a data source in the user interface.\nThe fieldType for a field is used to extract the field value from the topic payload.",
      "type": "object",
      "title": "DataSourceFieldInfoV2 - data source field info struct",
      "required": [
        "name",
        "topic"
      ],
      "properties": {
        "name": {
          "description": "Name of the field.\nA unique name within the the data source.",
          "type": "string",
          "x-go-name": "Name"
        },
        "topic": {
          "description": "topic for the field\nThe topic specified depends on the protocol in the data source. Specify the mqqtTopic for the MQTT protocol.\nFor the RTSP protocol, the topic is the server endpoint or named protocol stream in the RSTP URL.",
          "type": "string",
          "x-go-name": "Topic"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataSourceFieldSelector": {
      "description": "A DataSourceFieldSelector specifies a chosen category value\nand a specified scope (that is, which fields) where this value applies.\nThe user annotates each data source field with one or more\nCategoryInfo objects.\nCategories enables the user to specify the data pipeline input.\nThe list of categories specified is checked against each data source\nto determine if a field in the DataSource is\nincluded in the input of the data pipeline.",
      "type": "object",
      "title": "DataSourceFieldSelector - data source field selector struct",
      "required": [
        "id",
        "value",
        "scope"
      ],
      "properties": {
        "id": {
          "description": "The category ID.",
          "type": "string",
          "x-go-name": "ID",
          "example": "the ID for the Airport category."
        },
        "scope": {
          "description": "Field name(s) applicable to this CategoryInfo.\nThe special value '\\_\\_ALL\\_\\_' indicates that CategoryInfo is applicable to\nall fields in this data source.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Scope"
        },
        "value": {
          "description": "An allowed value to choose for the category.",
          "type": "string",
          "x-go-name": "Value",
          "example": "SFO, SJC, LAX, and so on."
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataSourceIfcInfo": {
      "description": "DataSourceIfcInfo - metadata related to the datasource interface",
      "type": "object",
      "required": [
        "ifcClass",
        "ifcKind",
        "ifcProtocol",
        "ifcImg",
        "ifcDriverId"
      ],
      "properties": {
        "ifcClass": {
          "description": "Class of the data source\nDataInterface or Legacy",
          "type": "string",
          "enum": [
            "DATAINTERFACE",
            "LEGACY"
          ],
          "x-go-name": "Class"
        },
        "ifcDriverId": {
          "description": "Driver from which this data source is derived.",
          "type": "string",
          "x-go-name": "DriverID"
        },
        "ifcImg": {
          "description": "The docker img that includes the data source",
          "type": "string",
          "x-go-name": "Img"
        },
        "ifcKind": {
          "description": "Kind of data source\nIN, OUT, PIPE (bidirectional)",
          "type": "string",
          "enum": [
            "IN",
            "OUT",
            "PIPE"
          ],
          "x-go-name": "Kind"
        },
        "ifcPorts": {
          "description": "Any ports that will be opened and used by this datasource",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceIfcPorts"
          },
          "x-go-name": "Ports"
        },
        "ifcProjectId": {
          "description": "The project that contains this data source",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "ifcProtocol": {
          "description": "Primary protocol that this data source implements",
          "type": "string",
          "x-go-name": "Protocol"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataSourceIfcPorts": {
      "description": "DataSourceIfcPorts - the ports that will be used by this data source",
      "type": "object",
      "required": [
        "name",
        "port"
      ],
      "properties": {
        "name": {
          "description": "Name of the port for the service that runs inside the data source",
          "type": "string",
          "x-go-name": "Name"
        },
        "port": {
          "description": "Port number in the container that the data source listens to",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Port"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataSourceListPayload": {
      "description": "payload for DataSourceListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of data sources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceV2"
          },
          "x-go-name": "DataSourceListV2"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataSourceV2": {
      "description": "A data source represents a logical IoT Sensor or Gateway.\nNote: This grouping is a construct to store meta information\nfor sensors. Defining a data source does not cause\nthe topic message to flow into the Karbon Platform Services Service Domain (for example, NATS or Kafka).\nYou must create a data pipeline to enable that flow.",
      "type": "object",
      "title": "DataSourceV2 is object model for data source",
      "required": [
        "tenantId",
        "edgeId",
        "name",
        "type",
        "selectors",
        "protocol",
        "authType",
        "fields"
      ],
      "properties": {
        "authType": {
          "description": "Type of authentication used by sensor",
          "type": "string",
          "enum": [
            "CERTIFICATE",
            "PASSWORD",
            "TOKEN"
          ],
          "x-go-name": "AuthType"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "edgeId": {
          "description": "ID of the edge this entity belongs to",
          "type": "string",
          "x-go-name": "EdgeID"
        },
        "fields": {
          "description": "User defined fields to extract data from the topic payload.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceFieldInfoV2"
          },
          "x-go-name": "FieldsV2"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "ifcInfo": {
          "$ref": "#/definitions/DataSourceIfcInfo"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "protocol": {
          "description": "Sensor protocol",
          "type": "string",
          "enum": [
            "MQTT",
            "RTSP",
            "GIGEVISION",
            "OTHER",
            "DATAINTERFACE"
          ],
          "x-go-name": "Protocol"
        },
        "selectors": {
          "description": "A list of DataSourceFieldSelector users assigned to the data source.\nAllows a user to use Category selectors to identify the\ndata pipeline source.\nSelectors with different category IDs are combined with the AND operator,\nwhile selectors with the same category ID are combined with the OR operator.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceFieldSelector"
          },
          "x-go-name": "Selectors"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Type of data source.\nSensor or Gateway",
          "type": "string",
          "enum": [
            "Sensor",
            "Gateway"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataStream": {
      "description": "DataStreams are fundamental building blocks for Karbon Platform Services data pipeline.",
      "type": "object",
      "title": "DataStream is object model for data stream",
      "required": [
        "tenantId",
        "name",
        "dataType",
        "origin",
        "originSelectors",
        "destination",
        "size",
        "enableSampling",
        "transformationArgsList",
        "dataRetention"
      ],
      "properties": {
        "DataIfcEndpoints": {
          "description": "Data Ifc endpoints connected to this datastream",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataIfcEndpoint"
          }
        },
        "awsCloudRegion": {
          "description": "AWS region. Required if cloudType == AWS",
          "type": "string",
          "enum": [
            "us-east-2",
            "us-east-1",
            "us-west-1",
            "us-west-2",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ca-central-1",
            "cn-north-1",
            "cn-northwest-1",
            "eu-central-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "sa-east-1"
          ],
          "x-go-name": "AWSCloudRegion"
        },
        "awsStreamType": {
          "description": "Type of the DataStream at AWS Cloud.\nRequired if cloudType == AWS",
          "type": "string",
          "enum": [
            "Kinesis",
            "SQS",
            "S3",
            "DynamoDB"
          ],
          "x-go-name": "AWSStreamType"
        },
        "azStreamType": {
          "description": "Type of the DataStream at Azure Cloud.\nRequired if cloudType == Azure",
          "type": "string",
          "enum": [
            "Blob"
          ],
          "x-go-name": "AZStreamType"
        },
        "cloudCredsId": {
          "description": "CloudCreds id.\nRequired if destination == Cloud",
          "type": "string",
          "x-go-name": "CloudCredsID"
        },
        "cloudType": {
          "description": "Cloud type, required if destination == Cloud",
          "type": "string",
          "enum": [
            "AWS",
            "GCP",
            "Azure"
          ],
          "x-go-name": "CloudType"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dataRetention": {
          "description": "Retention policy for this DataStream.\nMultiple RetentionInfo are combined using AND semantics.\nFor example, retain data for 1 month AND up to 2 TB of data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionInfo"
          },
          "x-go-name": "DataRetention"
        },
        "dataType": {
          "description": "Data type of the DataStream.\nFor example, Temperature, Pressure, Image, Multiple, etc.",
          "type": "string",
          "x-go-name": "DataType"
        },
        "description": {
          "description": "The description of the DataStream",
          "type": "string",
          "x-go-name": "Description"
        },
        "destination": {
          "description": "Destination of the DataStream.\nEither Edge or Cloud or DataInterface.",
          "type": "string",
          "enum": [
            "Edge",
            "Cloud",
            "DataInterface"
          ],
          "x-go-name": "Destination"
        },
        "edgeStreamType": {
          "description": "Type of the DataStream at Edge.\nRequired if destination == Edge",
          "type": "string",
          "enum": [
            "Kafka",
            "ElasticSearch",
            "MQTT",
            "DataDriver",
            "None"
          ],
          "x-go-name": "EdgeStreamType"
        },
        "enableSampling": {
          "description": "Whether to turn sampling on.\nIf true, then samplingInterval should be set as well.",
          "type": "boolean",
          "x-go-name": "EnableSampling"
        },
        "endPoint": {
          "description": "End point of datastream.\nUser specifies the endpoint.",
          "type": "string",
          "x-go-name": "EndPoint"
        },
        "endPointURI": {
          "description": "Endpoint URI\nDerived from existing fields\nrequired false",
          "type": "string",
          "x-go-name": "EndPointURI"
        },
        "gcpCloudRegion": {
          "description": "GCP region. Required if cloudType == GCP",
          "type": "string",
          "enum": [
            "northamerica-northeast1",
            "us-central1",
            "us-west1",
            "us-east4",
            "us-east1",
            "southamerica-east1",
            "europe-west1",
            "europe-west2",
            "europe-west3",
            "europe-west4",
            "asia-south1",
            "asia-southeast1",
            "asia-east1",
            "asia-northeast1",
            "australia-southeast1"
          ],
          "x-go-name": "GCPCloudRegion"
        },
        "gcpStreamType": {
          "description": "Type of the DataStream at GCP Cloud.\nRequired if cloudType == GCP",
          "type": "string",
          "enum": [
            "PubSub",
            "CloudDatastore",
            "CloudSQL",
            "CloudStorage"
          ],
          "x-go-name": "GCPStreamType"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name of the DataStream.\nThis is the published output (Kafka topic) name.",
          "type": "string",
          "x-go-name": "Name"
        },
        "origin": {
          "description": "The origin of the DataStream.\nEither 'Data Source' or 'Data Stream'",
          "type": "string",
          "enum": [
            "Data Source",
            "Data Stream"
          ],
          "x-go-name": "Origin"
        },
        "originId": {
          "description": "If origin == 'Data Stream', then originId\ncan be used in place of originSelectors\nto specify the origin data stream ID if the origin data stream is unique.",
          "type": "string",
          "x-go-name": "OriginID"
        },
        "originSelectors": {
          "description": "A list of CategoryInfo used as criteria\nto filter sources applicable to this DataStream.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "OriginSelectors"
        },
        "outDataIfc": {
          "$ref": "#/definitions/DataSource"
        },
        "projectId": {
          "description": "ID of parent project.\nThis should be required, but is not marked as such due to backward compatibility.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "samplingInterval": {
          "description": "Sampling interval in seconds.\nThe sampling interval applies to each mqtt/kafka topic separately.",
          "type": "number",
          "format": "double",
          "x-go-name": "SamplingInterval"
        },
        "size": {
          "description": "Current size of the DataStream output in GB.",
          "type": "number",
          "format": "double",
          "x-go-name": "Size"
        },
        "state": {
          "description": "State of this entity",
          "type": "string",
          "x-go-name": "State"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "transformationArgsList": {
          "description": "List of transformations (together with their args)\nto apply to the origin data\nto produce the destination data.\nCould be empty if no transformation required.\nEach entry is the id of the transformation Script to apply to input from origin\nto produce output to destination.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransformationArgs"
          },
          "x-go-name": "TransformationArgsList"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DataStreamListPayload": {
      "description": "payload for DataStreamListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of data streams",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream"
          },
          "x-go-name": "DataStreamList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DeleteDocumentResponse": {
      "description": "DeleteDocumentResponse - delete document response struct",
      "type": "object",
      "required": [
        "_id"
      ],
      "properties": {
        "_id": {
          "description": "ID of the deleted entity. Set to empty string if the no entity was found\nwith the given ID.",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DeleteDocumentResponseV2": {
      "description": "DeleteDocumentResponseV2 - delete document response struct",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the deleted entity. Set to empty string if the no entity was found\nwith the given ID.",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DeleteRequest": {
      "type": "object",
      "required": [
        "tenantId",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DockerProfile": {
      "description": "DockerProfile is the object model for DockerProfile",
      "type": "object",
      "required": [
        "tenantId",
        "name",
        "type",
        "server"
      ],
      "properties": {
        "cloudCredsID": {
          "description": "The CloudCreds to import Docker Profile from",
          "type": "string",
          "x-go-name": "CloudCredsID"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "credentials": {
          "description": "The Credentials of the DockerProfile.",
          "type": "string",
          "x-go-name": "Credentials"
        },
        "description": {
          "description": "Description for the DockerProfile.",
          "type": "string",
          "x-go-name": "Description"
        },
        "email": {
          "description": "DockerProfile  email.",
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "iflagEncrypted": {
          "description": "ntnx:ignore\n\nInternal Flag - encrypted - for internal migration use",
          "type": "boolean",
          "x-go-name": "IFlagEncrypted"
        },
        "name": {
          "description": "Name for the DockerProfile.",
          "type": "string",
          "x-go-name": "Name"
        },
        "pwd": {
          "description": "DockerProfile  Password.",
          "type": "string",
          "x-go-name": "Pwd"
        },
        "server": {
          "description": "DockerProfile  server.",
          "type": "string",
          "x-go-name": "Server"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "DockerProfile  type.",
          "type": "string",
          "enum": [
            "AWS",
            "GCP",
            "Azure",
            "ContainerRegistry"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "userName": {
          "description": "DockerProfile  user.",
          "type": "string",
          "x-go-name": "UserName"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "DockerProfileListPayload": {
      "description": "payload for DockerProfileListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of docker profiles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DockerProfile"
          },
          "x-go-name": "DockerProfileList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EBSStorageProfileConfig": {
      "type": "object",
      "title": "EBSStorageProfileConfig - struct for AWS EBS Storage Profile config.",
      "required": [
        "type",
        "iops_per_gb",
        "encrypted"
      ],
      "properties": {
        "encrypted": {
          "type": "string",
          "x-go-name": "Encrypted"
        },
        "iops_per_gb": {
          "type": "string",
          "x-go-name": "IOPSPerGB"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Edge": {
      "description": "An Edge is a Nutanix (Kubernetes) cluster for a tenant.",
      "type": "object",
      "title": "Edge is the DB object and object model for edge",
      "required": [
        "tenantId",
        "name",
        "serialNumber",
        "ipAddress",
        "gateway",
        "subnet",
        "edgeDevices",
        "storageCapacity",
        "storageUsage"
      ],
      "properties": {
        "connected": {
          "description": "Determines if the edge is currently connected to XI IoT management services.",
          "type": "boolean",
          "x-go-name": "Connected"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Edge description",
          "type": "string",
          "x-go-name": "Description"
        },
        "edgeDevices": {
          "description": "Number of devices (nodes) in this edge",
          "type": "number",
          "format": "double",
          "x-go-name": "EdgeDevices"
        },
        "gateway": {
          "description": "Edge Gateway IP address",
          "type": "string",
          "x-go-name": "Gateway"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "ipAddress": {
          "description": "Edge IP Address",
          "type": "string",
          "x-go-name": "IPAddress"
        },
        "labels": {
          "description": "A list of Category labels for this edge.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Edge name.\nMaximum length edge name is determined by kubernetes.\nName length limited to 60 as node name is the edge name plus a suffix.\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go",
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "$ref": "#/definitions/NodeRole"
        },
        "serialNumber": {
          "description": "Edge serial number",
          "type": "string",
          "x-go-name": "SerialNumber"
        },
        "shortId": {
          "description": "ShortID is the unique ID for the given edge.\nThis ID must be unique for each edge, for the given tenant.",
          "type": "string",
          "x-go-name": "ShortID"
        },
        "storageCapacity": {
          "description": "Edge storage capacity in GB",
          "type": "number",
          "format": "double",
          "x-go-name": "StorageCapacity"
        },
        "storageUsage": {
          "description": "Edge storage usage in GB",
          "type": "number",
          "format": "double",
          "x-go-name": "StorageUsage"
        },
        "subnet": {
          "description": "Edge subnet mask",
          "type": "string",
          "x-go-name": "Subnet"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Edge type.",
          "type": "string",
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeCert": {
      "description": "EdgeCert is DB and object model for data source",
      "type": "object",
      "required": [
        "tenantId",
        "edgeId",
        "certificate",
        "privateKey",
        "CACertificate",
        "clientCertificate",
        "clientPrivateKey",
        "edgeCertificate",
        "edgePrivateKey"
      ],
      "properties": {
        "CACertificate": {
          "description": "Root CA certificate for the tenant.",
          "type": "string"
        },
        "certificate": {
          "description": "Certificate for the edge using old/fixed root CA.",
          "type": "string",
          "x-go-name": "Certificate"
        },
        "clientCertificate": {
          "description": "Certificate for mqtt client on the edge",
          "type": "string",
          "x-go-name": "ClientCertificate"
        },
        "clientPrivateKey": {
          "description": "Encrypted private key corresponding to the client certificate.",
          "type": "string",
          "x-go-name": "ClientPrivateKey"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "edgeCertificate": {
          "description": "Certificate for the edge using per-tenant root CA.",
          "type": "string",
          "x-go-name": "EdgeCertificate"
        },
        "edgeId": {
          "description": "ID of the edge this entity belongs to",
          "type": "string",
          "x-go-name": "EdgeID"
        },
        "edgePrivateKey": {
          "description": "Encrypted private key using per-tenant root CA.",
          "type": "string",
          "x-go-name": "EdgePrivateKey"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "privateKey": {
          "description": "Encrypted private key using old/fixed root CA.",
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeCertListPayload": {
      "description": "payload for EdgeCertListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of edge certs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeCert"
          },
          "x-go-name": "EdgeCertList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeCertLockParam": {
      "description": "EdgeCertLockParam describes payload for SetEdgeCertLock operation",
      "type": "object",
      "required": [
        "edgeClusterId",
        "locked"
      ],
      "properties": {
        "durationSeconds": {
          "description": "If Locked is false and DurationSeconds is greater than 0,\nthen first unlock the edge certification,\nthen auto lock it after DurationSeconds seconds.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DurationSeconds"
        },
        "edgeClusterId": {
          "type": "string",
          "x-go-name": "EdgeClusterID"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeCluster": {
      "description": "An Edge  cluster is a Nutanix (Kubernetes) cluster for a tenant comprising of multiple edge devices.",
      "type": "object",
      "title": "EdgeCluster is the DB object and object model for edge cluster",
      "required": [
        "tenantId",
        "name",
        "labels"
      ],
      "properties": {
        "connected": {
          "description": "ntnx:ignore\nDetermines if the edge is currently connected to XI IoT management services.",
          "type": "boolean",
          "x-go-name": "Connected"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "EdgeCluster description",
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "labels": {
          "description": "List of edge Device IDs in cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "EdgeCluster name.\nMaximum length edge name is determined by kubernetes.\nName length limited to 60 as node name is the edge cluster name plus a suffix.\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go",
          "type": "string",
          "x-go-name": "Name"
        },
        "shortId": {
          "description": "ntnx:ignore\nShortID is the unique ID for the given edge.\nThis ID must be unique for each edge, for the given tenant.",
          "type": "string",
          "x-go-name": "ShortID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "ntnx:ignore\nEdge type.",
          "type": "string",
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        },
        "virtualIp": {
          "description": "Virtual IP",
          "type": "string",
          "x-go-name": "VirtualIP"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeClusterListPayload": {
      "description": "payload for EdgeClusterListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of edge cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeCluster"
          },
          "x-go-name": "EdgeClusterList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeData": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Cytoscape Fields",
          "type": "string",
          "x-go-name": "Id"
        },
        "isMTLS": {
          "type": "string",
          "x-go-name": "IsMTLS"
        },
        "responseTime": {
          "type": "string",
          "x-go-name": "ResponseTime"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "target": {
          "type": "string",
          "x-go-name": "Target"
        },
        "traffic": {
          "$ref": "#/definitions/ProtocolTraffic"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "EdgeDevice": {
      "description": "EdgeDevice is a node in a Nutanix (Kubernetes) cluster for a tenant.",
      "type": "object",
      "title": "EdgeDevice is the DB object and object model for edge devices",
      "required": [
        "tenantId",
        "clusterId",
        "name",
        "serialNumber",
        "ipAddress",
        "gateway",
        "subnet"
      ],
      "properties": {
        "clusterId": {
          "description": "ID of the cluster this entity belongs to",
          "type": "string",
          "x-go-name": "ClusterID"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "EdgeDevice description",
          "type": "string",
          "x-go-name": "Description"
        },
        "gateway": {
          "description": "Edge Device Gateway IP address",
          "type": "string",
          "x-go-name": "Gateway"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "ipAddress": {
          "description": "Edge device IP Address",
          "type": "string",
          "x-go-name": "IPAddress"
        },
        "name": {
          "description": "Edge name.\nMaximum length edge name is determined by kubernetes.\nName length limited to 60 as node name is the edge name plus a suffix.\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go",
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "$ref": "#/definitions/NodeRole"
        },
        "serialNumber": {
          "description": "Edge device serial number",
          "type": "string",
          "x-go-name": "SerialNumber"
        },
        "subnet": {
          "description": "Edge subnet mask",
          "type": "string",
          "x-go-name": "Subnet"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeDeviceInfo": {
      "description": "EdgeDeviceInfo has edge device information like the memory, storage and CPU usage",
      "type": "object",
      "required": [
        "tenantId",
        "clusterId"
      ],
      "properties": {
        "artifacts": {
          "description": "Artifacts is a json object for passing edge ip and service ports",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Artifacts"
        },
        "clusterId": {
          "description": "ID of the cluster this entity belongs to",
          "type": "string",
          "x-go-name": "ClusterID"
        },
        "connected": {
          "type": "boolean",
          "x-go-name": "Connected"
        },
        "cpuUsage": {
          "description": "Edge CPU usage.",
          "type": "string",
          "x-go-name": "CPUUsage"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deviceId": {
          "type": "string",
          "x-go-name": "DeviceID"
        },
        "edgeBuildNum": {
          "description": "Edge build number.",
          "type": "string",
          "x-go-name": "EdgeBuildNum"
        },
        "edgeVersion": {
          "description": "Edge version.",
          "type": "string",
          "x-go-name": "EdgeVersion"
        },
        "gpuInfo": {
          "description": "Information about GPUs associated with the edge.",
          "type": "string",
          "x-go-name": "GPUInfo"
        },
        "gpuUsage": {
          "description": "Edge GPU Usage.",
          "type": "string",
          "x-go-name": "GPUUsage"
        },
        "healthBits": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "x-go-name": "HealthBits"
        },
        "healthy": {
          "type": "boolean",
          "x-go-name": "Healthy"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "kubeVersion": {
          "description": "Edge Kubernetes version.",
          "type": "string",
          "x-go-name": "KubeVersion"
        },
        "memoryFreeKB": {
          "description": "Free (available) edge memory in KB.",
          "type": "string",
          "x-go-name": "MemoryFreeKB"
        },
        "numCpu": {
          "description": "Number of CPUs assigned to the edge.",
          "type": "string",
          "x-go-name": "NumCPU"
        },
        "onboarded": {
          "type": "boolean",
          "x-go-name": "Onboarded"
        },
        "osVersion": {
          "description": "Edge OS version",
          "type": "string",
          "x-go-name": "OSVersion"
        },
        "storageFreeKB": {
          "description": "Free (available) edge storage in KB.",
          "type": "string",
          "x-go-name": "StorageFreeKB"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "totalMemoryKB": {
          "description": "Total edge memory in KB.",
          "type": "string",
          "x-go-name": "TotalMemoryKB"
        },
        "totalStorageKB": {
          "description": "Total edge storage capacity in KB.",
          "type": "string",
          "x-go-name": "TotalStorageKB"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeDeviceInfoListPayload": {
      "description": "EdgeDeviceInfoListPayload is the payload for EdgeDeviceInfoListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of edge usage info",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeDeviceInfo"
          },
          "x-go-name": "EdgeDeviceInfoList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeDeviceListPayload": {
      "description": "payload for EdgeDeviceListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of edge devices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeDevice"
          },
          "x-go-name": "EdgeDeviceList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeDeviceOnboardInfo": {
      "type": "object",
      "title": "EdgeDeviceOnboardInfo is  object that relays post onboard info.",
      "required": [
        "id",
        "sshPublicKey"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "EdgeDeviceID"
        },
        "sshPublicKey": {
          "type": "string",
          "x-go-name": "SSHPublicKey"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeDeviceWithClusterInfo": {
      "description": "EdgeDeviceWithClusterInfo is the DB object and object model for edge and indicates if the edge is a bootstrap master",
      "type": "object",
      "required": [
        "tenantId",
        "clusterId",
        "name",
        "serialNumber",
        "ipAddress",
        "gateway",
        "subnet",
        "isBootstrapMaster"
      ],
      "properties": {
        "bootstrapMasterSshPublicKey": {
          "type": "string",
          "x-go-name": "BootstrapMasterSSHPublicKey"
        },
        "clusterId": {
          "description": "ID of the cluster this entity belongs to",
          "type": "string",
          "x-go-name": "ClusterID"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "EdgeDevice description",
          "type": "string",
          "x-go-name": "Description"
        },
        "gateway": {
          "description": "Edge Device Gateway IP address",
          "type": "string",
          "x-go-name": "Gateway"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "ipAddress": {
          "description": "Edge device IP Address",
          "type": "string",
          "x-go-name": "IPAddress"
        },
        "isBootstrapMaster": {
          "type": "boolean",
          "x-go-name": "IsBootstrapMaster"
        },
        "name": {
          "description": "Edge name.\nMaximum length edge name is determined by kubernetes.\nName length limited to 60 as node name is the edge name plus a suffix.\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go",
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "$ref": "#/definitions/NodeRole"
        },
        "serialNumber": {
          "description": "Edge device serial number",
          "type": "string",
          "x-go-name": "SerialNumber"
        },
        "subnet": {
          "description": "Edge subnet mask",
          "type": "string",
          "x-go-name": "Subnet"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeInfoListPayload": {
      "description": "payload for EdgeInfoListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of edge usage info",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeUsageInfo"
          },
          "x-go-name": "EdgeUsageInfoList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeInventoryDeleted": {
      "description": "EdgeInventoryDeleted is used as part of get edge inventory delta response to\ntell the edge which entities no longer exist in the cloud and should be\ndeleted at the edge. For each entity type, the value is a list of entity IDs\nto delete.",
      "type": "object",
      "properties": {
        "Applications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CloudProfiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ContainerRegistries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DataDriverInstances": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DataPipelines": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DataSources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Functions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LogCollectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MLModels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectServices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Projects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RuntimeEnvironments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SoftwareUpdates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SvcBindings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SvcInstances": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeInventoryDeltaPayload": {
      "description": "EdgeInventoryDeltaPayload is the payload used in get edge inventory delta\nHTTP POST call. This payload carries a snapshot of current inventory at the\nedge: For each entity type, it contains EntityVersionMetadata of each entity\ninstance at the edge.",
      "type": "object",
      "properties": {
        "Applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "Categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "CloudProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "ContainerRegistries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "DataDriverInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "DataPipelines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "DataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "Functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "LogCollectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "MLModels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "ProjectServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "RuntimeEnvironments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "SoftwareUpdates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "SvcBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        },
        "SvcInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityVersionMetadata"
          }
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeInventoryDeltaResponse": {
      "description": "EdgeInventoryDeltaResponse is the response for get edge inventory delta. It\nconsists of Deleted, Created, and Updated fields of type\nEdgeInventoryDeleted, EdgeInventoryDetails and EdgeInventoryDetails\ndescribed above.",
      "type": "object",
      "properties": {
        "Created": {
          "$ref": "#/definitions/EdgeInventoryDetails"
        },
        "Deleted": {
          "$ref": "#/definitions/EdgeInventoryDeleted"
        },
        "Updated": {
          "$ref": "#/definitions/EdgeInventoryDetails"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeInventoryDetails": {
      "description": "EdgeInventoryDetails is used as part of get edge inventory delta response to\ntell the edge which entities have been created or updated. For each entity\ntype, the value is a list of full details of object of that type the edge\nshould create or update.",
      "type": "object",
      "properties": {
        "Applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Application"
          }
        },
        "Categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        },
        "CloudProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudCreds"
          }
        },
        "ContainerRegistries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerRegistry"
          }
        },
        "DataDriverInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataDriverInstanceInventory"
          }
        },
        "DataPipelines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream"
          }
        },
        "DataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSource"
          }
        },
        "Functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Script"
          }
        },
        "LogCollectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogCollector"
          }
        },
        "MLModels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MLModel"
          }
        },
        "ProjectServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectService"
          }
        },
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "RuntimeEnvironments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptRuntime"
          }
        },
        "SoftwareUpdates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SoftwareUpdateServiceDomain"
          }
        },
        "SvcBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceBinding"
          }
        },
        "SvcInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          }
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeListPayload": {
      "description": "payload for EdgeListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of edges",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeV2"
          },
          "x-go-name": "EdgeListV2"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeService": {
      "description": "EdgeService is service definition originating at the edge",
      "type": "object",
      "required": [
        "endpoint"
      ],
      "properties": {
        "endpoint": {
          "type": "string",
          "x-go-name": "Endpoint"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeUpgrade": {
      "description": "EdgeUpgrade is object model for EdgeUpgrade",
      "type": "object",
      "required": [
        "tenantId",
        "release",
        "changelog",
        "compatibleReleases"
      ],
      "properties": {
        "changelog": {
          "description": "The changes that were made in this release from the previous release",
          "type": "string",
          "x-go-name": "Changelog"
        },
        "compatibleReleases": {
          "description": "List of releases that can be upgraded to the new version",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "CompatibleReleases"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "release": {
          "description": "This is the release that is avaliable",
          "type": "string",
          "x-go-name": "Release"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeUpgradeCore": {
      "type": "object",
      "title": "EdgeUpgradeCore is the object model for EdgeUpgradeCore.",
      "required": [
        "release",
        "changelog"
      ],
      "properties": {
        "changelog": {
          "description": "The changes that were made in this release from the previous release",
          "type": "string",
          "x-go-name": "Changelog"
        },
        "release": {
          "description": "This is the release that is avaliable",
          "type": "string",
          "x-go-name": "Release"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeUpgradeListPayload": {
      "description": "payload for EdgeUpgradeListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of edge upgrades",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeUpgradeCore"
          },
          "x-go-name": "EdgeUpgradeCoreList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeUsageInfo": {
      "description": "EdgeUsageInfo has edge information like the memory, storage and CPU usage",
      "type": "object",
      "title": "EdgeUsageInfo is the DB object and object model for edgeinfo",
      "required": [
        "tenantId",
        "edgeId"
      ],
      "properties": {
        "CPUUsage": {
          "description": "Edge CPU usage.",
          "type": "string"
        },
        "EdgeBuildNum": {
          "description": "Edge build number.",
          "type": "string"
        },
        "EdgeVersion": {
          "description": "Edge version.",
          "type": "string"
        },
        "GPUInfo": {
          "description": "Information about GPUs associated with the edge.",
          "type": "string"
        },
        "GPUUsage": {
          "description": "Edge GPU Usage.",
          "type": "string"
        },
        "KubeVersion": {
          "description": "Edge Kubernetes version.",
          "type": "string"
        },
        "MemoryFreeKB": {
          "description": "Free (available) edge memory in KB.",
          "type": "string"
        },
        "NumCPU": {
          "description": "Number of CPUs assigned to the edge.",
          "type": "string"
        },
        "OSVersion": {
          "description": "Edge OS version",
          "type": "string"
        },
        "StorageFreeKB": {
          "description": "Free (available) edge storage in KB.",
          "type": "string"
        },
        "TotalMemoryKB": {
          "description": "Total edge memory in KB.",
          "type": "string"
        },
        "TotalStorageKB": {
          "description": "Total edge storage capacity in KB.",
          "type": "string"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "edgeArtifacts": {
          "description": "Edge artifacts is a json object for passing edge ip and service ports",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "EdgeArtifacts"
        },
        "edgeId": {
          "description": "ID of the edge this entity belongs to",
          "type": "string",
          "x-go-name": "EdgeID"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeV2": {
      "description": "An Edge is a Nutanix (Kubernetes) cluster for a tenant.",
      "type": "object",
      "title": "Edge is the DB object and object model for edge",
      "required": [
        "tenantId",
        "name",
        "serialNumber",
        "ipAddress",
        "gateway",
        "subnet",
        "edgeDevices"
      ],
      "properties": {
        "connected": {
          "description": "Determines if the edge is currently connected to XI IoT management services.",
          "type": "boolean",
          "x-go-name": "Connected"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Edge description",
          "type": "string",
          "x-go-name": "Description"
        },
        "edgeDevices": {
          "description": "Number of devices (nodes) in this edge",
          "type": "number",
          "format": "double",
          "x-go-name": "EdgeDevices"
        },
        "gateway": {
          "description": "Edge Gateway IP address",
          "type": "string",
          "x-go-name": "Gateway"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "ipAddress": {
          "description": "Edge IP Address",
          "type": "string",
          "x-go-name": "IPAddress"
        },
        "labels": {
          "description": "A list of Category labels for this edge.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Edge name.\nMaximum length edge name is determined by kubernetes.\nName length limited to 60 as node name is the edge name plus a suffix.\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go",
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "$ref": "#/definitions/NodeRole"
        },
        "serialNumber": {
          "description": "Edge serial number",
          "type": "string",
          "x-go-name": "SerialNumber"
        },
        "shortId": {
          "description": "ShortID is the unique ID for the given edge.\nThis ID must be unique for each edge, for the given tenant.",
          "type": "string",
          "x-go-name": "ShortID"
        },
        "subnet": {
          "description": "Edge subnet mask",
          "type": "string",
          "x-go-name": "Subnet"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Type of edge.",
          "type": "string",
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EdgeWrapper": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/EdgeData"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Elements": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeWrapper"
          },
          "x-go-name": "Edges"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeWrapper"
          },
          "x-go-name": "Nodes"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "EmailAvailability": {
      "description": "EmailAvailability is used as response to isemailavailable query",
      "type": "object",
      "required": [
        "email",
        "available"
      ],
      "properties": {
        "available": {
          "type": "boolean",
          "x-go-name": "Available"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Endpoint": {
      "type": "object",
      "properties": {
        "addresses": {
          "$ref": "#/definitions/Addresses"
        },
        "ports": {
          "$ref": "#/definitions/Ports"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Endpoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Endpoint"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "EntityVersionMetadata": {
      "description": "EntityVersionMetadata contains the database ID and UpdatedAt of an entity\nassociated with an edge.\nEntityVersionMetadata is used with the get edge inventory delta payload\nto indicate the entity version, by entity ID, for each entity\nassociated with an the edge.\nWe use UpdatedAt as opposed to Version since\nVersion can get truncated during JSON conversion.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Event": {
      "description": "Event is the object model for events",
      "type": "object",
      "properties": {
        "audience": {
          "type": "string",
          "x-go-name": "Audience"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isEncrypted": {
          "type": "boolean",
          "x-go-name": "IsEncrypted"
        },
        "isInfraEntity": {
          "type": "boolean",
          "x-go-name": "IsInfraEntity"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "metrics": {
          "$ref": "#/definitions/Metrics"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Properties"
        },
        "severity": {
          "type": "string",
          "x-go-name": "Severity"
        },
        "sourceType": {
          "type": "string",
          "x-go-name": "SourceType"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Timestamp"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EventFilter": {
      "description": "StartTime is the later time (inclusive) going back to the earlier EndTime (exclusive)",
      "type": "object",
      "title": "EventFilter is the event filter in QueryEvents.",
      "required": [
        "path"
      ],
      "properties": {
        "endTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndTime"
        },
        "keys": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Keys"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "start": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Start"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartTime"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EventFilterV2": {
      "type": "object",
      "title": "EventFilterV2 is the event filter in v1.0 QueryEvents.",
      "required": [
        "path"
      ],
      "properties": {
        "endTime": {
          "description": "Search for events by this earlier timestamp (exclusive).",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndTime"
        },
        "keys": {
          "description": "Optional search parameters like \"keys\" : {\"type\": \"ALERT\"}",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Keys"
        },
        "path": {
          "description": "Unique path to identify the resource, as in:/serviceDomain:serviceDomainID/project:ProjectID/...",
          "type": "string",
          "x-go-name": "Path"
        },
        "startTime": {
          "description": "Search for events by this later timestamp (inclusive)",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartTime"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "EventType": {
      "type": "string",
      "enum": [
        "ALERT",
        "STATUS",
        "METRIC"
      ]
    },
    "EventUpsertRequest": {
      "description": "EventUpsertRequest is the request payload for UpsertEvents",
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          },
          "x-go-name": "Events"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ExecuteEdgeUpgrade": {
      "description": "ExecuteEdgeUpgrade is object model for ExecuteEdgeUpgrade",
      "type": "object",
      "required": [
        "release",
        "edgeIds"
      ],
      "properties": {
        "edgeIds": {
          "description": "List of edge IDs to upgrade",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeIDs"
        },
        "force": {
          "description": "ntnx:ignore\n\nForce for test to skip upgrade version check",
          "type": "boolean",
          "x-go-name": "Force"
        },
        "release": {
          "description": "Version to upgrade to, for the execute edge upgrade.",
          "type": "string",
          "x-go-name": "Release"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ExecuteEdgeUpgradeData": {
      "description": "ExecuteEdgeUpgradeData is object model for ExecuteEdgeUpgrades with data",
      "type": "object",
      "required": [
        "tenantId",
        "release",
        "data",
        "dockerLogin",
        "edgeID",
        "upgradeURL"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "data": {
          "description": "Data for the execute edge upgrade.",
          "type": "string",
          "format": "byte",
          "x-go-name": "UpgradeData"
        },
        "dockerLogin": {
          "description": "Docker login command",
          "type": "string",
          "x-go-name": "DockerLogin"
        },
        "edgeID": {
          "description": "EdgeID. ID of the specific edge to upgrade.",
          "type": "string",
          "x-go-name": "EdgeID"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "release": {
          "description": "Release for execute edge upgrade.",
          "type": "string",
          "x-go-name": "Release"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "upgradeURL": {
          "description": "URL for the edge to get the upgrade from",
          "type": "string",
          "x-go-name": "UpgradeURL"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ExecuteEdgeUpgradeID": {
      "description": "ExecuteEdgeUpgradeID is object model for ExecuteEdgeUpgradeID",
      "type": "object",
      "required": [
        "release",
        "edgeId"
      ],
      "properties": {
        "edgeId": {
          "description": "ntnx:ignore\nList of edge IDs to upgrade",
          "type": "string",
          "x-go-name": "EdgeID"
        },
        "release": {
          "description": "Version to upgrade to, for the execute edge upgrade.",
          "type": "string",
          "x-go-name": "Release"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ExternalLink": {
      "description": "ExternalLink provides links to external dashboards (e.g. to Grafana)",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "variables": {
          "$ref": "#/definitions/MonitoringDashboardExternalLinkVariables"
        }
      },
      "x-go-package": "github.com/kiali/k-charted/model"
    },
    "Features": {
      "type": "object",
      "title": "Features available for an edge.",
      "properties": {
        "downloadAndUpgrade": {
          "type": "boolean",
          "x-go-name": "DownloadAndUpgrade"
        },
        "highMemAlert": {
          "type": "boolean",
          "x-go-name": "HighMemAlert"
        },
        "multiNodeAware": {
          "type": "boolean",
          "x-go-name": "MultiNodeAware"
        },
        "projectUserKubeConfig": {
          "type": "boolean",
          "x-go-name": "ProjectUserKubeConfig"
        },
        "realTimeLogs": {
          "type": "boolean",
          "x-go-name": "RealTimeLogs"
        },
        "remoteSSH": {
          "type": "boolean",
          "x-go-name": "RemoteSSH"
        },
        "urlUpgrade": {
          "type": "boolean",
          "x-go-name": "URLupgrade"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "FieldsV1": {
      "description": "Each key is either a '.' representing the field itself, and will always map to an empty set,\nor a string representing a sub-field or item. The string will follow one of these four formats:\n'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map\n'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item\n'i:\u003cindex\u003e', where \u003cindex\u003e is position of a item in a list\n'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values\nIf a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object",
      "title": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.",
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "Function": {
      "description": "Function represent lambdas:\nfunctions or transformations that can be applied\nto Data Pipelines.\nFunctions are tenant-wide objects and the same function\nmay be run within an edge, across all edges of a tenant\nor on tenant data in the cloud.",
      "type": "object",
      "title": "Function is object model for function",
      "required": [
        "tenantId",
        "name",
        "type",
        "language",
        "environment",
        "code",
        "builtin",
        "params"
      ],
      "properties": {
        "builtin": {
          "description": "ntnx:ignore\n\nWhether this is a built-in runtime\n\nThis should be required, but is not marked as such due to backward compatibility.",
          "type": "boolean",
          "x-go-name": "Builtin"
        },
        "code": {
          "description": "The source code for the function script.",
          "type": "string",
          "x-go-name": "Code"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Provide a description for your function code/script.",
          "type": "string",
          "x-go-name": "Description"
        },
        "environment": {
          "description": "Runtime environment for the function code/script.",
          "type": "string",
          "x-go-name": "Environment"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "language": {
          "description": "Programming language for the function code/script.\nSupported languages are python and javascript",
          "type": "string",
          "x-go-name": "Language"
        },
        "name": {
          "description": "Function name.",
          "type": "string",
          "x-go-name": "Name"
        },
        "params": {
          "description": "Array of script parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptParam"
          },
          "x-go-name": "Params"
        },
        "projectId": {
          "description": "ID of parent project, required for custom (non-builtin) scripts.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "runtimeId": {
          "description": "ID of the ScriptRuntime to use to run this script",
          "type": "string",
          "x-go-name": "RuntimeID"
        },
        "runtimeTag": {
          "description": "Docker image tag of the ScriptRuntime to use to run this script.\nIf missing or empty, then backend should treat it as \"latest\"",
          "type": "string",
          "x-go-name": "RuntimeTag"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Type of function code/script: Transformation or Function.\nTransformation takes a data stream as input\nand produces a different data stream as output.\nFunction takes a data stream as input\nbut has no constraint on output.",
          "type": "string",
          "enum": [
            "Transformation",
            "Function"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "FunctionListPayload": {
      "description": "payload for FunctionListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of functions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Function"
          },
          "x-go-name": "FunctionList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "GCPCredential": {
      "type": "object",
      "title": "GCPCredential - Google Cloud Platform credentials.",
      "required": [
        "type",
        "project_id",
        "private_key_id",
        "private_key",
        "client_email",
        "client_id",
        "auth_uri",
        "token_uri",
        "auth_provider_x509_cert_url",
        "client_x509_cert_url"
      ],
      "properties": {
        "auth_provider_x509_cert_url": {
          "description": "Google service account key generated using the gcloud command\nGCP service account key formats depend on when you use the gcloud command or the REST API/client library\nto generate the key. The gcloud format is supported in this case. \nUse the key generated using gcloud command as is, for all field values as follows.\n\nType is set to 'service_account' when you generate the key using gcloud command",
          "type": "string",
          "x-go-name": "AuthProviderX509CertURL"
        },
        "auth_uri": {
          "type": "string",
          "x-go-name": "AuthURI"
        },
        "client_email": {
          "type": "string",
          "x-go-name": "ClientEmail"
        },
        "client_id": {
          "type": "string",
          "x-go-name": "ClientID"
        },
        "client_x509_cert_url": {
          "type": "string",
          "x-go-name": "ClientX509CertURL"
        },
        "private_key": {
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "private_key_id": {
          "type": "string",
          "x-go-name": "PrivateKeyID"
        },
        "project_id": {
          "description": "The project resource is the base-level organizing entity in Google Cloud Platform\nSpecify the unique Id for the project in GCP ",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "token_uri": {
          "type": "string",
          "x-go-name": "TokenURI"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Gateway": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "object",
              "x-go-name": "Selector"
            },
            "servers": {
              "type": "object",
              "x-go-name": "Servers"
            }
          },
          "x-go-name": "GatewaySpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Gateways": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Gateway"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "GetEdgeClusterHandlePayload": {
      "description": "GetEdgeClusterHandlePayload payload for get edge cluster handle call\ntoken: see crypto.GetEdgeHandleToken",
      "type": "object",
      "required": [
        "token",
        "tenantId"
      ],
      "properties": {
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "GetHandlePayload": {
      "description": "GetHandlePayload payload for get edge handle call\ntoken: see crypto.GetEdgeHandleToken",
      "type": "object",
      "required": [
        "token",
        "tenantId"
      ],
      "properties": {
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "GrafanaInfo": {
      "description": "GrafanaInfo provides information to access Grafana dashboards",
      "type": "object",
      "properties": {
        "externalLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalLink"
          },
          "x-go-name": "ExternalLinks"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "GraphConfig": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Duration"
        },
        "elements": {
          "$ref": "#/definitions/Elements"
        },
        "graphType": {
          "type": "string",
          "x-go-name": "GraphType"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "HTTPServiceProxy": {
      "type": "object",
      "required": [
        "tenantId",
        "svcDomainId",
        "name",
        "type",
        "serviceName",
        "servicePort",
        "duration",
        "url",
        "dnsURL"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dnsURL": {
          "description": "DNS URL of the service proxy endpoint\nValid only if setupDNS is set to true when creating the service proxy",
          "type": "string",
          "x-go-name": "DNSURL"
        },
        "duration": {
          "description": "Duration of the http service proxy.",
          "type": "string",
          "x-go-name": "Duration",
          "example": "600s, 20m, 24h, etc."
        },
        "expiresAt": {
          "description": "ntnx:ignore\nExpires at timestamp - computed from createdAt, updatedAt time and duration",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpiresAt"
        },
        "hostname": {
          "description": "ntnx:ignore\nName of statefulset host this proxy is served.",
          "type": "string",
          "x-go-name": "Hostname"
        },
        "hostport": {
          "description": "ntnx:ignore\nTCP port on statefulset host this proxy is served.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hostport"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "HTTP service proxy name.\nUnique within (tenant, service domain)",
          "type": "string",
          "x-go-name": "Name"
        },
        "password": {
          "description": "Password to login to the service when setupBasicAuth=true.",
          "type": "string",
          "x-go-name": "Password"
        },
        "projectId": {
          "description": "ID of parent project, required when TYPE = PROJECT.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "publicKey": {
          "description": "ntnx:ignore\nPublic Key. Used for session tracking. Required in Delete payload.",
          "type": "string",
          "x-go-name": "PublicKey"
        },
        "serviceName": {
          "description": "Name of the http service.",
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "serviceNamespace": {
          "description": "Namespace of the http service, required when TYPE = SYSTEM",
          "type": "string",
          "x-go-name": "ServiceNamespace"
        },
        "servicePort": {
          "description": "Port of the http service.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ServicePort"
        },
        "svcDomainId": {
          "description": "ID of the service domain this entity belongs to",
          "type": "string",
          "x-go-name": "SvcDomainID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Service type for this http proxy.",
          "type": "string",
          "enum": [
            "SYSTEM",
            "PROJECT",
            "CUSTOM"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "url": {
          "description": "URL of the service proxy endpoint",
          "type": "string",
          "x-go-name": "URL"
        },
        "username": {
          "description": "Username to login to the service when setupBasicAuth=true.",
          "type": "string",
          "x-go-name": "Username"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "HTTPServiceProxyCreateParamPayload": {
      "description": "HTTPServiceProxyCreateParamPayload holds the parameters for creating HTTP Service Proxy",
      "type": "object",
      "required": [
        "name",
        "type",
        "serviceName",
        "servicePort",
        "svcDomainId",
        "duration",
        "setupBasicAuth",
        "disableRewriteRules",
        "setupDNS",
        "tlsEndpoint",
        "skipCertVerification"
      ],
      "properties": {
        "disableRewriteRules": {
          "description": "By default, a rewrite rule will be put in place to rewrite service URL path base to /\nset this flag to true to retain the URL path base.",
          "type": "boolean",
          "x-go-name": "DisableRewriteRules"
        },
        "duration": {
          "description": "Duration of the http service proxy.",
          "type": "string",
          "x-go-name": "Duration",
          "example": "600s, 20m, 24h, etc."
        },
        "headers": {
          "description": "JSON object representation of HTTP headers to overwrite.\nMay be useful for (https) endpoint that require\nspecific Host field for example.",
          "type": "string",
          "x-go-name": "Headers"
        },
        "id": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "serviceName": {
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "serviceNamespace": {
          "description": "Namespace of the http service, required when TYPE = SYSTEM",
          "type": "string",
          "x-go-name": "ServiceNamespace"
        },
        "servicePort": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ServicePort"
        },
        "setupBasicAuth": {
          "description": "Whether to setup basic auth to protect the endpoint",
          "type": "boolean",
          "x-go-name": "SetupBasicAuth"
        },
        "setupDNS": {
          "description": "Whether to setup DNS entry for this service.\nDefault is false. Might be useful for services\nthat do not work with URL path.\nHowever, bear in mind it may take several minutes\nfor the DNS name to propagate/resolve.",
          "type": "boolean",
          "x-go-name": "SetupDNS"
        },
        "skipCertVerification": {
          "description": "Whether to skip TLS certification verification for endpoint.\nOnly relevant when TLSEndpoint is true.\nThis should be set to true if the endpoint is using a self-signed certificate.",
          "type": "boolean",
          "x-go-name": "SkipCertVerification"
        },
        "svcDomainId": {
          "description": "ID of Service Domain to create the http service proxy",
          "type": "string",
          "x-go-name": "SvcDomainID"
        },
        "tlsEndpoint": {
          "description": "Whether the endpoint to proxy to is a TLS endpoint.",
          "type": "boolean",
          "x-go-name": "TLSEndpoint"
        },
        "type": {
          "type": "string",
          "enum": [
            "SYSTEM",
            "PROJECT",
            "CUSTOM"
          ],
          "x-go-name": "Type"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "HTTPServiceProxyCreateResponsePayload": {
      "type": "object",
      "required": [
        "id",
        "expiresAt",
        "url",
        "dnsURL"
      ],
      "properties": {
        "dnsURL": {
          "description": "DNS URL of the service proxy endpoint\nValid only if setupDNS is set to true when creating the service proxy",
          "type": "string",
          "x-go-name": "DNSURL"
        },
        "expiresAt": {
          "description": "Expires at timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpiresAt"
        },
        "id": {
          "description": "ID of the entity",
          "type": "string",
          "x-go-name": "ID"
        },
        "password": {
          "description": "Password to login to the service when setupBasicAuth=true.",
          "type": "string",
          "x-go-name": "Password"
        },
        "url": {
          "description": "URL of the service proxy endpoint",
          "type": "string",
          "x-go-name": "URL"
        },
        "username": {
          "description": "Username to login to the service when setupBasicAuth=true.",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "HTTPServiceProxyListPayload": {
      "description": "HTTPServiceProxyListPayload is the payload for HTTPServiceProxyListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of HTTP Service Proxies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HTTPServiceProxy"
          },
          "x-go-name": "HTTPServiceProxyList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "HTTPServiceProxyUpdateParamPayload": {
      "description": "HTTPServiceProxyUpdateParamPayload holds the parameters for updating HTTP Service Proxy",
      "type": "object",
      "required": [
        "setupDNS",
        "tlsEndpoint",
        "skipCertVerification"
      ],
      "properties": {
        "disableRewriteRules": {
          "description": "By default, a rewrite rule will be put in place to rewrite service URL path base to /\nset this flag to true to retain the URL path base.",
          "type": "boolean",
          "x-go-name": "DisableRewriteRules"
        },
        "duration": {
          "description": "Duration of the http service proxy.",
          "type": "string",
          "x-go-name": "Duration",
          "example": "600s, 20m, 24h, etc."
        },
        "headers": {
          "description": "JSON object representation of HTTP headers to overwrite.\nMay be useful for (https) endpoint that require\nspecific Host field for example.",
          "type": "string",
          "x-go-name": "Headers"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "setupDNS": {
          "description": "Whether to setup DNS entry for this service.\nDefault is false. Might be useful for services\nthat do not work with URL path.\nHowever, bear in mind it may take several minutes\nfor the DNS name to propagate/resolve.",
          "type": "boolean",
          "x-go-name": "SetupDNS"
        },
        "skipCertVerification": {
          "description": "Whether to skip TLS certification verification for endpoint.\nOnly relevant when TLSEndpoint is true.\nThis should be set to true if the endpoint is using a self-signed certificate.",
          "type": "boolean",
          "x-go-name": "SkipCertVerification"
        },
        "tlsEndpoint": {
          "description": "Whether the endpoint to proxy to is a TLS endpoint.",
          "type": "boolean",
          "x-go-name": "TLSEndpoint"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "HTTPServiceProxyUpdateResponsePayload": {
      "type": "object",
      "required": [
        "id",
        "url",
        "dnsURL"
      ],
      "properties": {
        "dnsURL": {
          "description": "DNS URL of the service proxy endpoint\nValid only if setupDNS is set to true when creating the service proxy",
          "type": "string",
          "x-go-name": "DNSURL"
        },
        "expiresAt": {
          "description": "Expires at timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpiresAt"
        },
        "id": {
          "description": "ID of the entity",
          "type": "string",
          "x-go-name": "ID"
        },
        "password": {
          "description": "Password to login to the service when setupBasicAuth=true.",
          "type": "string",
          "x-go-name": "Password"
        },
        "url": {
          "description": "URL of the service proxy endpoint",
          "type": "string",
          "x-go-name": "URL"
        },
        "username": {
          "description": "Username to login to the service when setupBasicAuth=true.",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "HelmAppMetadata": {
      "description": "HelmAppMetadata additional metadata for Helm-chart based application",
      "type": "object",
      "required": [
        "metadata"
      ],
      "properties": {
        "crds": {
          "description": "Helm chart CRDs as a string",
          "type": "string",
          "x-go-name": "CRDs"
        },
        "metadata": {
          "type": "string",
          "x-go-name": "Metadata"
        },
        "values": {
          "description": "values.yaml as a string",
          "type": "string",
          "x-go-name": "Values"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "HelmTemplateResponse": {
      "type": "object",
      "required": [
        "appManifest",
        "metadata"
      ],
      "properties": {
        "appManifest": {
          "type": "string",
          "x-go-name": "AppManifest"
        },
        "crds": {
          "description": "contains helm Custom Resource Definitions string",
          "type": "string",
          "x-go-name": "CRDs"
        },
        "metadata": {
          "type": "string",
          "x-go-name": "Metadata"
        },
        "values": {
          "description": "contains values.yaml string",
          "type": "string",
          "x-go-name": "Values"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "InfraConfig": {
      "description": "InfraConfig is the infra config information",
      "type": "object",
      "required": [
        "clusterConfig",
        "k8sConfig"
      ],
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/ClusterConfig"
        },
        "k8sConfig": {
          "$ref": "#/definitions/K8sConfig"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "IstioCheck": {
      "type": "object",
      "title": "IstioCheck represents an individual check.",
      "required": [
        "message",
        "severity"
      ],
      "properties": {
        "message": {
          "description": "Description of the check",
          "type": "string",
          "x-go-name": "Message",
          "example": "Weight sum should be 100"
        },
        "path": {
          "description": "String that describes where in the yaml file is the check located",
          "type": "string",
          "x-go-name": "Path",
          "example": "spec/http[0]/route"
        },
        "severity": {
          "$ref": "#/definitions/SeverityLevel"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "IstioComponentStatus": {
      "description": "SvcService deals with fetching istio/kubernetes services related content and convert to kiali model",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ComponentStatus"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "IstioConfigDetails": {
      "type": "object",
      "properties": {
        "adapter": {
          "$ref": "#/definitions/istioAdapter"
        },
        "attributeManifest": {
          "$ref": "#/definitions/attributeManifest"
        },
        "authorizationPolicy": {
          "$ref": "#/definitions/authorizationPolicy"
        },
        "clusterRbacConfig": {
          "$ref": "#/definitions/ClusterRbacConfig"
        },
        "destinationRule": {
          "$ref": "#/definitions/destinationRule"
        },
        "envoyFilter": {
          "$ref": "#/definitions/envoyFilter"
        },
        "gateway": {
          "$ref": "#/definitions/Gateway"
        },
        "handler": {
          "$ref": "#/definitions/istioHandler"
        },
        "httpApiSpec": {
          "$ref": "#/definitions/httpApiSpec"
        },
        "httpApiSpecBinding": {
          "$ref": "#/definitions/httpApiSpecBinding"
        },
        "instance": {
          "$ref": "#/definitions/istioInstance"
        },
        "istioValidation": {
          "$ref": "#/definitions/IstioValidation"
        },
        "meshPolicy": {
          "$ref": "#/definitions/MeshPolicy"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "objectType": {
          "type": "string",
          "x-go-name": "ObjectType"
        },
        "peerAuthentication": {
          "$ref": "#/definitions/peerAuthentication"
        },
        "permissions": {
          "$ref": "#/definitions/ResourcePermissions"
        },
        "policy": {
          "$ref": "#/definitions/Policy"
        },
        "quotaSpec": {
          "$ref": "#/definitions/QuotaSpec"
        },
        "quotaSpecBinding": {
          "$ref": "#/definitions/QuotaSpecBinding"
        },
        "rbacConfig": {
          "$ref": "#/definitions/RbacConfig"
        },
        "requestAuthentication": {
          "$ref": "#/definitions/requestAuthentication"
        },
        "rule": {
          "$ref": "#/definitions/istioRule"
        },
        "serviceEntry": {
          "$ref": "#/definitions/ServiceEntry"
        },
        "serviceMeshPolicy": {
          "$ref": "#/definitions/ServiceMeshPolicy"
        },
        "serviceMeshRbacConfig": {
          "$ref": "#/definitions/ServiceMeshRbacConfig"
        },
        "serviceRole": {
          "$ref": "#/definitions/ServiceRole"
        },
        "serviceRoleBinding": {
          "$ref": "#/definitions/ServiceRoleBinding"
        },
        "sidecar": {
          "$ref": "#/definitions/Sidecar"
        },
        "template": {
          "$ref": "#/definitions/istioTemplate"
        },
        "virtualService": {
          "$ref": "#/definitions/virtualService"
        },
        "workloadEntry": {
          "$ref": "#/definitions/workloadEntry"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "IstioConfigList": {
      "description": "This type is used for returning a response of IstioConfigList",
      "type": "object",
      "title": "IstioConfigList istioConfigList",
      "required": [
        "namespace"
      ],
      "properties": {
        "adapters": {
          "$ref": "#/definitions/istioAdapters"
        },
        "attributeManifests": {
          "$ref": "#/definitions/attributeManifests"
        },
        "authorizationPolicies": {
          "$ref": "#/definitions/authorizationPolicies"
        },
        "clusterRbacConfigs": {
          "$ref": "#/definitions/ClusterRbacConfigs"
        },
        "destinationRules": {
          "$ref": "#/definitions/destinationRules"
        },
        "envoyFilters": {
          "$ref": "#/definitions/envoyFilters"
        },
        "gateways": {
          "$ref": "#/definitions/Gateways"
        },
        "handlers": {
          "$ref": "#/definitions/istioHandlers"
        },
        "httpApiSpecBindings": {
          "$ref": "#/definitions/httpApiSpecBindings"
        },
        "httpApiSpecs": {
          "$ref": "#/definitions/httpApiSpecs"
        },
        "instances": {
          "$ref": "#/definitions/istioInstances"
        },
        "istioValidations": {
          "$ref": "#/definitions/IstioValidations"
        },
        "meshPolicies": {
          "$ref": "#/definitions/MeshPolicies"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "peerAuthentications": {
          "$ref": "#/definitions/peerAuthentications"
        },
        "policies": {
          "$ref": "#/definitions/Policies"
        },
        "quotaSpecBindings": {
          "$ref": "#/definitions/QuotaSpecBindings"
        },
        "quotaSpecs": {
          "$ref": "#/definitions/QuotaSpecs"
        },
        "rbacConfigs": {
          "$ref": "#/definitions/RbacConfigs"
        },
        "requestAuthentications": {
          "$ref": "#/definitions/requestAuthentications"
        },
        "rules": {
          "$ref": "#/definitions/istioRules"
        },
        "serviceEntries": {
          "$ref": "#/definitions/ServiceEntries"
        },
        "serviceMeshPolicies": {
          "$ref": "#/definitions/ServiceMeshPolicies"
        },
        "serviceMeshRbacConfigs": {
          "$ref": "#/definitions/ServiceMeshRbacConfigs"
        },
        "serviceRoleBindings": {
          "$ref": "#/definitions/ServiceRoleBindings"
        },
        "serviceRoles": {
          "$ref": "#/definitions/ServiceRoles"
        },
        "sidecars": {
          "$ref": "#/definitions/Sidecars"
        },
        "templates": {
          "$ref": "#/definitions/istioTemplates"
        },
        "virtualServices": {
          "$ref": "#/definitions/virtualServices"
        },
        "workloadEntries": {
          "$ref": "#/definitions/workloadEntries"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "IstioConfigPermissions": {
      "description": "IstioConfigPermissions holds a map of ResourcesPermissions per namespace",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ResourcesPermissions"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "IstioValidation": {
      "type": "object",
      "title": "IstioValidation represents a list of checks associated to an Istio object.",
      "required": [
        "name",
        "objectType",
        "valid"
      ],
      "properties": {
        "checks": {
          "description": "Array of checks. It might be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioCheck"
          },
          "x-go-name": "Checks"
        },
        "name": {
          "description": "Name of the object itself",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews"
        },
        "objectType": {
          "description": "Type of the object",
          "type": "string",
          "x-go-name": "ObjectType",
          "example": "virtualservice"
        },
        "references": {
          "description": "Related objects (only validation errors)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioValidationKey"
          },
          "x-go-name": "References"
        },
        "valid": {
          "description": "Represents validity of the object: in case of warning, validity remains as true",
          "type": "boolean",
          "x-go-name": "Valid",
          "example": false
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "IstioValidationKey": {
      "type": "object",
      "title": "IstioValidationKey is the key value composed of an Istio ObjectType and Name.",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "objectType": {
          "type": "string",
          "x-go-name": "ObjectType"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "IstioValidationSummary": {
      "type": "object",
      "title": "IstioValidationSummary represents the number of errors/warnings of a set of Istio Validations.",
      "required": [
        "errors",
        "objectCount",
        "warnings"
      ],
      "properties": {
        "errors": {
          "description": "Number of validations with error severity",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Errors",
          "example": 2
        },
        "objectCount": {
          "description": "Number of Istio Objects analyzed",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ObjectCount",
          "example": 6
        },
        "warnings": {
          "description": "Number of validations with warning severity",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Warnings",
          "example": 4
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "IstioValidations": {
      "title": "IstioValidations represents a set of IstioValidation grouped by IstioValidationKey.",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Iter8Criteria": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "string",
          "x-go-name": "Metric"
        },
        "sampleSize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SampleSize"
        },
        "stopOnFailure": {
          "type": "boolean",
          "x-go-name": "StopOnFailure"
        },
        "tolerance": {
          "type": "number",
          "format": "double",
          "x-go-name": "Tolerance"
        },
        "toleranceType": {
          "type": "string",
          "x-go-name": "ToleranceType"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Iter8CriteriaDetail": {
      "type": "object",
      "properties": {
        "criteria": {
          "$ref": "#/definitions/Iter8Criteria"
        },
        "metric": {
          "$ref": "#/definitions/Iter8Metric"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "$ref": "#/definitions/Iter8SuccessCrideriaStatus"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Iter8ExperimentDetail": {
      "type": "object",
      "properties": {
        "criterias": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Iter8CriteriaDetail"
          },
          "x-go-name": "CriteriaDetails"
        },
        "experimentItem": {
          "$ref": "#/definitions/Iter8ExperimentItem"
        },
        "permissions": {
          "$ref": "#/definitions/ResourcePermissions"
        },
        "trafficControl": {
          "$ref": "#/definitions/Iter8TrafficControl"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Iter8ExperimentItem": {
      "type": "object",
      "properties": {
        "assessmentConclusion": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "AssessmentConclusion"
        },
        "baseline": {
          "type": "string",
          "x-go-name": "Baseline"
        },
        "baselinePercentage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BaselinePercentage"
        },
        "candidate": {
          "type": "string",
          "x-go-name": "Candidate"
        },
        "candidatePercentage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CandidatePercentage"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "endedAt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EndedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "phase": {
          "type": "string",
          "x-go-name": "Phase"
        },
        "startedAt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StartedAt"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "targetService": {
          "type": "string",
          "x-go-name": "TargetService"
        },
        "targetServiceNamespace": {
          "type": "string",
          "x-go-name": "TargetServiceNamespace"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Iter8Info": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Iter8Metric": {
      "type": "object",
      "properties": {
        "absent_value": {
          "type": "string",
          "x-go-name": "AbsentValue"
        },
        "is_counter": {
          "type": "boolean",
          "x-go-name": "IsCounter"
        },
        "query_template": {
          "type": "string",
          "x-go-name": "QueryTemplate"
        },
        "sample_size_template": {
          "type": "string",
          "x-go-name": "SampleSizeTemplate"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Iter8SuccessCrideriaStatus": {
      "type": "object",
      "properties": {
        "abort_experiment": {
          "type": "boolean",
          "x-go-name": "AbortExperiment"
        },
        "conclusions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Conclusions"
        },
        "success_criterion_met": {
          "type": "boolean",
          "x-go-name": "SuccessCriterionMet"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Iter8TrafficControl": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string",
          "x-go-name": "Algorithm"
        },
        "interval": {
          "type": "string",
          "x-go-name": "Interval"
        },
        "maxIterations": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxIterations"
        },
        "maxTrafficPercentage": {
          "type": "number",
          "format": "double",
          "x-go-name": "MaxTrafficPercentage"
        },
        "trafficStepSize": {
          "type": "number",
          "format": "double",
          "x-go-name": "TrafficStepSize"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "JSONText": {
      "description": "Value() validates the json format in the source, and returns an error if\nthe json is not valid.  Scan does no validation.  JSONText additionally\nimplements `Unmarshal`, which unmarshals the json within to an interface{}",
      "title": "JSONText is a json.RawMessage, which is a []byte underneath.",
      "$ref": "#/definitions/RawMessage"
    },
    "JaegerInfo": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "integration": {
          "type": "boolean",
          "x-go-name": "Integration"
        },
        "namespaceSelector": {
          "type": "boolean",
          "x-go-name": "NamespaceSelector"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "whiteListIstioSystem": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "WhiteListIstioSystem"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "K8sConfig": {
      "description": "K8sConfig is the kubernetes config information",
      "type": "object",
      "required": [
        "providerType",
        "providerConfig"
      ],
      "properties": {
        "providerConfig": {
          "description": "ProviderConfig is the configuration defining the underlying kubernetes infrastructure. It will return\nthe config depending on the k8sProviderType",
          "type": "object",
          "x-go-name": "ProviderConfig"
        },
        "providerType": {
          "description": "ProviderType is the provider for kubernetes infrastructure",
          "type": "string",
          "x-go-name": "ProviderType",
          "example": "RKE, KOPS etc..."
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "K8sDashboardTokenResponsePayload": {
      "description": "K8sDashboardTokenResponsePayload response for k8s dashboard get token call",
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "K8sDashboardViewonlyUserListPayload": {
      "description": "K8sDashboardViewonlyUserListPayload is the payload for K8sDashboardViewonlyUserListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of HTTP Service Proxies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "ViewonlyUserList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "K8sDashboardViewonlyUserParams": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "UserIDs"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "K8sDashboardViewonlyUserUpdatePayload": {
      "description": "K8sDashboardViewonlyUserUpdatePayload - empty for now",
      "type": "object",
      "x-go-package": "cloudservices/common/model"
    },
    "KeyValue": {
      "type": "object",
      "title": "KeyValue is a key-value pair with typed value.",
      "properties": {
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "type": {
          "$ref": "#/definitions/ValueType"
        },
        "value": {
          "type": "object",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "KialiMetric": {
      "description": "KialiMetric holds the Prometheus Matrix model, which contains one or more time series (depending on grouping)",
      "type": "object",
      "properties": {
        "matrix": {
          "$ref": "#/definitions/Matrix"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "KialiMetrics": {
      "description": "KialiMetrics contains all simple metrics and histograms data",
      "type": "object",
      "properties": {
        "histograms": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/KialiMetric"
            }
          },
          "x-go-name": "Histograms"
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/KialiMetric"
          },
          "x-go-name": "Metrics"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "KubeConfigPayload": {
      "description": "KubeConfigPayload response for k8s dashboard get kube config call",
      "type": "object",
      "required": [
        "kubeconfig"
      ],
      "properties": {
        "kubeconfig": {
          "description": "string representation of kubeconfig yaml",
          "type": "string",
          "x-go-name": "KubeConfig"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "KubernetesCluster": {
      "description": "KubernetesCluster - the contents of a kubernetes cluster",
      "type": "object",
      "required": [
        "tenantId",
        "name"
      ],
      "properties": {
        "chartVersion": {
          "description": "Chart version of the current cluster",
          "type": "string",
          "x-go-name": "ChartVersion"
        },
        "connected": {
          "description": "Connecting status of the current cluster\nEither true or false",
          "type": "boolean",
          "x-go-name": "Connected"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "KubernetesCluster description",
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "kubeVersion": {
          "description": "Kubernetes version of the current cluster",
          "type": "string",
          "x-go-name": "KubeVersion"
        },
        "name": {
          "description": "Name of the Kubernetes Cluster.\nMaximum length of 200 characters.",
          "type": "string",
          "x-go-name": "Name"
        },
        "onboarded": {
          "description": "Onboarded status of the current cluster\nEither true or false",
          "type": "boolean",
          "x-go-name": "Onboarded"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "KubernetesClusterCert": {
      "description": "KubernetesClusterCert is DB and object model",
      "type": "object",
      "required": [
        "tenantId",
        "kubernetesClusterID",
        "certificate",
        "privateKey",
        "CACertificate",
        "clientCertificate",
        "clientPrivateKey",
        "kubernetesClusterCertificate",
        "kubernetesClusterPrivateKey"
      ],
      "properties": {
        "CACertificate": {
          "description": "Root CA certificate for the tenant.",
          "type": "string"
        },
        "certificate": {
          "description": "Certificate for the kubernetes cluster using old/fixed root CA.",
          "type": "string",
          "x-go-name": "Certificate"
        },
        "clientCertificate": {
          "description": "ntnx:ignore\nCertificate for mqtt client on the edge",
          "type": "string",
          "x-go-name": "ClientCertificate"
        },
        "clientPrivateKey": {
          "description": "ntnx:ignore\nEncrypted private key corresponding to the client certificate.",
          "type": "string",
          "x-go-name": "ClientPrivateKey"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "kubernetesClusterCertificate": {
          "description": "Certificate for the kubernetes cluster using per-tenant root CA.",
          "type": "string",
          "x-go-name": "KubernetesClusterCertificate"
        },
        "kubernetesClusterID": {
          "description": "ID of the kubernetes cluster this entity belongs to",
          "type": "string",
          "x-go-name": "KubernetesClusterID"
        },
        "kubernetesClusterPrivateKey": {
          "description": "Encrypted private key using per-tenant root CA.",
          "type": "string",
          "x-go-name": "KubernetesClusterPrivateKey"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "privateKey": {
          "description": "Encrypted private key using old/fixed root CA.",
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "KubernetesClusterHandlePayload": {
      "description": "KubernetesClusterHandlePayload payload for Kubernetes Cluster handle call",
      "type": "object",
      "required": [
        "token",
        "tenantId"
      ],
      "properties": {
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "KubernetesClusterInstaller": {
      "description": "KubernetesClusterInstaller info",
      "type": "object",
      "required": [
        "id",
        "url"
      ],
      "properties": {
        "id": {
          "description": "This is the unique installer ID which is the version",
          "type": "string",
          "x-go-name": "ID"
        },
        "url": {
          "description": "This is the edge helm download URL",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "KubernetesClustersListResponsePayload": {
      "description": "payload for KubernetesClustersListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of applications",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KubernetesCluster"
          },
          "x-go-name": "KubernetesClustersList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Log": {
      "description": "Log is a log emitted in a span",
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          },
          "x-go-name": "Fields"
        },
        "timestamp": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "LogCollector": {
      "description": "LogCollectors allow to collect logs from multiple components and stream them to the cloud",
      "type": "object",
      "title": "LogCollector is object model for log collection flow",
      "required": [
        "tenantId",
        "name",
        "type",
        "sources",
        "state",
        "cloudCredsID",
        "dest"
      ],
      "properties": {
        "cloudCredsID": {
          "description": "CloudCreds id.\nDestination id for the cloud (should match with the CloudDestinationType)",
          "type": "string",
          "x-go-name": "CloudCredsID"
        },
        "cloudwatchDetails": {
          "$ref": "#/definitions/LogCollectorCloudwatch"
        },
        "code": {
          "description": "A code to modify logs during collection\nLog stream modifications (script source code)",
          "type": "string",
          "x-go-name": "Code"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dest": {
          "$ref": "#/definitions/LogCollectorDestination"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "kinesisDetails": {
          "$ref": "#/definitions/LogCollectorKinesis"
        },
        "name": {
          "description": "Name of the LogCollector.\nVisible by UI only",
          "type": "string",
          "x-go-name": "Name"
        },
        "projectId": {
          "description": "ID of parent project.\nThis should be required for PROJECT log collectors.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "sources": {
          "$ref": "#/definitions/LogCollectorSources"
        },
        "stackdriverDetails": {
          "$ref": "#/definitions/LogCollectorStackdriver"
        },
        "state": {
          "$ref": "#/definitions/LogCollectorStatus"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "$ref": "#/definitions/LogCollectorType"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogCollectorCloudwatch": {
      "description": "LogCollectorCloudwatch LogCollectorCloudwatch - Log collector destination config for AWS CloudWatch",
      "type": "object",
      "required": [
        "dest",
        "group",
        "stream"
      ],
      "properties": {
        "dest": {
          "description": "Destination for log collection (url or region)",
          "type": "string",
          "x-go-name": "Destination"
        },
        "group": {
          "description": "Stream name",
          "type": "string",
          "x-go-name": "GroupName"
        },
        "stream": {
          "description": "Stream name",
          "type": "string",
          "x-go-name": "StreamName"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogCollectorDestination": {
      "type": "string",
      "enum": [
        "CLOUDWATCH",
        "KINESIS",
        "FIREHOSE",
        "STACKDRIVER"
      ]
    },
    "LogCollectorKinesis": {
      "description": "LogCollectorKinesis LogCollectorKinesis - Log collector destination config for AWS Kinesis",
      "type": "object",
      "required": [
        "dest",
        "stream",
        "type"
      ],
      "properties": {
        "dest": {
          "description": "Destination for log collection (url or region)",
          "type": "string",
          "x-go-name": "Destination"
        },
        "stream": {
          "description": "Stream name",
          "type": "string",
          "x-go-name": "StreamName"
        },
        "type": {
          "$ref": "#/definitions/LogCollectorKinesisType"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogCollectorKinesisType": {
      "description": "Type of the kinesis integration - one of FIREHOSE, STREAM",
      "type": "string",
      "x-go-package": "cloudservices/common/model"
    },
    "LogCollectorListPayload": {
      "description": "LogCollectorListPayload is payload for the LogCollectorsList response",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of log collectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogCollector"
          },
          "x-go-name": "LogCollectorList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogCollectorSources": {
      "description": "LogCollectorSources LogCollectorSources - Log collector sources structure",
      "type": "object",
      "properties": {
        "categories": {
          "description": "List of categories to run on",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "edges": {
          "description": "List of edges to enable on",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Edges"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogCollectorStackdriver": {
      "description": "LogCollectorStackdriver LogCollectorStackdriver - Log collector destination config for GCP StackDriver",
      "type": "object",
      "properties": {
        "dummy": {
          "description": "A dummy placeholder",
          "type": "string",
          "x-go-name": "Dummy"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogCollectorStatus": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "STOPPED",
        "FAILED"
      ]
    },
    "LogCollectorType": {
      "type": "string",
      "enum": [
        "Infrastructure",
        "Project"
      ]
    },
    "LogDownloadPayload": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "description": "URL to download the log",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogEntriesListPayload": {
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "Response payload containing the log entries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogEntry"
          },
          "x-go-name": "LogEntryList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogEntry": {
      "description": "LogEntry - a log entry describes the metadata for a log bundle\nfrom an edge collected in part of a batch for a given tenant.",
      "type": "object",
      "required": [
        "tenantId",
        "edgeId"
      ],
      "properties": {
        "batchId": {
          "description": "ID that identifies logs from different edge as the same batch.",
          "type": "string",
          "x-go-name": "BatchID"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "edgeId": {
          "description": "ID of the edge this entity belongs to",
          "type": "string",
          "x-go-name": "EdgeID"
        },
        "errorMessage": {
          "description": "Error message - optional, should be populated when status == 'FAILED'",
          "type": "string",
          "x-go-name": "ErrorMessage"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "location": {
          "description": "Location or object key for the log in the bucket.",
          "type": "string",
          "x-go-name": "Location"
        },
        "status": {
          "$ref": "#/definitions/LogUploadStatus"
        },
        "tags": {
          "description": "Tags carry the properties of the log",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogTag"
          },
          "x-go-name": "Tags"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogStream": {
      "description": "LogStream is used to specify the edge, app or pipeline, and container\nto stream logs from.",
      "type": "object",
      "title": "LogStream is object model for requesting log streams.",
      "required": [
        "edgeId",
        "container"
      ],
      "properties": {
        "applicationId": {
          "description": "ID of the application",
          "type": "string",
          "x-go-name": "ApplicationID"
        },
        "container": {
          "description": "Name of the kubernetes container in the pod to\nstream logs from.",
          "type": "string",
          "x-go-name": "Container"
        },
        "dataPipelineId": {
          "description": "ID of the data pipeline",
          "type": "string",
          "x-go-name": "DataPipelineID"
        },
        "edgeId": {
          "description": "Edge ID from which logs will be streamed.",
          "type": "string",
          "x-go-name": "EdgeID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogStreamResponsePayload": {
      "description": "LogStreamResponsePayload is the url to which logs\nwill be streamed.",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "description": "URL to which logs are being streamed.\nin: body",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-name": "LogStreamEndpointsResponsePayload",
      "x-go-package": "cloudservices/common/model"
    },
    "LogTag": {
      "description": "LogTag is a name value pair. It can be Application and the specific ID",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the tag",
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "description": "Value of the tag",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogUploadCompletePayload": {
      "type": "object",
      "required": [
        "url",
        "status"
      ],
      "properties": {
        "errorMessage": {
          "type": "string",
          "x-go-name": "ErrorMessage"
        },
        "status": {
          "$ref": "#/definitions/LogUploadStatus"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogUploadPayload": {
      "type": "object",
      "required": [
        "url",
        "batchId"
      ],
      "properties": {
        "applicationId": {
          "description": "Optional ID of the application for which the log will be collected",
          "type": "string",
          "x-go-name": "ApplicationID"
        },
        "batchId": {
          "description": "Batch ID of the log upload request",
          "type": "string",
          "x-go-name": "BatchID"
        },
        "url": {
          "description": "URL where the log will be uploaded by the edge",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "LogUploadStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "SUCCESS",
        "FAILED",
        "TIMEDOUT"
      ]
    },
    "LoginResponse": {
      "description": "LoginResponse describes login response",
      "type": "object",
      "required": [
        "token",
        "_id",
        "name",
        "email"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "MLModel": {
      "description": "An MLModel represents a machine learning model.",
      "type": "object",
      "title": "MLModel is the object model for the machine learning model.",
      "required": [
        "tenantId",
        "name",
        "description",
        "projectId",
        "frameworkType"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Describe the machine learning model.  Maximum length is 200 characters.",
          "type": "string",
          "x-go-name": "Description"
        },
        "frameworkType": {
          "description": "Machine learning model framework type.",
          "type": "string",
          "enum": [
            "TensorFlow 1.13.1",
            "OpenVINO 2019_R2",
            "TensorFlow 2.1.0"
          ],
          "x-go-name": "FrameworkType"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "modelVersions": {
          "description": "Machine learning model versions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MLModelVersion"
          },
          "x-go-name": "ModelVersions"
        },
        "name": {
          "description": "Name for the machine learning model. Maximum length is 200 characters.",
          "type": "string",
          "x-go-name": "Name"
        },
        "projectId": {
          "description": "Parent project ID associated with this machine learning model.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "MLModelListResponsePayload": {
      "description": "payload for MLModelListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of ML models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MLModel"
          },
          "x-go-name": "MLModelList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "MLModelMetadata": {
      "description": "It serves as the payload when creating a machine learning model.",
      "type": "object",
      "title": "MLModelMetadata is base object model for the machine learning model.",
      "required": [
        "tenantId",
        "name",
        "description",
        "projectId",
        "frameworkType"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Describe the machine learning model.  Maximum length is 200 characters.",
          "type": "string",
          "x-go-name": "Description"
        },
        "frameworkType": {
          "description": "Machine learning model framework type.",
          "type": "string",
          "enum": [
            "TensorFlow 1.13.1",
            "OpenVINO 2019_R2",
            "TensorFlow 2.1.0"
          ],
          "x-go-name": "FrameworkType"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name for the machine learning model. Maximum length is 200 characters.",
          "type": "string",
          "x-go-name": "Name"
        },
        "projectId": {
          "description": "Parent project ID associated with this machine learning model.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "MLModelStatus": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "edgeId": {
          "type": "string",
          "x-go-name": "EdgeID"
        },
        "modelId": {
          "type": "string",
          "x-go-name": "ModelID"
        },
        "modelStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MLModelVersionStatus"
          },
          "x-go-name": "Status"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "MLModelStatusListPayload": {
      "description": "payload for MLModelStatusListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of ML model statuses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MLModelStatus"
          },
          "x-go-name": "MLModelStatusList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "MLModelVersion": {
      "type": "object",
      "title": "MLModelVersion version of a machine learning model.",
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "A description of the ML model version",
          "type": "string",
          "x-go-name": "Description"
        },
        "modelSizeBytes": {
          "description": "Size in bytes of the model version binary",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModelSizeBytes"
        },
        "modelVersion": {
          "description": "User entered version of the ML model",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModelVersion"
        },
        "s3Version": {
          "description": "ntnx:ignore\nAWS S3 generated version of the ML model",
          "type": "string",
          "x-go-name": "S3Version"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "MLModelVersionStatus": {
      "type": "object",
      "properties": {
        "Status": {
          "description": "Status of the ML model version",
          "type": "string",
          "enum": [
            "Active",
            "Inactive"
          ]
        },
        "Version": {
          "description": "ML model version number",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "MLModelVersionURLGetResponsePayload": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "MTLSStatus": {
      "description": "MTLSStatus describes the current mTLS status of a mesh entity",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "mTLS status: MTLS_ENABLED, MTLS_PARTIALLY_ENABLED, MTLS_NOT_ENABLED",
          "type": "string",
          "x-go-name": "Status",
          "example": "MTLS_ENABLED"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource\nthat the fieldset applies to.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted.",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\"",
          "type": "string",
          "x-go-name": "FieldsType"
        },
        "fieldsV1": {
          "$ref": "#/definitions/FieldsV1"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string",
          "x-go-name": "Manager"
        },
        "operation": {
          "$ref": "#/definitions/ManagedFieldsOperationType"
        },
        "time": {
          "$ref": "#/definitions/Time"
        }
      },
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "ManagedFieldsOperationType": {
      "type": "string",
      "title": "ManagedFieldsOperationType is the type of operation which lead to a ManagedFieldsEntry being created.",
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "Matrix": {
      "type": "array",
      "title": "Matrix is a list of time series.",
      "items": {
        "$ref": "#/definitions/SampleStream"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "MeshPolicies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MeshPolicy"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "MeshPolicy": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/MeshPolicySpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "MeshPolicySpec": {
      "type": "object",
      "properties": {
        "originIsOptional": {
          "type": "object",
          "x-go-name": "OriginIsOptional"
        },
        "origins": {
          "type": "object",
          "x-go-name": "Origins"
        },
        "peerIsOptional": {
          "type": "object",
          "x-go-name": "PeerIsOptional"
        },
        "peers": {
          "type": "object",
          "x-go-name": "Peers"
        },
        "principalBinding": {
          "type": "object",
          "x-go-name": "PrincipalBinding"
        },
        "targets": {
          "type": "object",
          "x-go-name": "Targets"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Metrics": {
      "type": "object",
      "properties": {
        "counters": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "x-go-name": "Counters"
        },
        "gauges": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "x-go-name": "Gauges"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "MonitoringDashboard": {
      "description": "MonitoringDashboard is the model representing custom monitoring dashboard, transformed from MonitoringDashboard k8s resource",
      "type": "object",
      "properties": {
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aggregation"
          },
          "x-go-name": "Aggregations"
        },
        "charts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Chart"
          },
          "x-go-name": "Charts"
        },
        "externalLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalLink"
          },
          "x-go-name": "ExternalLinks"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/kiali/k-charted/model"
    },
    "MonitoringDashboardExternalLinkVariables": {
      "type": "object",
      "properties": {
        "app": {
          "type": "string",
          "x-go-name": "App"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "service": {
          "type": "string",
          "x-go-name": "Service"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "workload": {
          "type": "string",
          "x-go-name": "Workload"
        }
      },
      "x-go-package": "github.com/kiali/k-charted/kubernetes/v1alpha1"
    },
    "NamespaceAppHealth": {
      "description": "NamespaceAppHealth is an alias of map of app name x health",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AppHealth"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "NamespaceOverview": {
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/NamespaceAppHealth"
        },
        "metrics": {
          "$ref": "#/definitions/KialiMetrics"
        },
        "validations": {
          "$ref": "#/definitions/IstioValidationSummary"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "NestedAggregateSpec": {
      "description": "NestedAggregateSpec is payload for nested aggregate request\nin: body",
      "type": "object",
      "required": [
        "type",
        "field",
        "nestedField"
      ],
      "properties": {
        "field": {
          "type": "string",
          "x-go-name": "Field"
        },
        "nestedField": {
          "type": "string",
          "x-go-name": "NestedField"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Node": {
      "description": "Node is a node in a service domain.",
      "type": "object",
      "title": "Node is the DB object and object model for nodes",
      "required": [
        "tenantId",
        "svcDomainId",
        "name",
        "serialNumber",
        "ipAddress",
        "gateway",
        "subnet"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Node description",
          "type": "string",
          "x-go-name": "Description"
        },
        "gateway": {
          "description": "Node Gateway IP address",
          "type": "string",
          "x-go-name": "Gateway"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "ipAddress": {
          "description": "Node IP Address",
          "type": "string",
          "x-go-name": "IPAddress"
        },
        "isBootstrapMaster": {
          "type": "boolean",
          "x-go-name": "IsBootstrapMaster"
        },
        "name": {
          "description": "Node name.\nMaximum length edge name is determined by kubernetes.\nName length limited to 60 and contraints are defined here\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go",
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "$ref": "#/definitions/NodeRole"
        },
        "serialNumber": {
          "description": "Node serial number",
          "type": "string",
          "x-go-name": "SerialNumber"
        },
        "subnet": {
          "description": "Node subnet mask",
          "type": "string",
          "x-go-name": "Subnet"
        },
        "svcDomainId": {
          "description": "ID of the service domain this entity belongs to",
          "type": "string",
          "x-go-name": "SvcDomainID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "NodeData": {
      "type": "object",
      "properties": {
        "app": {
          "type": "string",
          "x-go-name": "App"
        },
        "destServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceName"
          },
          "x-go-name": "DestServices"
        },
        "hasCB": {
          "type": "boolean",
          "x-go-name": "HasCB"
        },
        "hasMissingSC": {
          "type": "boolean",
          "x-go-name": "HasMissingSC"
        },
        "hasVS": {
          "type": "boolean",
          "x-go-name": "HasVS"
        },
        "id": {
          "description": "Cytoscape Fields",
          "type": "string",
          "x-go-name": "Id"
        },
        "isDead": {
          "type": "boolean",
          "x-go-name": "IsDead"
        },
        "isGroup": {
          "type": "string",
          "x-go-name": "IsGroup"
        },
        "isInaccessible": {
          "type": "boolean",
          "x-go-name": "IsInaccessible"
        },
        "isMisconfigured": {
          "type": "string",
          "x-go-name": "IsMisconfigured"
        },
        "isOutside": {
          "type": "boolean",
          "x-go-name": "IsOutside"
        },
        "isRoot": {
          "type": "boolean",
          "x-go-name": "IsRoot"
        },
        "isServiceEntry": {
          "type": "string",
          "x-go-name": "IsServiceEntry"
        },
        "isUnused": {
          "type": "boolean",
          "x-go-name": "IsUnused"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "nodeType": {
          "description": "App Fields (not required by Cytoscape)",
          "type": "string",
          "x-go-name": "NodeType"
        },
        "parent": {
          "type": "string",
          "x-go-name": "Parent"
        },
        "service": {
          "type": "string",
          "x-go-name": "Service"
        },
        "traffic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProtocolTraffic"
          },
          "x-go-name": "Traffic"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "workload": {
          "type": "string",
          "x-go-name": "Workload"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "NodeHealthStatus": {
      "description": "NodeHealthStatus is the health status of the node",
      "type": "string",
      "x-go-package": "cloudservices/common/model"
    },
    "NodeInfo": {
      "description": "NodeInfo has node information like the memory, storage and CPU usage",
      "type": "object",
      "required": [
        "tenantId",
        "svcDomainId"
      ],
      "properties": {
        "artifacts": {
          "description": "Artifacts is a json object for passing node ip and service ports",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Artifacts"
        },
        "connected": {
          "type": "boolean",
          "x-go-name": "Connected"
        },
        "cpuUsage": {
          "description": "Node CPU usage.",
          "type": "string",
          "x-go-name": "CPUUsage"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "gpuInfo": {
          "description": "Information about GPUs associated with the node.",
          "type": "string",
          "x-go-name": "GPUInfo"
        },
        "gpuUsage": {
          "description": "Node GPU Usage.",
          "type": "string",
          "x-go-name": "GPUUsage"
        },
        "healthBits": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "x-go-name": "HealthBits"
        },
        "healthStatus": {
          "$ref": "#/definitions/NodeHealthStatus"
        },
        "healthy": {
          "description": "Deprecated. Use healthStatus instead",
          "type": "boolean",
          "x-go-name": "Healthy"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "kubeVersion": {
          "description": "Node Kubernetes version.",
          "type": "string",
          "x-go-name": "KubeVersion"
        },
        "memoryFreeKB": {
          "description": "Free (available) node memory in KB.",
          "type": "string",
          "x-go-name": "MemoryFreeKB"
        },
        "nodeBuildNum": {
          "description": "Node build number.",
          "type": "string",
          "x-go-name": "NodeBuildNum"
        },
        "nodeId": {
          "type": "string",
          "x-go-name": "NodeID"
        },
        "nodeVersion": {
          "description": "Node version.",
          "type": "string",
          "x-go-name": "NodeVersion"
        },
        "numCpu": {
          "description": "Number of CPUs assigned to the node.",
          "type": "string",
          "x-go-name": "NumCPU"
        },
        "onboarded": {
          "type": "boolean",
          "x-go-name": "Onboarded"
        },
        "osVersion": {
          "description": "Node OS version",
          "type": "string",
          "x-go-name": "OSVersion"
        },
        "storageFreeKB": {
          "description": "Free (available) node storage in KB.",
          "type": "string",
          "x-go-name": "StorageFreeKB"
        },
        "svcDomainId": {
          "description": "ID of the service domain this entity belongs to",
          "type": "string",
          "x-go-name": "SvcDomainID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "totalMemoryKB": {
          "description": "Total node memory in KB.",
          "type": "string",
          "x-go-name": "TotalMemoryKB"
        },
        "totalStorageKB": {
          "description": "Total node storage capacity in KB.",
          "type": "string",
          "x-go-name": "TotalStorageKB"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "NodeInfoListPayload": {
      "description": "NodeInfoListPayload is the payload for NodeInfoListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of node info",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeInfo"
          },
          "x-go-name": "NodeInfoList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "NodeListPayload": {
      "description": "NodeListPayload is the payload for NodeListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of edge devices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Node"
          },
          "x-go-name": "NodeList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "NodeOnboardInfo": {
      "type": "object",
      "title": "NodeOnboardInfo is object that relays post onboard info.",
      "required": [
        "id",
        "sshPublicKey",
        "nodeVersion"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "NodeID"
        },
        "nodeVersion": {
          "type": "string",
          "x-go-name": "NodeVersion"
        },
        "sshPublicKey": {
          "type": "string",
          "x-go-name": "SSHPublicKey"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "NodeRole": {
      "description": "NodeRole holds the role of a node in the service domain",
      "type": "object",
      "properties": {
        "master": {
          "type": "boolean",
          "x-go-name": "Master"
        },
        "worker": {
          "type": "boolean",
          "x-go-name": "Worker"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "NodeWrapper": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/NodeData"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "NotificationTopics": {
      "type": "string",
      "enum": [
        "reportEdge",
        "onDeleteEdge",
        "onUpdateEdge",
        "reportEdgeCluster",
        "onUpdateEdgeCluster",
        "onDeleteEdgeCluster",
        "reportSensors",
        "reportEdgeInfo",
        "application-status",
        "onCreateApplication",
        "onDeleteApplication",
        "onUpdateApplication",
        "onGetApplicationContainers",
        "onCreateCategory",
        "onDeleteCategory",
        "onUpdateCategory",
        "onCreateDataSource",
        "onDeleteDataSource",
        "onUpdateDataSource",
        "onCreateDockerProfile",
        "onDeleteDockerProfile",
        "onUpdateDockerProfile",
        "onCreateScript",
        "onDeleteScript",
        "onUpdateScript",
        "onCreateScriptRuntime",
        "onDeleteScriptRuntime",
        "onUpdateScriptRuntime",
        "onCreateDataStream",
        "onDeleteDataStream",
        "onUpdateDataStream",
        "onGetDataPipelineContainers",
        "onCreateCloudCreds",
        "onDeleteCloudCreds",
        "onUpdateCloudCreds",
        "onCreateProject",
        "onDeleteProject",
        "onUpdateProject",
        "onCreateMLModel",
        "onDeleteMLModel",
        "onUpdateMLModel",
        "logUpload",
        "logStream",
        "logUploadComplete",
        "executeEdgeUpgrade",
        "setupSSHTunneling",
        "teardownSSHTunneling",
        "onCreateProjectService",
        "onDeleteProjectService",
        "onUpdateProjectService",
        "onCreateLogCollector",
        "onDeleteLogCollector",
        "onUpdateLogCollector",
        "onCreateSoftwareUpdate",
        "onUpdateSoftwareUpdate",
        "onCreateServiceInstance",
        "onUpdateServiceInstance",
        "onDeleteServiceInstance",
        "onCreateServiceBinding",
        "onDeleteServiceBinding",
        "onCreateDataDriverInstance",
        "onUpdateDataDriverInstance",
        "onDeleteDataDriverInstance",
        "httpProxy"
      ]
    },
    "NutanixVolumesStorageProfileConfig": {
      "type": "object",
      "title": "NutanixVolumesStorageProfileConfig - struct for Nutanix volume Storage Profile config.",
      "required": [
        "prismElementClusterVIP",
        "prismElementUserName",
        "prismElementPassword",
        "prismElementClusterPort",
        "dataServicesIP",
        "dataServicesPort",
        "storageContainerName"
      ],
      "properties": {
        "dataServicesIP": {
          "type": "string",
          "x-go-name": "DataServicesIP"
        },
        "dataServicesPort": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DataServicesPort"
        },
        "flashMode": {
          "type": "boolean",
          "x-go-name": "FlashMode"
        },
        "prismElementClusterPort": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrismElementClusterPort"
        },
        "prismElementClusterVIP": {
          "type": "string",
          "x-go-name": "PrismElementClusterVIP"
        },
        "prismElementPassword": {
          "type": "string",
          "x-go-name": "PrismElementPassword"
        },
        "prismElementUserName": {
          "type": "string",
          "x-go-name": "PrismElementUserName"
        },
        "storageContainerName": {
          "type": "string",
          "x-go-name": "StorageContainerName"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "OAuthCodes": {
      "description": "OAuthCodes is used for OAuth login and token refresh",
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "x-go-name": "Code"
        },
        "refreshToken": {
          "type": "string",
          "x-go-name": "RefreshToken"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects\nusers must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Annotations"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to.\nThis is used to distinguish resources with same name and namespace in different clusters.\nThis field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n+optional",
          "type": "string",
          "x-go-name": "ClusterName"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/Time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeletionGracePeriodSeconds"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/Time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\n+optional\n+patchStrategy=merge",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Finalizers"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\nshould retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
          "type": "string",
          "x-go-name": "GenerateName"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Generation"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManagedFieldsEntry"
          },
          "x-go-name": "ManagedFields"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional",
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OwnerReference"
          },
          "x-go-name": "OwnerReferences"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n\nDEPRECATED\nKubernetes will stop propagating this field in 1.20 release and the field is planned\nto be removed in 1.21 release.\n+optional",
          "type": "string",
          "x-go-name": "SelfLink"
        },
        "uid": {
          "$ref": "#/definitions/UID"
        }
      },
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "ObjectRequestBaseApplication": {
      "description": "ObjectRequestBaseApplication is used as a websocket Application message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/Application"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseApplicationContainers": {
      "description": "ObjectRequestBaseApplicationContainers is used as a websocket \"getApplicationContainers\" message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/ApplicationContainersBaseObject"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseCategory": {
      "description": "ObjectRequestBaseCategory is used as websocket Category message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/Category"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseCloudCreds": {
      "description": "ObjectRequestBaseCloudCreds is used as websocket CloudCreds message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/CloudCreds"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseDataPipelineContainers": {
      "description": "ObjectRequestBaseDataPipelineContainers is used as a websocket\n\"getDataPipelineContainers\" message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/DataPipelineContainersBaseObject"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseDataSource": {
      "description": "ObjectRequestBaseDataSource is used as websocket DataSource message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/DataSource"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseDataStream": {
      "description": "ObjectRequestBaseDataStream is used as websocket DataStream message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/DataStream"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseDockerProfile": {
      "description": "ObjectRequestBaseDockerProfile is used as websocket DockerProfile message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/DockerProfile"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseEdge": {
      "description": "ObjectRequestBaseEdge is used as websocket Edge message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/Edge"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseEdgeInfo": {
      "description": "ObjectRequestBaseEdgeInfo is used as websocket Edge message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/EdgeUsageInfo"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseExecuteEdgeUpgrade": {
      "description": "ObjectRequestBaseExecuteEdgeUpgrade is used as websocket ExecuteEdgeUpgrade message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/ExecuteEdgeUpgradeData"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseLogCollector": {
      "description": "ObjectRequestBaseLogCollector is used as a websocket LogCollector message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/LogCollector"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseLogStream": {
      "type": "object",
      "title": "ObjectRequestBaseLogStream is used as websocket LogStream message.",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/WSMessagingLogStream"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseMLModel": {
      "type": "object",
      "title": "ObjectRequestBaseMLModel is used as a websocket MLModel message.",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/MLModel"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseProject": {
      "description": "ObjectRequestBaseProject is used as websocket Project message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/Project"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseProjectService": {
      "description": "ObjectRequestBaseProjectService is used as a websocket ProjectService message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/ProjectService"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseScript": {
      "description": "ObjectRequestBaseScript is used as websocket Script message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/Script"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseScriptRuntime": {
      "description": "ObjectRequestBaseScriptRuntime is used as websocket ScriptRuntime message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/ScriptRuntime"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseServiceBinding": {
      "description": "ObjectRequestBaseServiceBinding is used as a websocket payload for Service Binding",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/ServiceBinding"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseServiceInstance": {
      "description": "ObjectRequestBaseServiceInstance is used as a websocket payload for Service Instance",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/ServiceInstance"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestBaseSoftwareUpdate": {
      "description": "ObjectRequestBaseSoftwareUpdate is used as a websocket software update message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/SoftwareUpdateServiceDomain"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestLogUpload": {
      "description": "ObjectRequestLogUpload is used as websocket Log Upload message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/LogUploadPayload"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestSetupSSHTunneling": {
      "description": "ObjectRequestSetupSSHTunneling is used as websocket setupSSHTunneling message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/WstunPayload"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectRequestTeardownSSHTunneling": {
      "description": "ObjectRequestTeardownSSHTunneling is used as websocket teardownSSHTunneling message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/WstunTeardownRequest"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ObjectResponseLogUploadComplete": {
      "description": "ObjectRequestLogUpload is used as websocket Log Upload complete message",
      "type": "object",
      "required": [
        "tenantId",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/LogUploadCompletePayload"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
          "type": "boolean",
          "x-go-name": "BlockOwnerDeletion"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.\n+optional",
          "type": "boolean",
          "x-go-name": "Controller"
        },
        "kind": {
          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "x-go-name": "Kind"
        },
        "name": {
          "description": "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string",
          "x-go-name": "Name"
        },
        "uid": {
          "$ref": "#/definitions/UID"
        }
      },
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "Pod": {
      "description": "Pod holds a subset of v1.Pod data that is meaningful in Kiali",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Annotations"
        },
        "appLabel": {
          "type": "boolean",
          "x-go-name": "AppLabel"
        },
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerInfo"
          },
          "x-go-name": "Containers"
        },
        "createdAt": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "createdBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "x-go-name": "CreatedBy"
        },
        "istioContainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerInfo"
          },
          "x-go-name": "IstioContainers"
        },
        "istioInitContainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerInfo"
          },
          "x-go-name": "IstioInitContainers"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "versionLabel": {
          "type": "boolean",
          "x-go-name": "VersionLabel"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "PodMetrics": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "cloudservices/common/model"
    },
    "PodStatus": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Pods": {
      "description": "Pods alias for list of Pod structs",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Pod"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Policies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Policy"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Policy": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "originIsOptional": {
              "type": "object",
              "x-go-name": "OriginIsOptional"
            },
            "origins": {
              "type": "object",
              "x-go-name": "Origins"
            },
            "peerIsOptional": {
              "type": "object",
              "x-go-name": "PeerIsOptional"
            },
            "peers": {
              "type": "object",
              "x-go-name": "Peers"
            },
            "principalBinding": {
              "type": "object",
              "x-go-name": "PrincipalBinding"
            },
            "targets": {
              "type": "object",
              "x-go-name": "Targets"
            }
          },
          "x-go-name": "PolicySpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Port": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Port"
        },
        "protocol": {
          "type": "string",
          "x-go-name": "Protocol"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Ports": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Port"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Process": {
      "description": "Process is the process emitting a set of spans",
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "ProcessID": {
      "type": "string",
      "title": "ProcessID is a hashed value of the Process struct that is unique within the trace.",
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "Project": {
      "description": "A Project is logical grouping of resouces.\n(Edges, CloudCreds, Users, Data Pipelines, and so on.)",
      "type": "object",
      "title": "Project is object model for project",
      "required": [
        "tenantId",
        "name",
        "description",
        "cloudCredentialIds",
        "dockerProfileIds",
        "users",
        "edgeSelectorType"
      ],
      "properties": {
        "cloudCredentialIds": {
          "description": "List of cloud profile credential IDs that the project can access.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "CloudCredentialIDs"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Describe the project.",
          "type": "string",
          "x-go-name": "Description"
        },
        "dockerProfileIds": {
          "description": "List of Docker container registry profile IDs that the project can access.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DockerProfileIDs"
        },
        "edgeIds": {
          "description": "List of edge IDs for edges in this project.\nOnly relevant when edgeSelectorType === 'Explicit'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeIDs"
        },
        "edgeSelectorType": {
          "description": "Type of edge selector: Category or Explicit.\nSpecify whether edges belonging to this project are\ngiven by edgeIDs (Explicit) or edgeSelectors (Category).",
          "type": "string",
          "enum": [
            "Category",
            "Explicit"
          ],
          "x-go-name": "EdgeSelectorType"
        },
        "edgeSelectors": {
          "description": "Edge selectors - CategoryInfo list.\nOnly relevant when edgeSelectorType === 'Category'",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "EdgeSelectors"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Project name.",
          "type": "string",
          "x-go-name": "Name"
        },
        "privileged": {
          "description": "Privileged projects can use all Kubernetes resources",
          "type": "boolean",
          "x-go-name": "Privileged"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "users": {
          "description": "List of users who can access the project.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectUserInfo"
          },
          "x-go-name": "Users"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ProjectListPayload": {
      "description": "payload for ProjectListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of projects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          },
          "x-go-name": "ProjectList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ProjectService": {
      "type": "object",
      "required": [
        "tenantId",
        "projectId",
        "name",
        "serviceManifest"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "serviceManifest": {
          "type": "string",
          "x-go-name": "ServiceManifest"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ProjectServiceListPayload": {
      "description": "payload for ProjectServiceListResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProjectService"
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ProjectUserInfo": {
      "type": "object",
      "required": [
        "userId",
        "role"
      ],
      "properties": {
        "role": {
          "description": "Valid values for Role are: PROJECT_ADMIN, PROJECT_USER",
          "type": "string",
          "enum": [
            "PROJECT_ADMIN",
            "PROJECT_USER"
          ],
          "x-go-name": "Role"
        },
        "userId": {
          "description": "User Id to be added to the project",
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ProtocolTraffic": {
      "description": "ProtocolTraffic supplies all of the traffic information for a single protocol",
      "type": "object",
      "properties": {
        "protocol": {
          "type": "string",
          "x-go-name": "Protocol"
        },
        "rates": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Rates"
        },
        "responses": {
          "$ref": "#/definitions/Responses"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ProxyCallPayload": {
      "type": "object",
      "x-go-package": "cloudservices/common/model"
    },
    "ProxyRequest": {
      "description": "ProxyRequest is used as websocket httpProxy request message",
      "type": "object",
      "required": [
        "url",
        "request"
      ],
      "properties": {
        "request": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Request"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ProxyResponse": {
      "description": "ProxyResponse is used as websocket httpProxy response message",
      "type": "object",
      "required": [
        "status",
        "statusCode"
      ],
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Response"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "statusCode": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusCode"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ProxyResponsePayload": {
      "type": "object",
      "x-go-package": "cloudservices/common/model"
    },
    "QuotaSpec": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "rules": {
              "type": "object",
              "x-go-name": "Rules"
            }
          },
          "x-go-name": "QuotaSpecSubSpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "QuotaSpecBinding": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "quotaSpecs": {
              "type": "object",
              "x-go-name": "QuotaSpecs"
            },
            "services": {
              "type": "object",
              "x-go-name": "Services"
            }
          },
          "x-go-name": "QuotaSpecBindingSpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "QuotaSpecBindings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QuotaSpecBinding"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "QuotaSpecs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QuotaSpec"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "RawMessage": {
      "description": "It implements Marshaler and Unmarshaler and can\nbe used to delay JSON decoding or precompute a JSON encoding.",
      "type": "array",
      "title": "RawMessage is a raw encoded JSON value.",
      "items": {
        "type": "integer",
        "format": "uint8"
      },
      "x-go-package": "encoding/json"
    },
    "RbacConfig": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "exclusion": {
              "type": "object",
              "x-go-name": "Exclusion"
            },
            "inclusion": {
              "type": "object",
              "x-go-name": "Inclusion"
            },
            "mode": {
              "type": "object",
              "x-go-name": "Mode"
            }
          },
          "x-go-name": "RbacConfigSpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "RbacConfigs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RbacConfig"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Reference": {
      "description": "Reference is a reference from one span to another",
      "type": "object",
      "properties": {
        "refType": {
          "$ref": "#/definitions/ReferenceType"
        },
        "spanID": {
          "$ref": "#/definitions/SpanID"
        },
        "traceID": {
          "$ref": "#/definitions/TraceID"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "ReferenceType": {
      "description": "ReferenceType is the reference type of one span to another",
      "type": "string",
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "RenderApplicationPayload": {
      "description": "RenderApplicationPayload describes edge services on edge for app template\nengine to render application YAML.",
      "type": "object",
      "properties": {
        "edgeServices": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EdgeService"
          },
          "x-go-name": "EdgeServices"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "RenderApplicationResponsePayload": {
      "description": "RenderApplicationResponsePayload containers rendered application\ntemplate along with list of services referenced in YAML.",
      "type": "object",
      "properties": {
        "appYaml": {
          "type": "string",
          "x-go-name": "AppYaml"
        },
        "edgeServices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeServices"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ReportSensorsRequest": {
      "description": "ReportSensorsRequest is used as websocket reportSensors message",
      "type": "object",
      "required": [
        "tenantId",
        "sensors"
      ],
      "properties": {
        "sensors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sensor"
          },
          "x-go-name": "Sensors"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "RequestHealth": {
      "description": "RequestHealth holds several stats about recent request errors",
      "type": "object",
      "properties": {
        "errorRatio": {
          "type": "number",
          "format": "double",
          "x-go-name": "ErrorRatio"
        },
        "inboundErrorRatio": {
          "type": "number",
          "format": "double",
          "x-go-name": "InboundErrorRatio"
        },
        "outboundErrorRatio": {
          "type": "number",
          "format": "double",
          "x-go-name": "OutboundErrorRatio"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "RequestLogDownloadPayload": {
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "location": {
          "description": "Unique location of the log that is returned by the log listing API",
          "type": "string",
          "x-go-name": "Location"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "RequestLogUploadPayload": {
      "description": "Log upload request from the UI",
      "type": "object",
      "required": [
        "edgeIds"
      ],
      "properties": {
        "applicationId": {
          "description": "Optional ID of the application for which the log will be collected",
          "type": "string",
          "x-go-name": "ApplicationID"
        },
        "edgeIds": {
          "description": "IDs of the edges from where the logs will be collected",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeIDs"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ResourcePermissions": {
      "description": "ResourcePermissions holds permission flags for an object type\nTrue means allowed.",
      "type": "object",
      "properties": {
        "create": {
          "type": "boolean",
          "x-go-name": "Create"
        },
        "delete": {
          "type": "boolean",
          "x-go-name": "Delete"
        },
        "update": {
          "type": "boolean",
          "x-go-name": "Update"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ResourcesPermissions": {
      "description": "ResourcesPermissions holds a map of permission flags per resource",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ResourcePermissions"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ResponseBase": {
      "type": "object",
      "required": [
        "statusCode"
      ],
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "statusCode": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusCode"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ResponseBaseEdge": {
      "description": "ResponseBaseEdge is used as websocket reportEdge response",
      "type": "object",
      "required": [
        "statusCode",
        "doc"
      ],
      "properties": {
        "doc": {
          "$ref": "#/definitions/Edge"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "statusCode": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusCode"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ResponseDetail": {
      "type": "object",
      "title": "ResponseDetail holds information broken down by response code.",
      "properties": {
        "flags": {
          "$ref": "#/definitions/ResponseFlags"
        },
        "hosts": {
          "$ref": "#/definitions/ResponseHosts"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ResponseFlags": {
      "description": "\"200\" : {\n\"-\"     : \"80.0\",\n\"DC\"    : \"10.0\",\n\"FI,FD\" : \"10.0\"\n}, ...",
      "type": "object",
      "title": "ResponseFlags is a map of maps. Each response code is broken down by responseFlags:percentageOfTraffic, e.g.:",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ResponseHosts": {
      "description": "\"200\" : {\n\"www.google.com\" : \"80.0\",\n\"www.yahoo.com\"  : \"20.0\"\n}, ...",
      "type": "object",
      "title": "ResponseHosts is a map of maps. Each response host is broken down by responseFlags:percentageOfTraffic, e.g.:",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Responses": {
      "description": "Responses maps responseCodes to detailed information for that code",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ResponseDetail"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "RetentionInfo": {
      "description": "RetentionInfo capture info for retention",
      "type": "object",
      "required": [
        "type",
        "limit"
      ],
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "type": {
          "description": "Retention type can be Time or Size.\nFor Time based retention, limit is in seconds\nand specifies how long the data should be retained.\nFor Size based retention, limit is in GB\nand specifies up to the maximum capacity/amount of data\nto retain.",
          "type": "string",
          "enum": [
            "Time",
            "Size"
          ],
          "x-go-name": "Type"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Runtime": {
      "description": "Runtime holds the runtime title and associated dashboard template(s)",
      "type": "object",
      "properties": {
        "dashboardRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardRef"
          },
          "x-go-name": "DashboardRefs"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kiali/k-charted/model"
    },
    "RuntimeEnvironment": {
      "description": "A RuntimeEnvironment is a Docker container runtime for functions.\nKarbon Platform Services includes several RuntimeEnvironments for built-in (and user defined) functions.\nUser can also create custom RuntimeEnvironments which may be\nderived from Karbon Platform Services built-in RuntimeEnvironments.",
      "type": "object",
      "title": "RuntimeEnvironment is the DB object and object model for function runtime.",
      "required": [
        "tenantId",
        "name",
        "language",
        "builtin"
      ],
      "properties": {
        "builtin": {
          "description": "ntnx:ignore\n\nWhether this is a built-in script runtime. Always set this to false for user created script runtime.",
          "type": "boolean",
          "x-go-name": "Builtin"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Runtime description.",
          "type": "string",
          "x-go-name": "Description"
        },
        "dockerProfileID": {
          "description": "DockerProfile ID (Container registry profile) used by this script runtime.",
          "type": "string",
          "x-go-name": "DockerProfileID"
        },
        "dockerRepoURI": {
          "description": "Docker repository URI of the script runtime.",
          "type": "string",
          "x-go-name": "DockerRepoURI"
        },
        "dockerfile": {
          "description": "Dockerfile for the script runtime. Serves as documentation for the script runtime.",
          "type": "string",
          "x-go-name": "Dockerfile"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "language": {
          "description": "Runtime enviroment script language.",
          "type": "string",
          "x-go-name": "Language"
        },
        "name": {
          "description": "Name of the runtime environment.",
          "type": "string",
          "x-go-name": "Name"
        },
        "projectId": {
          "description": "ID of parent project, required for custom (non-built-in) script runtimes.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "RuntimeEnvironmentListPayload": {
      "description": "payload for RuntimeEnvironmentListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of runtime environments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuntimeEnvironment"
          },
          "x-go-name": "RuntimeEnvironmentList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SamplePair": {
      "type": "object",
      "properties": {
        "Timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "Value": {
          "type": "number",
          "format": "double"
        }
      },
      "x-go-package": "github.com/kiali/k-charted/model"
    },
    "SampleStream": {
      "type": "object",
      "properties": {
        "labelSet": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "LabelSet"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SamplePair"
          },
          "x-go-name": "Values"
        }
      },
      "x-go-package": "github.com/kiali/k-charted/model"
    },
    "Schema": {
      "description": "Schema holds the definition for the schema",
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Parameters"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Script": {
      "description": "Script represent lambdas:\nfunctions or transformations that can be applied\nto DataStreams.\nScripts are tenant-wide objects and the same script\nmay be run within an edge, across all edges of a tenant\nor on tenant data in the cloud.",
      "type": "object",
      "title": "Script is object model for script",
      "required": [
        "tenantId",
        "name",
        "type",
        "language",
        "environment",
        "code",
        "builtin",
        "params"
      ],
      "properties": {
        "builtin": {
          "description": "ntnx:ignore\n\nWhether this is a built-in runtime\n\nThis should be required, but is not marked as such due to backward compatibility.",
          "type": "boolean",
          "x-go-name": "Builtin"
        },
        "code": {
          "description": "The source code for the function script.",
          "type": "string",
          "x-go-name": "Code"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Provide a description for your function code/script.",
          "type": "string",
          "x-go-name": "Description"
        },
        "environment": {
          "description": "Runtime environment for the function code/script.",
          "type": "string",
          "x-go-name": "Environment"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "language": {
          "description": "Programming language for the function code/script.\nSupported languages are python and javascript",
          "type": "string",
          "x-go-name": "Language"
        },
        "name": {
          "description": "Function name.",
          "type": "string",
          "x-go-name": "Name"
        },
        "params": {
          "description": "Array of script parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptParam"
          },
          "x-go-name": "Params"
        },
        "projectId": {
          "description": "ID of parent project, required for custom (non-builtin) scripts.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "runtimeId": {
          "description": "ID of the ScriptRuntime to use to run this script",
          "type": "string",
          "x-go-name": "RuntimeID"
        },
        "runtimeTag": {
          "description": "Docker image tag of the ScriptRuntime to use to run this script.\nIf missing or empty, then backend should treat it as \"latest\"",
          "type": "string",
          "x-go-name": "RuntimeTag"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Type of function code/script: Transformation or Function.\nTransformation takes a data stream as input\nand produces a different data stream as output.\nFunction takes a data stream as input\nbut has no constraint on output.",
          "type": "string",
          "enum": [
            "Transformation",
            "Function"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ScriptListPayload": {
      "description": "payload for ScriptListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of scripts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Script"
          },
          "x-go-name": "ScriptList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ScriptParam": {
      "description": "ScriptParam - Spec for a script parameter\nscript is a legacy term for function",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "description": "Name of the parameter",
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "description": "Type of the parameter",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ScriptParamValue": {
      "description": "ScriptParamValue - Instance of a script parameter value",
      "type": "object",
      "required": [
        "name",
        "type",
        "value"
      ],
      "properties": {
        "name": {
          "description": "Name of the parameter",
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "description": "Type of the parameter",
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "description": "Value of the parameter",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ScriptRuntime": {
      "description": "A ScriptRuntime is a Docker container runtime for scripts.\nKarbon Platform Services includes several ScriptRuntimes for built-in (and user defined) scripts.\nUser can also create custom ScriptRuntimes which may be\nderived from Karbon Platform Services built-in ScriptRuntimes.",
      "type": "object",
      "title": "ScriptRuntime is the DB object and object model for script runtime.",
      "required": [
        "tenantId",
        "name",
        "language",
        "builtin"
      ],
      "properties": {
        "builtin": {
          "description": "ntnx:ignore\n\nWhether this is a built-in script runtime. Always set this to false for user created script runtime.",
          "type": "boolean",
          "x-go-name": "Builtin"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Runtime description.",
          "type": "string",
          "x-go-name": "Description"
        },
        "dockerProfileID": {
          "description": "DockerProfile ID (Container registry profile) used by this script runtime.",
          "type": "string",
          "x-go-name": "DockerProfileID"
        },
        "dockerRepoURI": {
          "description": "Docker repository URI of the script runtime.",
          "type": "string",
          "x-go-name": "DockerRepoURI"
        },
        "dockerfile": {
          "description": "Dockerfile for the script runtime. Serves as documentation for the script runtime.",
          "type": "string",
          "x-go-name": "Dockerfile"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "language": {
          "description": "Runtime enviroment script language.",
          "type": "string",
          "x-go-name": "Language"
        },
        "name": {
          "description": "Name of the runtime environment.",
          "type": "string",
          "x-go-name": "Name"
        },
        "projectId": {
          "description": "ID of parent project, required for custom (non-built-in) script runtimes.",
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ScriptRuntimeListPayload": {
      "description": "payload for ScriptRuntimeListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of script runtimes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptRuntime"
          },
          "x-go-name": "ScriptRuntimeList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Sensor": {
      "description": "For .NEXT Nice we do not have a way to identify a sensor (e.g., via certificate).\nThe sensor discovery service will make wildcard (#) subscription to\nmqtt server and report each distinct mqtt topic as a sensor.",
      "type": "object",
      "title": "Sensor is object model for sensor",
      "required": [
        "tenantId",
        "edgeId",
        "topicName"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "edgeId": {
          "description": "ID of the edge this entity belongs to",
          "type": "string",
          "x-go-name": "EdgeID"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "topicName": {
          "description": "mqtt topic name that identifies the sensor.",
          "type": "string",
          "x-go-name": "TopicName"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SensorListPayload": {
      "description": "payload for SensorListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of sensors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sensor"
          },
          "x-go-name": "SensorList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SerialNumberPayload": {
      "description": "SerialNumberPayload payload for get edge by serial number",
      "type": "object",
      "required": [
        "serialNumber"
      ],
      "properties": {
        "serialNumber": {
          "description": "Edge serial number",
          "type": "string",
          "x-go-name": "SerialNumber"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Service": {
      "description": "Service is object model for service",
      "type": "object",
      "required": [
        "serviceType"
      ],
      "properties": {
        "serviceType": {
          "type": "string",
          "enum": [
            "IoT",
            "PaaS"
          ],
          "x-go-name": "ServiceType"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceBinding": {
      "description": "ServiceBinding holds the Service Binding information",
      "type": "object",
      "required": [
        "tenantId",
        "type",
        "svcVersion",
        "scope",
        "minSvcDomainVersion",
        "name"
      ],
      "properties": {
        "bindResource": {
          "$ref": "#/definitions/ServiceBindingResource"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "minSvcDomainVersion": {
          "description": "Minimum version of the Service Domain supporting this Service Class",
          "type": "string",
          "x-go-name": "MinSvcDomainVersion"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Parameters"
        },
        "scope": {
          "$ref": "#/definitions/ServiceClassScopeType"
        },
        "svcClassId": {
          "type": "string",
          "x-go-name": "SvcClassID"
        },
        "svcClassName": {
          "type": "string",
          "x-go-name": "SvcClassName"
        },
        "svcVersion": {
          "description": "Version of the Service Class type",
          "type": "string",
          "x-go-name": "SvcVersion"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Type of the Service Class e.g Kafka",
          "type": "string",
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceBindingListPayload": {
      "description": "ServiceBindingListPayload is the payload for ServiceBindingListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of Service Bindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceBinding"
          },
          "x-go-name": "SvcBindingList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceBindingParam": {
      "description": "ServiceBindingParam holds the common parameters for creating Service Binding",
      "type": "object",
      "required": [
        "name",
        "svcClassId"
      ],
      "properties": {
        "bindResource": {
          "$ref": "#/definitions/ServiceBindingResource"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Parameters"
        },
        "svcClassId": {
          "type": "string",
          "x-go-name": "SvcClassID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceBindingResource": {
      "description": "ServiceBindingResource is the binding resource to be bound to the Service Instance",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "type": {
          "$ref": "#/definitions/ServiceBindingResourceType"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceBindingResourceType": {
      "type": "string",
      "enum": [
        "SERVICEDOMAIN",
        "PROJECT"
      ]
    },
    "ServiceBindingResult": {
      "description": "ServiceBindingResult is the result information of a Service Binding",
      "type": "object",
      "properties": {
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Credentials"
        },
        "endpoints": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Endpoints"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceBindingSchema": {
      "description": "ServiceBindingSchema holds the schema for Service Binding",
      "type": "object",
      "properties": {
        "create": {
          "$ref": "#/definitions/Schema"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceBindingStateType": {
      "type": "string",
      "enum": [
        "PROVISIONING",
        "PROVISIONED",
        "FAILED"
      ]
    },
    "ServiceBindingStatus": {
      "description": "ServiceBindingStatus holds the Service Binding result information",
      "type": "object",
      "required": [
        "svcDomainId",
        "state",
        "svcBindingId"
      ],
      "properties": {
        "bindResult": {
          "$ref": "#/definitions/ServiceBindingResult"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "state": {
          "$ref": "#/definitions/ServiceBindingStateType"
        },
        "svcBindingId": {
          "type": "string",
          "x-go-name": "SvcBindingID"
        },
        "svcDomainId": {
          "type": "string",
          "x-go-name": "SvcDomainID"
        },
        "svcInstanceId": {
          "type": "string",
          "x-go-name": "SvcInstanceID"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceBindingStatusListPayload": {
      "description": "ServiceBindingStatusListPayload is the payload for ServiceBindingStatusListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of Service Binding Status",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceBindingStatus"
          },
          "x-go-name": "SvcBindingStatusList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceClass": {
      "description": "ServiceClass holds the definition including schemas for the managed service",
      "type": "object",
      "required": [
        "type",
        "svcVersion",
        "scope",
        "minSvcDomainVersion",
        "name",
        "state",
        "bindable"
      ],
      "properties": {
        "bindable": {
          "description": "Flag to specify if service binding is supported",
          "type": "boolean",
          "x-go-name": "Bindable"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "minSvcDomainVersion": {
          "description": "Minimum version of the Service Domain supporting this Service Class",
          "type": "string",
          "x-go-name": "MinSvcDomainVersion"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "schemas": {
          "$ref": "#/definitions/ServiceClassSchemas"
        },
        "scope": {
          "$ref": "#/definitions/ServiceClassScopeType"
        },
        "state": {
          "$ref": "#/definitions/ServiceClassStateType"
        },
        "svcVersion": {
          "description": "Version of the Service Class type",
          "type": "string",
          "x-go-name": "SvcVersion"
        },
        "tags": {
          "description": "Tag name can be repeated to hold multiple values.\nTags essential = yes/no and category = some category are required",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceClassTag"
          },
          "x-go-name": "Tags"
        },
        "type": {
          "description": "Type of the Service Class e.g Kafka",
          "type": "string",
          "x-go-name": "Type"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceClassListPayload": {
      "description": "ServiceInstanceListPayload is the payload for ServiceClassListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of Service Classes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceClass"
          },
          "x-go-name": "SvcClassList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceClassSchemas": {
      "description": "ServiceClassSchemas holds the schema for the Service Class",
      "type": "object",
      "properties": {
        "svcBinding": {
          "$ref": "#/definitions/ServiceBindingSchema"
        },
        "svcInstance": {
          "$ref": "#/definitions/ServiceInstanceSchema"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceClassScopeType": {
      "type": "string",
      "enum": [
        "SERVICEDOMAIN",
        "PROJECT"
      ]
    },
    "ServiceClassStateType": {
      "type": "string",
      "enum": [
        "FINAL",
        "DRAFT",
        "DEPRECATED"
      ]
    },
    "ServiceClassTag": {
      "description": "ServiceClassTag holds the tags for a Service Class",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the tag",
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "description": "Value of the tag",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceDetails": {
      "type": "object",
      "properties": {
        "additionalDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdditionalItem"
          },
          "x-go-name": "AdditionalDetails"
        },
        "destinationRules": {
          "$ref": "#/definitions/destinationRules"
        },
        "endpoints": {
          "$ref": "#/definitions/Endpoints"
        },
        "health": {
          "$ref": "#/definitions/ServiceHealth"
        },
        "istioSidecar": {
          "type": "boolean",
          "x-go-name": "IstioSidecar"
        },
        "namespaceMTLS": {
          "$ref": "#/definitions/MTLSStatus"
        },
        "service": {
          "$ref": "#/definitions/Service"
        },
        "validations": {
          "$ref": "#/definitions/IstioValidations"
        },
        "virtualServices": {
          "$ref": "#/definitions/virtualServices"
        },
        "workloads": {
          "$ref": "#/definitions/WorkloadOverviews"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceDomain": {
      "description": "ServiceDomain is the DB object and object model for service domain",
      "type": "object",
      "required": [
        "tenantId",
        "name"
      ],
      "properties": {
        "connected": {
          "description": "ntnx:ignore\nDetermines if the service domain is currently connected to Karbon Platform services management plane.",
          "type": "boolean",
          "x-go-name": "Connected"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "EdgeCluster description",
          "type": "string",
          "x-go-name": "Description"
        },
        "env": {
          "type": "string",
          "x-go-name": "Env",
          "example": "'{\"VAR_1\":\"VALUE_1\",\"VAR_2\",\"VALUE_2\"}'"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "labels": {
          "description": "A list of Category labels for this service domain.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Service domain name.\nMaximum length is limited to 60 characters which must satisfy\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go",
          "type": "string",
          "x-go-name": "Name"
        },
        "profile": {
          "$ref": "#/definitions/ServiceDomainProfile"
        },
        "shortId": {
          "description": "ntnx:ignore\nShortID is the unique ID for the given service domain.\nThis ID must be unique for each service domain, for the given tenant.",
          "type": "string",
          "x-go-name": "ShortID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "ntnx:ignore\nEdge type.",
          "type": "string",
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        },
        "virtualIp": {
          "description": "Virtual IP",
          "type": "string",
          "x-go-name": "VirtualIP"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceDomainGetHandlePayload": {
      "description": "ServiceDomainGetHandlePayload is the payload for get service domain handle call\ntoken: see crypto.GetEdgeHandleToken",
      "type": "object",
      "required": [
        "token",
        "tenantId"
      ],
      "properties": {
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceDomainInfo": {
      "description": "ServiceDomainInfo has service domain information",
      "type": "object",
      "required": [
        "tenantId",
        "svcDomainId"
      ],
      "properties": {
        "artifacts": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Artifacts"
        },
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "features": {
          "$ref": "#/definitions/Features"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "svcDomainId": {
          "description": "ID of the service domain this entity belongs to",
          "type": "string",
          "x-go-name": "SvcDomainID"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceDomainInfoListPayload": {
      "description": "ServiceDomainInfoListPayload is the payload for ServiceDomainInfoListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of service domain info",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDomainInfo"
          },
          "x-go-name": "SvcDomainInfoList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceDomainListPayload": {
      "description": "ServiceDomainListPayload is the payload for ServiceDomainListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of service domains",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDomain"
          },
          "x-go-name": "SvcDomainList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceDomainProfile": {
      "type": "object",
      "title": "ServiceDomainProfile is the object model for service domain profiles.",
      "properties": {
        "AIInferencingService": {
          "$ref": "#/definitions/AIInferencingServiceProfile"
        },
        "enableSSH": {
          "type": "boolean",
          "x-go-name": "EnableSSH"
        },
        "ingressType": {
          "type": "string",
          "enum": [
            "Traefik",
            "NGINX"
          ],
          "x-go-name": "IngressType"
        },
        "privileged": {
          "type": "boolean",
          "x-go-name": "Privileged"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceEntries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceEntry"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceEntry": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "addresses": {
              "type": "object",
              "x-go-name": "Addresses"
            },
            "endpoints": {
              "type": "object",
              "x-go-name": "Endpoints"
            },
            "exportTo": {
              "type": "object",
              "x-go-name": "ExportTo"
            },
            "hosts": {
              "type": "object",
              "x-go-name": "Hosts"
            },
            "location": {
              "type": "object",
              "x-go-name": "Location"
            },
            "ports": {
              "type": "object",
              "x-go-name": "Ports"
            },
            "resolution": {
              "type": "object",
              "x-go-name": "Resolution"
            },
            "subjectAltNames": {
              "type": "object",
              "x-go-name": "SubjectAltNames"
            },
            "workloadSelector": {
              "type": "object",
              "x-go-name": "WorkloadSelector"
            }
          },
          "x-go-name": "ServiceEntrySpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceHealth": {
      "description": "ServiceHealth contains aggregated health from various sources, for a given service",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/RequestHealth"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceInstance": {
      "description": "ServiceInstance holds the Service Instance information",
      "type": "object",
      "required": [
        "tenantId",
        "type",
        "svcVersion",
        "scope",
        "minSvcDomainVersion"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "minSvcDomainVersion": {
          "description": "Minimum version of the Service Domain supporting this Service Class",
          "type": "string",
          "x-go-name": "MinSvcDomainVersion"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Parameters"
        },
        "scope": {
          "$ref": "#/definitions/ServiceClassScopeType"
        },
        "scopeId": {
          "type": "string",
          "x-go-name": "ScopeID"
        },
        "svcClassId": {
          "type": "string",
          "x-go-name": "SvcClassID"
        },
        "svcClassName": {
          "type": "string",
          "x-go-name": "SvcClassName"
        },
        "svcVersion": {
          "description": "Version of the Service Class type",
          "type": "string",
          "x-go-name": "SvcVersion"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Type of the Service Class e.g Kafka",
          "type": "string",
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceInstanceListPayload": {
      "description": "ServiceInstanceListPayload is the payload for ServiceInstanceListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of Service Instances",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          },
          "x-go-name": "SvcInstanceList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceInstanceParam": {
      "description": "ServiceInstanceParam holds the common parameters for creating or updating Service Instance",
      "type": "object",
      "required": [
        "svcClassId",
        "scopeId"
      ],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Parameters"
        },
        "scopeId": {
          "type": "string",
          "x-go-name": "ScopeID"
        },
        "svcClassId": {
          "type": "string",
          "x-go-name": "SvcClassID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceInstanceSchema": {
      "description": "ServiceInstanceSchema holds the schema for Service Instance of the Service Class",
      "type": "object",
      "properties": {
        "create": {
          "$ref": "#/definitions/Schema"
        },
        "update": {
          "$ref": "#/definitions/Schema"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceInstanceStateType": {
      "type": "string",
      "enum": [
        "PROVISIONING",
        "PROVISIONED",
        "FAILED"
      ]
    },
    "ServiceInstanceStatus": {
      "description": "ServiceInstanceStatus represents the status of the Service Instance",
      "type": "object",
      "required": [
        "svcDomainId",
        "state",
        "svcInstanceId"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "properties": {
          "description": "Properties emitted by the instance",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "state": {
          "$ref": "#/definitions/ServiceInstanceStateType"
        },
        "svcDomainId": {
          "type": "string",
          "x-go-name": "SvcDomainID"
        },
        "svcInstanceId": {
          "type": "string",
          "x-go-name": "SvcInstanceID"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceInstanceStatusListPayload": {
      "description": "ServiceInstanceStatusListPayload is the payload for ServiceInstanceStatusListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of Service Instance Status",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstanceStatus"
          },
          "x-go-name": "SvcInstanceStatusList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ServiceList": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceOverview"
          },
          "x-go-name": "Services"
        },
        "validations": {
          "$ref": "#/definitions/IstioValidations"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceMeshPolicies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceMeshPolicy"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceMeshPolicy": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/MeshPolicySpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceMeshRbacConfig": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/ClusterRbacConfigSpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceMeshRbacConfigs": {
      "description": "ServiceMeshRbacConfig is a clone of ClusterRbacPolicy used by Maistra for multitenancy scenarios\nUsed in the same file for easy maintenance",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceMeshRbacConfig"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceName": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceOverview": {
      "type": "object",
      "required": [
        "name",
        "istioSidecar",
        "appLabel"
      ],
      "properties": {
        "additionalDetailSample": {
          "$ref": "#/definitions/AdditionalItem"
        },
        "appLabel": {
          "description": "Has label app",
          "type": "boolean",
          "x-go-name": "AppLabel",
          "example": true
        },
        "istioSidecar": {
          "description": "Define if Pods related to this Service has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "labels": {
          "description": "Labels for Service",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the Service",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews-v1"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceRole": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "rules": {
              "type": "object",
              "x-go-name": "Rules"
            }
          },
          "x-go-name": "ServiceRoleSpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceRoleBinding": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "roleRef": {
              "type": "object",
              "x-go-name": "RoleRef"
            },
            "subjects": {
              "type": "object",
              "x-go-name": "Subjects"
            }
          },
          "x-go-name": "ServiceRoleBindingSpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceRoleBindings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceRoleBinding"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServiceRoles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceRole"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ServicesOverview": {
      "type": "object",
      "properties": {
        "detail": {
          "$ref": "#/definitions/ServiceDetails"
        },
        "graph": {
          "$ref": "#/definitions/GraphConfig"
        },
        "health": {
          "$ref": "#/definitions/ServiceHealth"
        },
        "inbound": {
          "$ref": "#/definitions/DashboardResponse"
        },
        "outbound": {
          "$ref": "#/definitions/DashboardResponse"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "SeverityLevel": {
      "type": "string",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Sidecar": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "egress": {
              "type": "object",
              "x-go-name": "Egress"
            },
            "ingress": {
              "type": "object",
              "x-go-name": "Ingress"
            },
            "localhost": {
              "type": "object",
              "x-go-name": "Localhost"
            },
            "outboundTrafficPolicy": {
              "type": "object",
              "x-go-name": "OutboundTrafficPolicy"
            },
            "workloadSelector": {
              "type": "object",
              "x-go-name": "WorkloadSelector"
            }
          },
          "x-go-name": "SidecarSpec"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Sidecars": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Sidecar"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "SoftwareDownloadCommand": {
      "type": "string",
      "enum": [
        "DOWNLOAD",
        "DOWNLOAD_CANCEL"
      ]
    },
    "SoftwareDownloadCreate": {
      "description": "SoftwareDownloadCreate is the model for triggering downloads",
      "type": "object",
      "properties": {
        "release": {
          "type": "string",
          "x-go-name": "Release"
        },
        "svcDomainIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SvcDomainIDs"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareDownloadUpdate": {
      "description": "SoftwareDownloadUpdate is the model for modifying a download batch like cancel or retry download",
      "type": "object",
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchID"
        },
        "command": {
          "$ref": "#/definitions/SoftwareDownloadCommand"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareDownloadedServiceDomainListPayload": {
      "description": "SoftwareDownloadedServiceDomainListPayload is the payload for batch list REST response",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of service domains with the release downloaded",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SvcDomainList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareRelease": {
      "description": "SoftwareRelease holds the release info",
      "type": "object",
      "required": [
        "release",
        "changelog"
      ],
      "properties": {
        "changelog": {
          "description": "The changes that were made in this release from the previous release",
          "type": "string",
          "x-go-name": "Changelog"
        },
        "release": {
          "description": "This is the release that is avaliable",
          "type": "string",
          "x-go-name": "Release"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareReleaseListPayload": {
      "description": "SoftwareReleaseListPayload is the payload for batch list REST response",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of download batches",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SoftwareRelease"
          },
          "x-go-name": "ReleaseList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareUpdateBatch": {
      "description": "SoftwareUpdateBatch is the model representing the batch download/upgrade response",
      "type": "object",
      "required": [
        "release",
        "id",
        "type"
      ],
      "properties": {
        "createdAt": {
          "description": "Created timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "eta": {
          "description": "ETA in mins",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ETA"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "progress": {
          "description": "Progress in percentage",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Progress"
        },
        "release": {
          "type": "string",
          "x-go-name": "Release"
        },
        "state": {
          "$ref": "#/definitions/SoftwareUpdateStateType"
        },
        "stats": {
          "description": "Count for each stat type",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Stats"
        },
        "type": {
          "$ref": "#/definitions/SoftwareUpdateBatchType"
        },
        "updatedAt": {
          "description": "Record updated timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareUpdateBatchListPayload": {
      "description": "SoftwareUpdateBatchListPayload is the payload for batch list REST response",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of download/upgrade batches",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SoftwareUpdateBatch"
          },
          "x-go-name": "BatchList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareUpdateBatchType": {
      "type": "string",
      "enum": [
        "DOWNLOAD",
        "UPGRADE"
      ]
    },
    "SoftwareUpdateCredentials": {
      "description": "SoftwareUpdateCredentials is the model for credentials to download software release files",
      "type": "object",
      "required": [
        "batchId",
        "release",
        "accessType"
      ],
      "properties": {
        "accessType": {
          "$ref": "#/definitions/SoftwareUpdateCredentialsAccessType"
        },
        "batchId": {
          "type": "string",
          "x-go-name": "BatchID"
        },
        "release": {
          "type": "string",
          "x-go-name": "Release"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareUpdateCredentialsAccessType": {
      "type": "string",
      "enum": [
        "AWS",
        "DOCKER",
        "AWS_ECR"
      ]
    },
    "SoftwareUpdateCredentialsCreatePayload": {
      "description": "SoftwareUpdateCredentialsCreatePayload is the payload for batch list REST response",
      "type": "object",
      "required": [
        "batchId",
        "release",
        "accessType"
      ],
      "properties": {
        "accessType": {
          "$ref": "#/definitions/SoftwareUpdateCredentialsAccessType"
        },
        "batchId": {
          "type": "string",
          "x-go-name": "BatchID"
        },
        "credentials": {
          "description": "Details of the credentials",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Credentials"
        },
        "release": {
          "type": "string",
          "x-go-name": "Release"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareUpdateServiceDomain": {
      "description": "SoftwareUpdateServiceDomain is the model representing the batch download/update response for a service domain",
      "type": "object",
      "required": [
        "release",
        "batchId",
        "svcDomainId"
      ],
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchID"
        },
        "createdAt": {
          "description": "Created timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "eta": {
          "description": "ETA in mins",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ETA"
        },
        "failureReason": {
          "description": "Failure reason if any",
          "type": "string",
          "x-go-name": "FailureReason"
        },
        "isLatestBatch": {
          "description": "Latest batch",
          "type": "boolean",
          "x-go-name": "IsLatestBatch"
        },
        "progress": {
          "description": "Progress in percentage",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Progress"
        },
        "release": {
          "type": "string",
          "x-go-name": "Release"
        },
        "state": {
          "$ref": "#/definitions/SoftwareUpdateStateType"
        },
        "stateUpdatedAt": {
          "description": "State updated timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StateUpdatedAt"
        },
        "svcDomainId": {
          "type": "string",
          "x-go-name": "SvcDomainID"
        },
        "updatedAt": {
          "description": "Record updated timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareUpdateServiceDomainListPayload": {
      "description": "SoftwareUpdateServiceDomainListPayload is the payload for batch list REST response",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of service domain stats",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SoftwareUpdateServiceDomain"
          },
          "x-go-name": "SvcDomainList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareUpdateState": {
      "description": "SoftwareUpdateState is the model for updating state called by service domain (cluster)",
      "type": "object",
      "required": [
        "release",
        "svcDomainId",
        "batchId"
      ],
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchID"
        },
        "createdAt": {
          "description": "Created timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "eta": {
          "description": "ETA in mins",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ETA"
        },
        "failureReason": {
          "description": "Failure reason if any",
          "type": "string",
          "x-go-name": "FailureReason"
        },
        "progress": {
          "description": "Progress in percentage",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Progress"
        },
        "release": {
          "type": "string",
          "x-go-name": "Release"
        },
        "state": {
          "$ref": "#/definitions/SoftwareUpdateStateType"
        },
        "stateUpdatedAt": {
          "description": "State updated timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StateUpdatedAt"
        },
        "svcDomainId": {
          "type": "string",
          "x-go-name": "SvcDomainID"
        },
        "updatedAt": {
          "description": "Record updated timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareUpdateStateType": {
      "type": "string",
      "enum": [
        "DOWNLOAD",
        "DOWNLOADING",
        "DOWNLOAD_CANCEL",
        "DOWNLOAD_CANCELLED",
        "DOWNLOAD_FAILED",
        "DOWNLOADED",
        "UPGRADE",
        "UPGRADING",
        "UPGRADE_FAILED",
        "UPGRADED"
      ]
    },
    "SoftwareUpgradeCommand": {
      "type": "string",
      "enum": [
        "UPGRADE"
      ]
    },
    "SoftwareUpgradeCreate": {
      "description": "SoftwareUpgradeCreate is the model for triggering updates",
      "type": "object",
      "properties": {
        "release": {
          "type": "string",
          "x-go-name": "Release"
        },
        "svcDomainIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SvcDomainIDs"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "SoftwareUpgradeUpdate": {
      "description": "SoftwareUpgradeUpdate is the model for modifying an upgrade batch like retry upgrade",
      "type": "object",
      "required": [
        "batchId",
        "command"
      ],
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchID"
        },
        "command": {
          "$ref": "#/definitions/SoftwareUpgradeCommand"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Span": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Duration"
        },
        "flags": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Flags"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Log"
          },
          "x-go-name": "Logs"
        },
        "operationName": {
          "type": "string",
          "x-go-name": "OperationName"
        },
        "parentSpanID": {
          "$ref": "#/definitions/SpanID"
        },
        "process": {
          "$ref": "#/definitions/Process"
        },
        "processID": {
          "$ref": "#/definitions/ProcessID"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "x-go-name": "References"
        },
        "spanID": {
          "$ref": "#/definitions/SpanID"
        },
        "startTime": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "StartTime"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          },
          "x-go-name": "Tags"
        },
        "traceID": {
          "$ref": "#/definitions/TraceID"
        },
        "traceSize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TraceSize"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Warnings"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "SpanID": {
      "description": "SpanID is the id of a span",
      "type": "string",
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "StatusInfo": {
      "description": "This is used for returning a response of Kiali Status",
      "type": "object",
      "title": "StatusInfo statusInfo",
      "required": [
        "status",
        "externalServices"
      ],
      "properties": {
        "externalServices": {
          "description": "An array of external services installed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/externalServiceInfo"
          },
          "x-go-name": "ExternalServices"
        },
        "status": {
          "description": "The state of Kiali\nA hash of key,values with versions of Kiali and state",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Status"
        },
        "warningMessages": {
          "description": "An array of warningMessages",
          "type": "array",
          "items": {
            "type": "string",
            "example": "Istio version 0.7.1 is not supported, the version should be 0.8.0"
          },
          "x-go-name": "WarningMessages"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "StorageProfile": {
      "type": "object",
      "title": "StorageProfile is the object model for storage profile.",
      "required": [
        "tenantId",
        "name",
        "type"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "ebsStorageConfig": {
          "$ref": "#/definitions/EBSStorageProfileConfig"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "iflagEncrypted": {
          "description": "ntnx:ignore\n\nInternal Flag - encrypted - for internal migration use",
          "type": "boolean",
          "x-go-name": "IFlagEncrypted"
        },
        "isDefault": {
          "description": "Flag to specify if it is default storage profile",
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "description": "Name for the storage profile.",
          "type": "string",
          "x-go-name": "Name"
        },
        "nutanixVolumesConfig": {
          "$ref": "#/definitions/NutanixVolumesStorageProfileConfig"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "type": {
          "description": "Storage type for this Storage profile.",
          "type": "string",
          "enum": [
            "NutanixVolumes",
            "EBS",
            "vSphere"
          ],
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "vSphereStorageConfig": {
          "$ref": "#/definitions/VSphereStorageProfileConfig"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "StorageProfileListResponsePayload": {
      "description": "payload for StorageProfileListResponse",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of storage profiles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StorageProfile"
          },
          "x-go-name": "StorageProfileList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Tenant": {
      "description": "A tenant represents a customer account.\nA tenant may have multiple edges.\nEvery object in DB belonging to a tenant\nwill have a tenantId field.\nTenant object, like every other object\nin DB, will have Id and version fields.\nThe Id and version fields are marked as optional\nbecause they are not required in a create operation.\n\nUse Float b/c convert to map will change int to float64",
      "type": "object",
      "title": "Tenant is the DB object and object model for each tenant.",
      "required": [
        "id",
        "externalId",
        "name",
        "token"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "Tenant description. Up to 200 characters.",
          "type": "string",
          "x-go-name": "Description"
        },
        "externalId": {
          "description": "Unique tenant ID returned by my.nutanix.com.",
          "type": "string",
          "x-go-name": "ExternalID"
        },
        "id": {
          "description": "Unique ID to identify the tenant, which.\ncan be supplied during create or DB generated.\nFor Nice we will have fixed tenant id such as\ntenant-id-waldot\ntenant-id-rocket-blue",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Tenant name.\nFor example, WalDot, Rocket Blue, and so on. Up to 200 characters.",
          "type": "string",
          "x-go-name": "Name"
        },
        "profile": {
          "$ref": "#/definitions/TenantProfile"
        },
        "token": {
          "description": "Unique token for a tenant.\nUsed in authentication.",
          "type": "string",
          "x-go-name": "Token"
        },
        "updatedAt": {
          "description": "ntnx:ignore",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "Version number of object maintained by DB.\nNot currently used.",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "TenantInfo": {
      "description": "TenantInfo info about tenant returned by GET tenant call",
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "description": "Unique ID to identify the tenant",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Tenant name.",
          "type": "string",
          "x-go-name": "Name"
        },
        "profile": {
          "$ref": "#/definitions/TenantProfile"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "TenantProfile": {
      "type": "object",
      "title": "TenantProfile is the object model for tenant profiles.",
      "properties": {
        "allowCliSSH": {
          "type": "boolean",
          "x-go-name": "AllowCliSSH"
        },
        "enableSSH": {
          "type": "boolean",
          "x-go-name": "EnableSSH"
        },
        "privileged": {
          "type": "boolean",
          "x-go-name": "Privileged"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "TenantProps": {
      "description": "TenantProps provides a mechanism to store ad hoc per tenant properties\nas a JSON object.\nAn example use case is to use the properties to store whether cloud management console\nonboarding is performed for a given tenant.",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "props": {
          "$ref": "#/definitions/JSONText"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "ThreeScaleHandler": {
      "description": "ThreeScaleHAndler represents the minimal info that a user needs to know from the UI to link a service with 3Scale site",
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "serviceId": {
          "type": "string",
          "x-go-name": "ServiceId"
        },
        "systemUrl": {
          "type": "string",
          "x-go-name": "SystemUrl"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ThreeScaleHandlers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ThreeScaleHandler"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ThreeScaleInfo": {
      "description": "ThreeScaleInfo shows if 3scale adapter is enabled in cluster and if user has permissions on adapter's configuration",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "permissions": {
          "$ref": "#/definitions/ResourcePermissions"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "ThreeScaleServiceRule": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "serviceNamespace": {
          "type": "string",
          "x-go-name": "ServiceNamespace"
        },
        "threeScaleHandlerName": {
          "type": "string",
          "x-go-name": "ThreeScaleHandlerName"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "Time": {
      "description": "+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false",
      "type": "object",
      "title": "Time is a wrapper around time.Time which supports correct\nmarshaling to YAML and JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.",
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "Trace": {
      "description": "Trace is a list of spans",
      "type": "object",
      "properties": {
        "processes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Process"
          },
          "x-go-name": "Processes"
        },
        "spans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Span"
          },
          "x-go-name": "Spans"
        },
        "traceID": {
          "$ref": "#/definitions/TraceID"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Warnings"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "TraceID": {
      "type": "string",
      "title": "TraceID is the shared trace ID of all spans in the trace.",
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "TransformationArgs": {
      "type": "object",
      "title": "TransformationArgs - ID and args info for use of  transformation in DataStream.",
      "required": [
        "transformationId",
        "args"
      ],
      "properties": {
        "args": {
          "description": "Array of script param values for the transformation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptParamValue"
          },
          "x-go-name": "Args"
        },
        "transformationId": {
          "description": "ID for the transformation",
          "type": "string",
          "x-go-name": "TransformationID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "UID": {
      "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
      "type": "string",
      "x-go-package": "k8s.io/apimachinery/pkg/types"
    },
    "UpdateDocumentResponse": {
      "description": "UpdateDocumentResponse - update document response struct",
      "type": "object",
      "required": [
        "_id"
      ],
      "properties": {
        "_id": {
          "description": "ID of the updated entity",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "UpdateDocumentResponseV2": {
      "description": "UpdateDocumentResponseV2 - update document response struct",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the updated entity",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "User": {
      "description": "User\nUser of Sherlock system.",
      "type": "object",
      "title": "User is object model for user",
      "required": [
        "tenantId",
        "email",
        "name",
        "password"
      ],
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "email": {
          "description": "Email of user",
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "description": "User name",
          "type": "string",
          "x-go-name": "Name"
        },
        "password": {
          "description": "SHA-256 hash of user password",
          "type": "string",
          "x-go-name": "Password"
        },
        "role": {
          "description": "User role.",
          "type": "string",
          "enum": [
            "INFRA_ADMIN",
            "USER"
          ],
          "x-go-name": "Role"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore\ntimestamp feature supported by DB",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "description": "ntnx:ignore\nVersion of entity, implemented using timestamp in nano seconds\nThis is set to float64 since JSON numbers are floating point\nMay lose precision due to truncation but should have milli-second precision",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "UserApiToken": {
      "type": "object",
      "required": [
        "userId",
        "active"
      ],
      "properties": {
        "active": {
          "description": "Whether the token is active",
          "type": "boolean",
          "x-go-name": "Active"
        },
        "createdAt": {
          "description": "created at timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID of the user API token",
          "type": "string",
          "x-go-name": "ID"
        },
        "tenantId": {
          "description": "ntnx:ignore\nTenant ID",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "updated at timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "usedAt": {
          "description": "last used timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UsedAt"
        },
        "userId": {
          "description": "User ID",
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "UserApiTokenCreatePayload": {
      "type": "object",
      "required": [
        "active"
      ],
      "properties": {
        "active": {
          "description": "Whether the token is active",
          "type": "boolean",
          "x-go-name": "Active"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "UserApiTokenCreated": {
      "type": "object",
      "required": [
        "id",
        "tenantId",
        "userId",
        "token"
      ],
      "properties": {
        "id": {
          "description": "ID of the user API token",
          "type": "string",
          "x-go-name": "ID"
        },
        "tenantId": {
          "description": "Tenant ID",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "token": {
          "description": "JWT token. User must save away this token.\nKarbon Platform Services does not store this token and it will not be returned\nby any subsequent API calls.",
          "type": "string",
          "x-go-name": "Token"
        },
        "userId": {
          "description": "User ID",
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "UserListPayload": {
      "description": "payload for UserListResponseV2",
      "type": "object",
      "required": [
        "pageIndex",
        "pageSize",
        "totalCount",
        "result"
      ],
      "properties": {
        "orderBy": {
          "description": "Specify result order. Zero or more entries with format: \u0026ltkey\u003e [desc]\nwhere orderByKeys lists allowed keys in each response.",
          "type": "string",
          "x-go-name": "OrderBy"
        },
        "orderByKeys": {
          "description": "Keys that can be used in orderBy.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrderByKeys"
        },
        "pageIndex": {
          "description": "0-based index of the page to fetch results.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageIndex"
        },
        "pageSize": {
          "description": "Item count of each page.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "list of users",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "UserList"
        },
        "totalCount": {
          "description": "Count of all items matching the query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "UserProps": {
      "description": "UserProps provides mechanism to store ad hoc per user properties\nas a JSON object.\nAn example use case is to use the props to store whether UI on-boarding\nis done for a given user.",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "ntnx:ignore",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "props": {
          "$ref": "#/definitions/JSONText"
        },
        "tenantId": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "ntnx:ignore",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "user_id": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "UserID"
        },
        "version": {
          "description": "ntnx:ignore",
          "type": "number",
          "format": "double",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "UserPublicKey": {
      "type": "object",
      "required": [
        "id",
        "tenantId",
        "publicKey",
        "createdAt",
        "updatedAt",
        "usedAt"
      ],
      "properties": {
        "createdAt": {
          "description": "created at timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID of the user",
          "type": "string",
          "x-go-name": "ID"
        },
        "publicKey": {
          "description": "Public Key of the user",
          "type": "string",
          "x-go-name": "PublicKey"
        },
        "tenantId": {
          "description": "Tenant ID of the user",
          "type": "string",
          "x-go-name": "TenantID"
        },
        "updatedAt": {
          "description": "updated at timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "usedAt": {
          "description": "last used timestamp",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UsedAt"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "UserPublicKeyUpdatePayload": {
      "type": "object",
      "required": [
        "publicKey"
      ],
      "properties": {
        "publicKey": {
          "description": "Public Key of the user",
          "type": "string",
          "x-go-name": "PublicKey"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "VSphereStorageProfileConfig": {
      "type": "object",
      "title": "VSphereStorageProfileConfig - struct for VMware Vsphere Storage Profile config.",
      "x-go-package": "cloudservices/common/model"
    },
    "ValueType": {
      "type": "string",
      "title": "ValueType is the type of a value stored in KeyValue struct.",
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "WSMessagingLogStream": {
      "description": "swagger: model WSMessagingLogStream",
      "type": "object",
      "title": "WSMessagingLogStream is part of the websocket message sent\nto the edge to start streaming logs.",
      "properties": {
        "LogStreamInfo": {
          "$ref": "#/definitions/LogStream"
        },
        "ProjectID": {
          "type": "string"
        },
        "URL": {
          "type": "string"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "Workload": {
      "description": "Workload has the details of a workload",
      "type": "object",
      "required": [
        "name",
        "type",
        "createdAt",
        "resourceVersion",
        "istioSidecar",
        "appLabel",
        "versionLabel",
        "podCount",
        "desiredReplicas",
        "currentReplicas",
        "availableReplicas"
      ],
      "properties": {
        "additionalDetailSample": {
          "$ref": "#/definitions/AdditionalItem"
        },
        "additionalDetails": {
          "description": "Additional details to display, such as configured annotations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdditionalItem"
          },
          "x-go-name": "AdditionalDetails"
        },
        "appLabel": {
          "description": "Define if Pods related to this Workload has the label App",
          "type": "boolean",
          "x-go-name": "AppLabel",
          "example": true
        },
        "availableReplicas": {
          "description": "Number of available replicas",
          "type": "integer",
          "format": "int32",
          "x-go-name": "AvailableReplicas",
          "example": 1
        },
        "createdAt": {
          "description": "Creation timestamp (in RFC3339 format)",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2018-07-31T12:24:17Z"
        },
        "currentReplicas": {
          "description": "Number of current replicas pods that matches controller selector labels",
          "type": "integer",
          "format": "int32",
          "x-go-name": "CurrentReplicas",
          "example": 2
        },
        "desiredReplicas": {
          "description": "Number of desired replicas defined by the user in the controller Spec",
          "type": "integer",
          "format": "int32",
          "x-go-name": "DesiredReplicas",
          "example": 2
        },
        "istioSidecar": {
          "description": "Define if Pods related to this Workload has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "labels": {
          "description": "Workload labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the workload",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews-v1"
        },
        "podCount": {
          "description": "Number of current workload pods",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PodCount",
          "example": 1
        },
        "pods": {
          "$ref": "#/definitions/Pods"
        },
        "resourceVersion": {
          "description": "Kubernetes ResourceVersion",
          "type": "string",
          "x-go-name": "ResourceVersion",
          "example": "192892127"
        },
        "runtimes": {
          "description": "Runtimes and associated dashboards",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Runtime"
          },
          "x-go-name": "Runtimes"
        },
        "services": {
          "$ref": "#/definitions/Services"
        },
        "type": {
          "description": "Type of the workload",
          "type": "string",
          "x-go-name": "Type",
          "example": "deployment"
        },
        "versionLabel": {
          "description": "Define if Pods related to this Workload has the label Version",
          "type": "boolean",
          "x-go-name": "VersionLabel",
          "example": true
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "WorkloadHealth": {
      "description": "WorkloadHealth contains aggregated health from various sources, for a given workload",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/RequestHealth"
        },
        "workloadStatus": {
          "$ref": "#/definitions/WorkloadStatus"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "WorkloadItem": {
      "type": "object",
      "required": [
        "workloadName",
        "istioSidecar"
      ],
      "properties": {
        "istioSidecar": {
          "description": "Define if all Pods related to the Workload has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "workloadName": {
          "description": "Name of a workload member of an application",
          "type": "string",
          "x-go-name": "WorkloadName",
          "example": "reviews-v1"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "WorkloadList": {
      "type": "object",
      "required": [
        "namespace",
        "workloads"
      ],
      "properties": {
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "workloads": {
          "description": "Workloads for a given namespace",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadListItem"
          },
          "x-go-name": "Workloads"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "WorkloadListItem": {
      "description": "WorkloadListItem has the necessary information to display the console workload list",
      "type": "object",
      "required": [
        "name",
        "type",
        "createdAt",
        "resourceVersion",
        "istioSidecar",
        "appLabel",
        "versionLabel",
        "podCount"
      ],
      "properties": {
        "additionalDetailSample": {
          "$ref": "#/definitions/AdditionalItem"
        },
        "appLabel": {
          "description": "Define if Pods related to this Workload has the label App",
          "type": "boolean",
          "x-go-name": "AppLabel",
          "example": true
        },
        "createdAt": {
          "description": "Creation timestamp (in RFC3339 format)",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2018-07-31T12:24:17Z"
        },
        "istioSidecar": {
          "description": "Define if Pods related to this Workload has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "labels": {
          "description": "Workload labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the workload",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews-v1"
        },
        "podCount": {
          "description": "Number of current workload pods",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PodCount",
          "example": 1
        },
        "resourceVersion": {
          "description": "Kubernetes ResourceVersion",
          "type": "string",
          "x-go-name": "ResourceVersion",
          "example": "192892127"
        },
        "type": {
          "description": "Type of the workload",
          "type": "string",
          "x-go-name": "Type",
          "example": "deployment"
        },
        "versionLabel": {
          "description": "Define if Pods related to this Workload has the label Version",
          "type": "boolean",
          "x-go-name": "VersionLabel",
          "example": true
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "WorkloadOverview": {
      "type": "object",
      "properties": {
        "detail": {
          "$ref": "#/definitions/Workload"
        },
        "graph": {
          "$ref": "#/definitions/GraphConfig"
        },
        "health": {
          "$ref": "#/definitions/WorkloadHealth"
        },
        "inbound": {
          "$ref": "#/definitions/DashboardResponse"
        },
        "outbound": {
          "$ref": "#/definitions/DashboardResponse"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "WorkloadOverviews": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/WorkloadListItem"
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "WorkloadStatus": {
      "description": "WorkloadStatus gives\nnumber of desired replicas defined in the Spec of a controller\nnumber of current replicas that matches selector of a controller\nnumber of available replicas for a given workload\nIn healthy scenarios all variables should point same value.\nWhen something wrong happens the different values can indicate an unhealthy situation.\ni.e.\ndesired = 1, current = 10, available = 0 would means that a user scaled down a workload from 10 to 1\nbut in the operaton 10 pods showed problems, so no pod is available/ready but user will see 10 pods under a workload",
      "type": "object",
      "properties": {
        "availableReplicas": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "AvailableReplicas"
        },
        "currentReplicas": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "CurrentReplicas"
        },
        "desiredReplicas": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "DesiredReplicas"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "WstunPayload": {
      "type": "object",
      "required": [
        "serviceDomainId",
        "tenantId",
        "port",
        "expiration",
        "publicKey",
        "privateKey"
      ],
      "properties": {
        "endpoint": {
          "description": "ntnx:ignore\noptional: endpoint = ip:port, if empty, ssh is assumed",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "expiration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Expiration"
        },
        "port": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Port"
        },
        "privateKey": {
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "publicKey": {
          "type": "string",
          "x-go-name": "PublicKey"
        },
        "serviceDomainId": {
          "type": "string",
          "x-go-name": "ServiceDomainID"
        },
        "skipCertVerification": {
          "description": "ntnx:ignore\noptional: whether to skip TLS certification verification for endpoint,\nonly relevant when TLSEndpoint is true",
          "type": "boolean",
          "x-go-name": "SkipCertVerification"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "tlsEndpoint": {
          "description": "ntnx:ignore\noptional: whether the endpoint is TLS, only for non ssh",
          "type": "boolean",
          "x-go-name": "TLSEndpoint"
        },
        "url": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "WstunRequest": {
      "type": "object",
      "required": [
        "serviceDomainId"
      ],
      "properties": {
        "endpoint": {
          "description": "ntnx:ignore\noptional: endpoint = ip:port, if empty, ssh is assumed",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "serviceDomainId": {
          "type": "string",
          "x-go-name": "ServiceDomainID"
        },
        "skipCertVerification": {
          "description": "ntnx:ignore\noptional: whether to skip TLS certification verification for endpoint,\nonly relevant when TLSEndpoint is true",
          "type": "boolean",
          "x-go-name": "SkipCertVerification"
        },
        "tlsEndpoint": {
          "description": "ntnx:ignore\noptional: whether the endpoint is TLS, only for non ssh",
          "type": "boolean",
          "x-go-name": "TLSEndpoint"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "WstunTeardownRequest": {
      "type": "object",
      "required": [
        "serviceDomainId",
        "publicKey"
      ],
      "properties": {
        "endpoint": {
          "description": "ntnx:ignore",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "publicKey": {
          "type": "string",
          "x-go-name": "PublicKey"
        },
        "serviceDomainId": {
          "type": "string",
          "x-go-name": "ServiceDomainID"
        }
      },
      "x-go-package": "cloudservices/common/model"
    },
    "attributeManifest": {
      "description": "This is used for returning an AttributeManifest",
      "type": "object",
      "title": "AttributeManifest attributeManifest",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "x-go-name": "Attributes"
            },
            "name": {
              "type": "object",
              "x-go-name": "Name"
            },
            "revision": {
              "type": "object",
              "x-go-name": "Revision"
            }
          },
          "x-go-name": "AttributeManifestSpec"
        }
      },
      "x-go-name": "AttributeManifest",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "attributeManifests": {
      "description": "This is used for returning an array of AttributeManifest",
      "type": "array",
      "title": "AttributeManifests attributeManifests",
      "items": {
        "$ref": "#/definitions/attributeManifest"
      },
      "x-go-name": "AttributeManifests",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "authorizationPolicies": {
      "description": "This is used for returning an array of AuthorizationPolicies",
      "type": "array",
      "title": "AuthorizationPolicies authorizationPolicies",
      "items": {
        "$ref": "#/definitions/authorizationPolicy"
      },
      "x-go-name": "AuthorizationPolicies",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "authorizationPolicy": {
      "description": "This is used for returning an AuthorizationPolicy",
      "type": "object",
      "title": "AuthorizationPolicy authorizationPolicy",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "action": {
              "type": "object",
              "x-go-name": "Action"
            },
            "rules": {
              "type": "object",
              "x-go-name": "Rules"
            },
            "selector": {
              "type": "object",
              "x-go-name": "Selector"
            }
          },
          "x-go-name": "AuthorizationPolicySpec"
        }
      },
      "x-go-name": "AuthorizationPolicy",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "destinationRule": {
      "description": "This is used for returning a DestinationRule",
      "type": "object",
      "title": "DestinationRule destinationRule",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "exportTo": {
              "type": "object",
              "x-go-name": "ExportTo"
            },
            "host": {
              "type": "object",
              "x-go-name": "Host"
            },
            "subsets": {
              "type": "object",
              "x-go-name": "Subsets"
            },
            "trafficPolicy": {
              "type": "object",
              "x-go-name": "TrafficPolicy"
            }
          },
          "x-go-name": "DestinationRuleSpec"
        }
      },
      "x-go-name": "DestinationRule",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "destinationRules": {
      "description": "This is used for returning an array of DestinationRules",
      "type": "object",
      "title": "DestinationRules destinationRules",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/destinationRule"
          },
          "x-go-name": "Items"
        },
        "permissions": {
          "$ref": "#/definitions/ResourcePermissions"
        }
      },
      "x-go-name": "DestinationRules",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "envoyFilter": {
      "description": "This is used for returning an EnvoyFilter",
      "type": "object",
      "title": "EnvoyFilter envoyFilter",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "configPatches": {
              "type": "object",
              "x-go-name": "ConfigPatches"
            },
            "workloadSelector": {
              "type": "object",
              "x-go-name": "WorkloadSelector"
            }
          },
          "x-go-name": "EnvoyFilterSpec"
        }
      },
      "x-go-name": "EnvoyFilter",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "envoyFilters": {
      "description": "This is used for returning an array of EnvoyFilter",
      "type": "array",
      "title": "EnvoyFilters envoyFilters",
      "items": {
        "$ref": "#/definitions/envoyFilter"
      },
      "x-go-name": "EnvoyFilters",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "externalServiceInfo": {
      "description": "This is used for returning a response of Kiali Status",
      "type": "object",
      "title": "Status response model",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the service",
          "type": "string",
          "x-go-name": "Name",
          "example": "Istio"
        },
        "url": {
          "description": "The service url",
          "type": "string",
          "x-go-name": "Url",
          "example": "jaeger-query-istio-system.127.0.0.1.nip.io"
        },
        "version": {
          "description": "The installed version of the service",
          "type": "string",
          "x-go-name": "Version",
          "example": "0.8.0"
        }
      },
      "x-go-name": "ExternalServiceInfo",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "httpApiSpec": {
      "description": "This is used for returning an HttpApiSpec",
      "type": "object",
      "title": "HttpApiSpec httpApiSpec",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "apiKeys": {
              "type": "object",
              "x-go-name": "ApiKeys"
            },
            "attributes": {
              "type": "object",
              "x-go-name": "Attributes"
            },
            "patterns": {
              "type": "object",
              "x-go-name": "Patterns"
            }
          },
          "x-go-name": "HttpApiSubSpec"
        }
      },
      "x-go-name": "HttpApiSpec",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "httpApiSpecBinding": {
      "description": "This is used for returning an HttpApiSpecBinding",
      "type": "object",
      "title": "HttpApiSpecBinding httpApiSpecBinding",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "apiSpecs": {
              "type": "object",
              "x-go-name": "ApiSpecs"
            },
            "services": {
              "type": "object",
              "x-go-name": "Services"
            }
          },
          "x-go-name": "HttpApiSpecBindingSpec"
        }
      },
      "x-go-name": "HttpApiSpecBinding",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "httpApiSpecBindings": {
      "description": "This is used for returning an array of HttpApiSpecBinding",
      "type": "array",
      "title": "HttpApiSpecBindings httpApiSpecBindings",
      "items": {
        "$ref": "#/definitions/httpApiSpecBinding"
      },
      "x-go-name": "HttpApiSpecBindings",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "httpApiSpecs": {
      "description": "This is used for returning an array of HttpApiSpec",
      "type": "array",
      "title": "HttpApiSpecs httpApiSpecs",
      "items": {
        "$ref": "#/definitions/httpApiSpec"
      },
      "x-go-name": "HttpApiSpecs",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "istioAdapter": {
      "description": "This type type is used for returning a IstioAdapter",
      "type": "object",
      "title": "IstioAdapter istioAdapter",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "x-go-name": "IstioAdapterSpec"
        }
      },
      "x-go-name": "IstioAdapter",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "istioAdapters": {
      "description": "This type type is used for returning an array of IstioAdapters",
      "type": "array",
      "title": "IstioAdapters istioAdapters",
      "items": {
        "$ref": "#/definitions/istioAdapter"
      },
      "x-go-name": "IstioAdapters",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "istioHandler": {
      "description": "This type type is used for returning a IstioHandler",
      "type": "object",
      "title": "IstioHandler istioHandler",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "x-go-name": "IstioHandlerSpec"
        }
      },
      "x-go-name": "IstioHandler",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "istioHandlers": {
      "description": "This type type is used for returning an array of IstioHandlers",
      "type": "array",
      "title": "IstioHandlers istioHandlers",
      "items": {
        "$ref": "#/definitions/istioHandler"
      },
      "x-go-name": "IstioHandlers",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "istioInstance": {
      "description": "This type type is used for returning a IstioInstance",
      "type": "object",
      "title": "IstioInstance istioInstance",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "x-go-name": "IstioInstanceSpec"
        }
      },
      "x-go-name": "IstioInstance",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "istioInstances": {
      "description": "This type type is used for returning an array of IstioInstances",
      "type": "array",
      "title": "IstioInstances istioInstances",
      "items": {
        "$ref": "#/definitions/istioInstance"
      },
      "x-go-name": "IstioInstances",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "istioRule": {
      "description": "This type type is used for returning a IstioRule",
      "type": "object",
      "title": "IstioRule istioRule",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "actions": {
              "type": "object",
              "x-go-name": "Actions"
            },
            "match": {
              "type": "object",
              "x-go-name": "Match"
            }
          },
          "x-go-name": "IstioRuleSpec"
        }
      },
      "x-go-name": "IstioRule",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "istioRules": {
      "description": "This type type is used for returning an array of IstioRules",
      "type": "array",
      "title": "IstioRules istioRules",
      "items": {
        "$ref": "#/definitions/istioRule"
      },
      "x-go-name": "IstioRules",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "istioTemplate": {
      "description": "This type type is used for returning a IstioTemplate",
      "type": "object",
      "title": "IstioTemplate istioTemplate",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "x-go-name": "IstioTemplateSpec"
        }
      },
      "x-go-name": "IstioTemplate",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "istioTemplates": {
      "description": "This type type is used for returning an array of IstioTemplates",
      "type": "array",
      "title": "IstioTemplates istioTemplates",
      "items": {
        "$ref": "#/definitions/istioTemplate"
      },
      "x-go-name": "IstioTemplates",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "namespace": {
      "description": "A Namespace provide a scope for names\nThis type is used to describe a set of objects.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "labels": {
          "description": "Labels for Namespace",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "The id of the namespace.",
          "type": "string",
          "x-go-name": "Name",
          "example": "istio-system"
        }
      },
      "x-go-name": "Namespace",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "peerAuthentication": {
      "description": "This is used for returning an PeerAuthentication",
      "type": "object",
      "title": "PeerAuthentication peerAuthentication",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "mtls": {
              "type": "object",
              "x-go-name": "Mtls"
            },
            "portLevelMtls": {
              "type": "object",
              "x-go-name": "PortLevelMtls"
            },
            "selector": {
              "type": "object",
              "x-go-name": "Selector"
            }
          },
          "x-go-name": "PeerAuthenticationSpec"
        }
      },
      "x-go-name": "PeerAuthentication",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "peerAuthentications": {
      "description": "This is used for returning an array of PeerAuthentication",
      "type": "array",
      "title": "PeerAuthentications peerAuthentications",
      "items": {
        "$ref": "#/definitions/peerAuthentication"
      },
      "x-go-name": "PeerAuthentications",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "requestAuthentication": {
      "description": "This is used for returning an RequestAuthentication",
      "type": "object",
      "title": "RequestAuthentication requestAuthentication",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "jwtRules": {
              "type": "object",
              "x-go-name": "JwtRules"
            },
            "selector": {
              "type": "object",
              "x-go-name": "Selector"
            }
          },
          "x-go-name": "RequestAuthenticationSpec"
        }
      },
      "x-go-name": "RequestAuthentication",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "requestAuthentications": {
      "description": "This is used for returning an array of RequestAuthentication",
      "type": "array",
      "title": "RequestAuthentications requestAuthentications",
      "items": {
        "$ref": "#/definitions/requestAuthentication"
      },
      "x-go-name": "RequestAuthentications",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "virtualService": {
      "description": "This type is used for returning a VirtualService",
      "type": "object",
      "title": "VirtualService virtualService",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "exportTo": {
              "type": "object",
              "x-go-name": "ExportTo"
            },
            "gateways": {
              "type": "object",
              "x-go-name": "Gateways"
            },
            "hosts": {
              "type": "object",
              "x-go-name": "Hosts"
            },
            "http": {
              "type": "object",
              "x-go-name": "Http"
            },
            "tcp": {
              "type": "object",
              "x-go-name": "Tcp"
            },
            "tls": {
              "type": "object",
              "x-go-name": "Tls"
            }
          },
          "x-go-name": "VirtualServiceSpec"
        }
      },
      "x-go-name": "VirtualService",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "virtualServices": {
      "description": "This type is used for returning an array of VirtualServices with some permission flags",
      "type": "object",
      "title": "VirtualServices virtualServices",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualService"
          },
          "x-go-name": "Items"
        },
        "permissions": {
          "$ref": "#/definitions/ResourcePermissions"
        }
      },
      "x-go-name": "VirtualServices",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "workloadEntries": {
      "description": "This is used for returning an array of WorkloadEntry",
      "type": "array",
      "title": "WorkloadEntries workloadEntries",
      "items": {
        "$ref": "#/definitions/workloadEntry"
      },
      "x-go-name": "WorkloadEntries",
      "x-go-package": "cloudservices/cloudmgmt/router"
    },
    "workloadEntry": {
      "description": "This is used for returning an WorkloadEntry",
      "type": "object",
      "title": "WorkloadEntry workloadEntry",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "address": {
              "type": "object",
              "x-go-name": "Address"
            },
            "labels": {
              "type": "object",
              "x-go-name": "Labels"
            },
            "locality": {
              "type": "object",
              "x-go-name": "Locality"
            },
            "network": {
              "type": "object",
              "x-go-name": "Network"
            },
            "ports": {
              "type": "object",
              "x-go-name": "Ports"
            },
            "serviceAccount": {
              "type": "object",
              "x-go-name": "ServiceAccount"
            },
            "weight": {
              "type": "object",
              "x-go-name": "Weight"
            }
          },
          "x-go-name": "WorkloadEntrySpec"
        }
      },
      "x-go-name": "WorkloadEntry",
      "x-go-package": "cloudservices/cloudmgmt/router"
    }
  },
  "responses": {
    "APIError": {
      "description": "generic API error response",
      "schema": {
        "$ref": "#/definitions/APIErrorPayload"
      }
    },
    "AggregateInfo": {
      "description": "AggregateInfo is aggregate query response item",
      "headers": {
        "doc_count": {
          "type": "integer",
          "format": "int64",
          "description": "required: true"
        },
        "key": {
          "type": "string",
          "description": "required: true"
        }
      }
    },
    "ApplicationGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Application"
      }
    },
    "ApplicationGetResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ApplicationV2"
      }
    },
    "ApplicationListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Application"
        }
      }
    },
    "ApplicationListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ApplicationListResponsePayload"
      }
    },
    "ApplicationStatusListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ApplicationStatus"
        }
      }
    },
    "ApplicationStatusListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ApplicationStatusListPayload"
      }
    },
    "AuditLogGetResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/AuditLog"
        }
      }
    },
    "AuditLogListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/AuditLogListResponsePayload"
      }
    },
    "AuditLogV2ListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/AuditLogV2"
        }
      }
    },
    "CategoryGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Category"
      }
    },
    "CategoryListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Category"
        }
      }
    },
    "CategoryListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/CategoryListResponsePayload"
      }
    },
    "CategoryUsageGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/CategoryDetailUsageInfo"
      }
    },
    "CategoryUsageListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CategoryUsageInfo"
        }
      }
    },
    "CertificatesCreateResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Certificates"
      }
    },
    "CloudCredsGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/CloudCreds"
      }
    },
    "CloudCredsListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CloudCreds"
        }
      }
    },
    "CloudCredsListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/CloudCredsListResponsePayload"
      }
    },
    "CloudProfileGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/CloudProfile"
      }
    },
    "CloudProfileListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/CloudProfileListResponsePayload"
      }
    },
    "CommonAggregatesResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/AggregateInfo"
        }
      }
    },
    "CommonNestedAggregatesResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/AggregateInfo"
        }
      }
    },
    "ContainerRegistryGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ContainerRegistry"
      }
    },
    "ContainerRegistryGetResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ContainerRegistryV2"
      }
    },
    "ContainerRegistryListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ContainerRegistry"
        }
      }
    },
    "ContainerRegistryListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ContainerRegistryListPayload"
      }
    },
    "CreateDocumentResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/CreateDocumentResponse"
      }
    },
    "CreateDocumentResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/CreateDocumentResponseV2"
      }
    },
    "DataDriverClassGetResponse": {
      "description": "DataDriverClassGetResponse is a data driver class get response",
      "schema": {
        "$ref": "#/definitions/DataDriverClass"
      }
    },
    "DataDriverClassListResponse": {
      "description": "DataDriverClassListResponse is a a data driver class listing response",
      "schema": {
        "$ref": "#/definitions/DataDriverClassListResponsePayload"
      }
    },
    "DataDriverConfigGetResponse": {
      "description": "DataDriverConfigGetResponse is a data driver config get response",
      "schema": {
        "$ref": "#/definitions/DataDriverConfig"
      }
    },
    "DataDriverConfigListResponse": {
      "description": "DataDriverConfigListResponse is a a data driver config listing response",
      "schema": {
        "$ref": "#/definitions/DataDriverConfigListResponsePayload"
      }
    },
    "DataDriverInstanceGetResponse": {
      "description": "DataDriverInstanceGetResponse is a data driver instance get response",
      "schema": {
        "$ref": "#/definitions/DataDriverInstance"
      }
    },
    "DataDriverInstanceListResponse": {
      "description": "DataDriverInstanceListResponse is a a data driver instance listing response",
      "schema": {
        "$ref": "#/definitions/DataDriverInstanceListResponsePayload"
      }
    },
    "DataPipelineGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DataPipeline"
      }
    },
    "DataPipelineListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DataPipelineListPayload"
      }
    },
    "DataSourceGetArtifactResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DataSourceArtifact"
      }
    },
    "DataSourceGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DataSource"
      }
    },
    "DataSourceGetResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DataSourceV2"
      }
    },
    "DataSourceListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/DataSource"
        }
      }
    },
    "DataSourceListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DataSourceListPayload"
      }
    },
    "DataStreamGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DataStream"
      }
    },
    "DataStreamListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/DataStream"
        }
      }
    },
    "DataStreamListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DataStreamListPayload"
      }
    },
    "DeleteDocumentResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DeleteDocumentResponse"
      }
    },
    "DeleteDocumentResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DeleteDocumentResponseV2"
      }
    },
    "DockerProfileGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DockerProfile"
      }
    },
    "DockerProfileListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/DockerProfile"
        }
      }
    },
    "DockerProfileListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/DockerProfileListPayload"
      }
    },
    "EdgeCertGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeCert"
      }
    },
    "EdgeCertListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/EdgeCert"
        }
      }
    },
    "EdgeCertListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeCertListPayload"
      }
    },
    "EdgeClusterGetHandleResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeCert"
      }
    },
    "EdgeClusterGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeCluster"
      }
    },
    "EdgeClusterListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeClusterListPayload"
      }
    },
    "EdgeDeviceGetBySerialNumberResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeDeviceWithClusterInfo"
      }
    },
    "EdgeDeviceGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeDevice"
      }
    },
    "EdgeDeviceInfoGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeDeviceInfo"
      }
    },
    "EdgeDeviceInfoListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/EdgeDeviceInfoListPayload"
        }
      }
    },
    "EdgeDeviceInfoListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeDeviceInfoListPayload"
      }
    },
    "EdgeDeviceListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeDeviceListPayload"
      }
    },
    "EdgeGetBySerialNumberResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Edge"
      }
    },
    "EdgeGetHandleResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeCert"
      }
    },
    "EdgeGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Edge"
      }
    },
    "EdgeGetResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeV2"
      }
    },
    "EdgeInfoGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeUsageInfo"
      }
    },
    "EdgeInfoListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/EdgeUsageInfo"
        }
      }
    },
    "EdgeInfoListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeInfoListPayload"
      }
    },
    "EdgeListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Edge"
        }
      }
    },
    "EdgeListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeListPayload"
      }
    },
    "EdgeUpgradeCompatibleListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/EdgeUpgradeCore"
        }
      }
    },
    "EdgeUpgradeGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeUpgrade"
      }
    },
    "EdgeUpgradeListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/EdgeUpgradeCore"
        }
      }
    },
    "EdgeUpgradeListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeUpgradeListPayload"
      }
    },
    "EmptyResponse": {
      "description": "Ok"
    },
    "EventListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "FunctionGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Function"
      }
    },
    "FunctionListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/FunctionListPayload"
      }
    },
    "GetApplicationContainersResponse": {
      "description": "GetApplicationContainersResponse is the API response that\nreturns a list of container names for a given app on a given edge.",
      "schema": {
        "$ref": "#/definitions/ApplicationContainers"
      }
    },
    "GetDataPipelineContainersResponse": {
      "description": "GetDataPipelineContainersResponse is the API response that\nreturns a list of container names for a given pipeline on a given edge.",
      "schema": {
        "$ref": "#/definitions/DataPipelineContainers"
      }
    },
    "GetEdgeInventoryDeltaResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeInventoryDeltaResponse"
      }
    },
    "HTTPProxyResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ProxyResponse"
      }
    },
    "HTTPServiceProxyCreateResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/HTTPServiceProxyCreateResponsePayload"
      }
    },
    "HTTPServiceProxyGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/HTTPServiceProxy"
      }
    },
    "HTTPServiceProxyListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/HTTPServiceProxyListPayload"
      }
    },
    "HTTPServiceProxyUpdateResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/HTTPServiceProxyUpdateResponsePayload"
      }
    },
    "HelmAppGetYamlResponse": {
      "description": "Ok",
      "headers": {
        "id": {
          "type": "string",
          "description": "ID of the entity\nMaximum character length is 64 for project, category, and runtime environment,\n36 for other entity types."
        },
        "status": {
          "type": "string"
        },
        "yaml": {
          "type": "string"
        }
      }
    },
    "HelmTemplateResponse": {
      "description": "Helm template response contains the rendered yaml",
      "schema": {
        "$ref": "#/definitions/HelmTemplateResponse"
      }
    },
    "InfraConfigGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/InfraConfig"
      }
    },
    "IsEmailAvailableResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EmailAvailability"
      }
    },
    "K8sDashboardKubeConfigResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/KubeConfigPayload"
      }
    },
    "K8sDashboardTokenResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/K8sDashboardTokenResponsePayload"
      }
    },
    "K8sDashboardViewonlyUserListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/K8sDashboardViewonlyUserListPayload"
      }
    },
    "K8sDashboardViewonlyUserUpdateResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/K8sDashboardViewonlyUserUpdatePayload"
      }
    },
    "KubernetesClusterInstallerResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/KubernetesClusterInstaller"
      }
    },
    "KubernetesClustersGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/KubernetesCluster"
      }
    },
    "KubernetesClustersHandleResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/KubernetesClusterCert"
      }
    },
    "KubernetesClustersListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/KubernetesClustersListResponsePayload"
      }
    },
    "LogCollectorListResponse": {
      "description": "LogCollectorListResponse is a LogCollectorsList response",
      "schema": {
        "$ref": "#/definitions/LogCollectorListPayload"
      }
    },
    "LogCollectorResponse": {
      "description": "LogCollectorResponse is a LogCollectorGet response",
      "schema": {
        "$ref": "#/definitions/LogCollector"
      }
    },
    "LogEntriesListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/LogEntry"
        }
      }
    },
    "LogEntriesListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/LogEntriesListPayload"
      }
    },
    "LogRequestDownloadResponse": {
      "description": "Ok",
      "schema": {
        "type": "string"
      }
    },
    "LogRequestDownloadResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/LogDownloadPayload"
      }
    },
    "LogRequestUploadResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/LogUploadPayload"
        }
      }
    },
    "LogStreamEndpointsResponse": {
      "description": "LogStreamEndpointsResponse encapsulates the response sent to clients\nthat request for log streams.",
      "schema": {
        "$ref": "#/definitions/LogStreamResponsePayload"
      }
    },
    "LoginFailedError": {
      "description": "Login failed",
      "schema": {
        "$ref": "#/definitions/APIErrorPayload"
      }
    },
    "LoginResponseWrapper": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/LoginResponse"
      }
    },
    "MLModelGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/MLModel"
      }
    },
    "MLModelListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/MLModelListResponsePayload"
      }
    },
    "MLModelStatusListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/MLModelStatusListPayload"
      }
    },
    "MLModelVersionURLGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/MLModelVersionURLGetResponsePayload"
      }
    },
    "NodeGetBySerialNumberResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeDeviceWithClusterInfo"
      }
    },
    "NodeGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Node"
      }
    },
    "NodeInfoGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/NodeInfo"
      }
    },
    "NodeInfoListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/NodeInfoListPayload"
      }
    },
    "NodeListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/NodeListPayload"
      }
    },
    "NotificationTopicsWrapper": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/NotificationTopics"
      }
    },
    "ProjectGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Project"
      }
    },
    "ProjectListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "ProjectListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ProjectListPayload"
      }
    },
    "ProjectServiceGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ProjectService"
      }
    },
    "ProjectServiceListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ProjectServiceListPayload"
      }
    },
    "ProxyCallResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ProxyResponsePayload"
      }
    },
    "RenderApplicationResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/RenderApplicationResponsePayload"
      }
    },
    "ResponseBaseEdgeWrapper": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ResponseBaseEdge"
      }
    },
    "ResponseBaseWrapper": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ResponseBase"
      }
    },
    "RuntimeEnvironmentGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/RuntimeEnvironment"
      }
    },
    "RuntimeEnvironmentListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/RuntimeEnvironmentListPayload"
      }
    },
    "ScriptGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Script"
      }
    },
    "ScriptListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Script"
        }
      }
    },
    "ScriptListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ScriptListPayload"
      }
    },
    "ScriptRuntimeGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ScriptRuntime"
      }
    },
    "ScriptRuntimeListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ScriptRuntime"
        }
      }
    },
    "ScriptRuntimeListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ScriptRuntimeListPayload"
      }
    },
    "SensorGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Sensor"
      }
    },
    "SensorListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Sensor"
        }
      }
    },
    "SensorListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/SensorListPayload"
      }
    },
    "ServiceBindingGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceBinding"
      }
    },
    "ServiceBindingListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceBindingListPayload"
      }
    },
    "ServiceBindingStatusListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceBindingStatusListPayload"
      }
    },
    "ServiceClassGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceClass"
      }
    },
    "ServiceClassListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceClassListPayload"
      }
    },
    "ServiceDomainGetEffectiveProfileResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceDomainProfile"
      }
    },
    "ServiceDomainGetHandleResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/EdgeCert"
      }
    },
    "ServiceDomainGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceDomain"
      }
    },
    "ServiceDomainInfoGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceDomainInfo"
      }
    },
    "ServiceDomainInfoListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceDomainInfoListPayload"
      }
    },
    "ServiceDomainListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceDomainListPayload"
      }
    },
    "ServiceInstanceGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceInstance"
      }
    },
    "ServiceInstanceListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceInstanceListPayload"
      }
    },
    "ServiceInstanceStatusListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/ServiceInstanceStatusListPayload"
      }
    },
    "ServiceListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/Service"
      }
    },
    "SetupSSHTunnelingResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/WstunPayload"
      }
    },
    "SoftwareDownloadedServiceDomainListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/SoftwareDownloadedServiceDomainListPayload"
      }
    },
    "SoftwareReleaseListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/SoftwareReleaseListPayload"
      }
    },
    "SoftwareUpdateBatchGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/SoftwareUpdateBatch"
      }
    },
    "SoftwareUpdateBatchListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/SoftwareUpdateBatchListPayload"
      }
    },
    "SoftwareUpdateCredentialsCreateResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/SoftwareUpdateCredentialsCreatePayload"
      }
    },
    "SoftwareUpdateServiceDomainListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/SoftwareUpdateServiceDomainListPayload"
      }
    },
    "SoftwareUpdateStateResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/SoftwareUpdateState"
      }
    },
    "StorageProfileListResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/StorageProfileListResponsePayload"
      }
    },
    "TeardownSSHTunnelingResponse": {
      "description": "Ok"
    },
    "TenantGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/TenantInfo"
      }
    },
    "TenantPropsGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/TenantProps"
      }
    },
    "UpdateDocumentResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/UpdateDocumentResponse"
      }
    },
    "UpdateDocumentResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/UpdateDocumentResponseV2"
      }
    },
    "UserApiTokenCreateResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/UserApiTokenCreated"
      }
    },
    "UserApiTokenListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/UserApiToken"
        }
      }
    },
    "UserGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/User"
      }
    },
    "UserListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "UserListResponseV2": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/UserListPayload"
      }
    },
    "UserPropsGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/UserProps"
      }
    },
    "UserPublicKeyGetResponse": {
      "description": "Ok",
      "schema": {
        "$ref": "#/definitions/UserPublicKey"
      }
    },
    "UserPublicKeyListResponse": {
      "description": "Ok",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/UserPublicKey"
        }
      }
    },
    "appDetails": {
      "description": "Detailed information of an specific app",
      "schema": {
        "$ref": "#/definitions/App"
      }
    },
    "appHealthResponse": {
      "description": "appHealthResponse contains aggregated health from various sources, for a given app",
      "schema": {
        "$ref": "#/definitions/AppHealth"
      }
    },
    "appListResponse": {
      "description": "Listing all apps in the namespace",
      "schema": {
        "$ref": "#/definitions/AppList"
      }
    },
    "appOverviewResponse": {
      "description": "Return App combined Info",
      "schema": {
        "$ref": "#/definitions/AppOverview"
      }
    },
    "dashboardResponse": {
      "description": "Dashboard response model",
      "schema": {
        "$ref": "#/definitions/MonitoringDashboard"
      }
    },
    "errorTracesResponse": {
      "description": "Number of traces in error"
    },
    "grafanaInfoResponse": {
      "description": "Return all the descriptor data related to Grafana",
      "schema": {
        "$ref": "#/definitions/GrafanaInfo"
      }
    },
    "graphResponse": {
      "description": "HTTP status code 200 and cytoscapejs Config in data",
      "schema": {
        "$ref": "#/definitions/GraphConfig"
      }
    },
    "istioConfigDetailsResponse": {
      "description": "IstioConfig details of an specific Istio Object",
      "schema": {
        "$ref": "#/definitions/IstioConfigDetails"
      }
    },
    "istioConfigList": {
      "description": "HTTP status code 200 and IstioConfigList model in data",
      "schema": {
        "$ref": "#/definitions/IstioConfigList"
      }
    },
    "istioConfigPermissions": {
      "description": "Return caller permissions per namespace and Istio Config type",
      "schema": {
        "$ref": "#/definitions/IstioConfigPermissions"
      }
    },
    "istioStatusResponse": {
      "description": "Return a list of Istio components along its status",
      "schema": {
        "$ref": "#/definitions/IstioComponentStatus"
      }
    },
    "iter8ExperimentGetDetailResponse": {
      "description": "Return a Iter8 Experiment detail",
      "schema": {
        "$ref": "#/definitions/Iter8ExperimentDetail"
      }
    },
    "iter8ExperimentsResponse": {
      "description": "Return a list of Iter8 Experiment Items",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Iter8ExperimentItem"
        }
      }
    },
    "iter8StatusResponse": {
      "description": "Return Iter8 Info",
      "schema": {
        "$ref": "#/definitions/Iter8Info"
      }
    },
    "jaegerInfoResponse": {
      "description": "Return all the descriptor data related to Jaeger",
      "schema": {
        "$ref": "#/definitions/JaegerInfo"
      }
    },
    "kialimetricsResponse": {
      "description": "Metrics response model",
      "schema": {
        "$ref": "#/definitions/KialiMetrics"
      }
    },
    "meshTlsResponse": {
      "description": "Return the mTLS status of the whole Mesh",
      "schema": {
        "$ref": "#/definitions/MTLSStatus"
      }
    },
    "namespaceAppHealthResponse": {
      "description": "namespaceAppHealthResponse is a map of app name x health",
      "schema": {
        "$ref": "#/definitions/NamespaceAppHealth"
      }
    },
    "namespaceList": {
      "description": "List of Namespaces",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/namespace"
        }
      }
    },
    "namespaceOverviewResponse": {
      "description": "Return Namespace combined Info",
      "schema": {
        "$ref": "#/definitions/NamespaceOverview"
      }
    },
    "namespaceTlsResponse": {
      "description": "Return the mTLS status of a specific Namespace",
      "schema": {
        "$ref": "#/definitions/MTLSStatus"
      }
    },
    "namespaceValidationSummaryResponse": {
      "description": "Return the validation status of a specific Namespace",
      "schema": {
        "$ref": "#/definitions/IstioValidationSummary"
      }
    },
    "serviceDetailsResponse": {
      "description": "Listing all the information related to a workload",
      "schema": {
        "$ref": "#/definitions/ServiceDetails"
      }
    },
    "serviceHealthResponse": {
      "description": "serviceHealthResponse contains aggregated health from various sources, for a given service",
      "schema": {
        "$ref": "#/definitions/ServiceHealth"
      }
    },
    "serviceListResponse": {
      "description": "Listing all services in the namespace",
      "schema": {
        "$ref": "#/definitions/ServiceList"
      }
    },
    "serviceOverviewResponse": {
      "description": "Return Service combined Info",
      "schema": {
        "$ref": "#/definitions/ServicesOverview"
      }
    },
    "spansResponse": {
      "description": "Listing all the information related to a Span",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Span"
        }
      }
    },
    "statusInfo": {
      "description": "HTTP status code 200 and statusInfo model in data",
      "schema": {
        "$ref": "#/definitions/StatusInfo"
      }
    },
    "threeScaleHandlersResponse": {
      "description": "List of ThreeScale handlers created from Kiali to be used in the adapter's configuration",
      "schema": {
        "$ref": "#/definitions/ThreeScaleHandlers"
      }
    },
    "threeScaleInfoResponse": {
      "description": "Return if ThreeScale adapter is enabled in Istio and if user has permissions to write adapter's configuration",
      "schema": {
        "$ref": "#/definitions/ThreeScaleInfo"
      }
    },
    "threeScaleRuleResponse": {
      "description": "Return Threescale rule definition for a given service",
      "schema": {
        "$ref": "#/definitions/ThreeScaleServiceRule"
      }
    },
    "tracesDetailResponse": {
      "description": "Listing all the information related to a Trace",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Trace"
        }
      }
    },
    "workloadDetails": {
      "description": "Listing all the information related to a workload",
      "schema": {
        "$ref": "#/definitions/Workload"
      }
    },
    "workloadHealthResponse": {
      "description": "workloadHealthResponse contains aggregated health from various sources, for a given workload",
      "schema": {
        "$ref": "#/definitions/WorkloadHealth"
      }
    },
    "workloadListResponse": {
      "description": "Listing all workloads in the namespace",
      "schema": {
        "$ref": "#/definitions/WorkloadList"
      }
    },
    "workloadOverviewResponse": {
      "description": "Return Workload combined Info",
      "schema": {
        "$ref": "#/definitions/WorkloadOverview"
      }
    }
  },
  "securityDefinitions": {
    "BearerToken": {
      "description": "Bearer Token authentication",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "x-meta-array": [
    "value1",
    "value2"
  ],
  "x-meta-array-obj": [
    {
      "name": "obj",
      "value": "field"
    }
  ],
  "x-meta-value": "value"
}